<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hugo on My New Hugo Site</title><link>https://example.org/tags/hugo/</link><description>Recent content in hugo on My New Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Apr 2020 11:19:09 +0800</lastBuildDate><atom:link href="https://example.org/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo 自动化 CI V2</title><link>https://example.org/posts/hugo-ci-v2/</link><pubDate>Mon, 13 Apr 2020 11:19:09 +0800</pubDate><guid>https://example.org/posts/hugo-ci-v2/</guid><description>改进了一下自动化发布博客的 CI，代码在下面。
如果想拿去用的话只需要修改 env 下的值就行了。
name: blog on: [push] # 各种信息在此处设置 env: # config.toml 里 theme 的值 THEME_NAME: left # 主题的 github 链接 THEME_REPO: https://github.com/batkiz/left.git # github username USER_NAME: batkiz # github email EMAIL: batkiz@outlook.com # GitHub token GH_TOKEN: ${{ secrets.GH_TOKEN }} jobs: build: name: Build runs-on: ubuntu-latest steps: # 获取 repo 内文件 - uses: actions/checkout@v2 # 使用预编译的 Hugo 二进制文件 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#34;latest&amp;#34; extended: true # 新建站点 - name: new site run: | hugo new site $HOME/blog # 获取主题 - name: get theme run: | git clone --depth=1 $THEME_REPO $HOME/blog/themes/$THEME_NAME # 获取 $user.</description></item><item><title>用 C# 设置 Hugo Aliases</title><link>https://example.org/posts/set-hugo-aliases-with-csharp/</link><pubDate>Sun, 05 Jan 2020 00:53:07 +0800</pubDate><guid>https://example.org/posts/set-hugo-aliases-with-csharp/</guid><description>2020 年新年好！
相信细心的读者已经注意到了，本博客的文章链接已经全部从 blog.batkiz.com/:year/:month/:day/:filename/ 调整为了 blog.batkiz.com/posts/:year/:filename/ 的 url 格式。主要的原因是 url 的可读性：一则我个人认为让完整的日期出现在文章的 url 中对“人”非常之不友好。比如我曾想直接输入文章链接访问文章时，日期极大地为我原本就不太好的记忆力增加了负担。另一方面，具体而完整的时间对于读者也是不必要的，几乎没有人会关注文章是在几月几号几点写的，作为读者，更关注的点在于内容，在 url 中隐藏掉具体的时间，只给出一个年份，在我看来是某种程度上的平衡。
其实这个想法早在将博客生成器由 hexo 切换到 hugo 时就有了，但是由于兼容性的问题（我在煎蛋等平台上的投稿有到我文章的链接），我不能让原本的文章给 404 掉，所以当时只能忍辱负重，继续使用含有完整日期的 url。（见此文）
而在某天晚上我刷牙洗漱时，我突然想到，能否将 url 更改的同时，设置以带有完整日期链接的访问跳转到新的链接。经过一番搜索，我找到了名为 Aliases 的功能，这正是我要找的！
但是，在打算用这个功能时，我犯了难：博客经过三年多的积累，文章的量并不是我能够手动一篇一篇的修改的了的。当然啦，作为一个程序员，第一时间想到的，当然就是通过写代码来自动化啦。
通过观察，所添加的 Aliases 项应被添加在 frontmatter 中，其主要依赖了文章的日期即 date 项。我最开始的想法是，将每篇文章的 frontmatter （在我的文章中用的是 yaml）序列化，对序列化后的项进行修改，最后再反序列化，保存至文章。
但是由于我并没有找到一个可用性较高的解析 markdown 文件 yaml frontmatter 的库，此想法只好作罢。
经过我的进一步观察，每篇文章的 date 项均处在第三行，且格式为
date: yyyy-mm-dd time 事情就好办了起来。
核心思想即：读入文本，将位于第三行的日期解析出来-&amp;gt;生成 Aliases 项-&amp;gt;写入文本。
下面是代码（C# 8, dotnet core 3.1），由于时间匆忙，且需求简单，因此未做过多的处理。
using System.Linq; using System.IO; using System; namespace AddAliasToBlogPosts { class Program { static void Main(string[] args) { string dir = @&amp;#34;C:\code\blog-contents\content\posts&amp;#34;; var posts = GetPosts(dir); foreach (var item in posts) { AppendAlias(GetAlias(item), item, 3); //System.</description></item><item><title>博客迁移至 Hugo 并实现自动化</title><link>https://example.org/posts/migrate-to-hugo-and-automation/</link><pubDate>Sun, 20 Oct 2019 22:01:44 +0800</pubDate><guid>https://example.org/posts/migrate-to-hugo-and-automation/</guid><description>好久不见！
自 6 月以来，本人虽然没什么产出，但怎奈没动力写博客，至今只写了两篇不疼不痒的综述文章。但今天（2019/10/20）偶然在 v2ex 上看到了 hexo 释出 4.0 版本 的消息，而后想到自己曾数次想要脱离贵前端生态圈，摆脱令人脑壳痛的依赖问题，实现博客自动化等等等等事情。
于是，我趁着今天是闲暇的周日，把一切事情办好了。
下面是过程复现与总结。
Hugo 其实最早我并不是太想换到 Hugo 的，但奈何自己想要写一个静态博客生成器的计划一直提不上日程…… 便选择了这个解决方案。
之后是主题的选择。由于 Hugo 的主题生态圈较之 Hexo 仍较为匮乏，因此选择并不多。经过我在各种网站上的搜罗与比较，下面列出我较为偏向的选择：
Maupassant，这个是我在 Hexo 上一直使用的主题，但 Hugo 上的移植版我不太满意，pass。 https://linw1995.com/，这个主题我十分喜欢，但由于没有提供主题的 repo，只能作罢。 LeaveIt，这个主题看着还行，但太久没维护，都没办法用…… KeepIt，这个是上面 LeaveIt 的 fork，也是我最终的选择。 但由于 KeepIt 的功能还是不太能满足我的需求，因此我又 fork 了一份，作为自用。地址 batkiz/left
开始迁移 整个迁移过程中，我最在意的是该死的 兼容性 ，即，我新生成的博客要与之前的博客在整体行为上没有太大变化，下面就是在保证兼容性前提下的迁移过程。
链接 之前的链接不能直接 404，让读者找不到文章（虽然原来就没啥读者），不能造成割裂行为。
Hexo 默认的链接生成方法为 /:year/:month/:day/:filename/，而 Hugo 的则为 /:year/:filename/。
解决很简单，修改为相同的即可。
RSS 之前在 hexo 之上构建时，我采用的 hexo 插件是生成出 atom.xml 文件的，而在新的主题下生成的则是 index.xml。
解决方法：在 config.toml 中加入下列内容
[outputs] home = [&amp;#34;Atom&amp;#34;, &amp;#34;HTML&amp;#34;] [outputFormats.</description></item></channel></rss>