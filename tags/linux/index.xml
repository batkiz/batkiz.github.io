<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on My New Hugo Site</title><link>https://example.org/tags/linux/</link><description>Recent content in linux on My New Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 23 Oct 2018 12:55:18 +0000</lastBuildDate><atom:link href="https://example.org/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>翻译 | Vim 的诞生</title><link>https://example.org/posts/where-vim-came-from/</link><pubDate>Tue, 23 Oct 2018 12:55:18 +0000</pubDate><guid>https://example.org/posts/where-vim-came-from/</guid><description>原文：Where Vim Came From
另投稿于 煎蛋
translated by batkiz &amp;amp; RUInsYi @ Par-Tuner
我最近偶然发现了一个名为 Intel HEX 的文件格式。据我所了解，Intel HEX 文件（使用 .hex 扩展名），将二值图像编码为一行一行的十六进制数字，为了使它们更透明。显然它们被应用于单片机编程或将数据烧录进 ROM。无论如何，当我第一次在 Vim 中打开一个 HEX 文件时，我发现了一些令人震惊的事。这个文件格式——至少对我来说——非常难懂，但 Vim 已经知道了有关它的一切。HEX 文件的每一行都是一个被分为不同字段的记录——Vim 已经先我一步为每一字段着了色。我敬畏地问道，set ft?。filetype=hex，Vim 得意洋洋地回答。
Vim 无处不在。它被无数人使用，因此对 HEX 文件的支持并不令人意外。Vim 在 Mac OS 上被预装，且在 Linux 世界有着大批拥趸。甚至讨厌它的人也对其非常熟悉，大多数命令行工具会默认将用户扔向 Vim，以至于被困在 Vim 中的新手已经成为了一个梗。很多的网站，包括 Facebook，会在你按 j 键时向下滚动，按 k 键时向上——Vim 在数字文化中奇迹般以高水准传播。
然而 Vim 还是一个谜。不像 React，每个人都知道它被 Facebook 开发与维护，Vim 并没有明显的赞助者。尽管它极为普遍和重要，仍没有任何形式的委员会或组织机构为 Vim 的事宜做决定。你可以花费几分钟在 Vim 官网 上闲逛，却不会在谁创造了 Vim 或者为什么创造了 vim 上得到更好的结果。如果你径直打开 Vim，不加任何文件参数，你就会看到 Vim 的启动信息，称 Vim 被“Bram Moolenaar 等人”开发。但这也仅止于此。谁是 Bram Moolenaar，谁又是他暗中的合作伙伴？</description></item><item><title>wsl 使用指北</title><link>https://example.org/posts/using-wsl/</link><pubDate>Sat, 06 Oct 2018 16:59:37 +0000</pubDate><guid>https://example.org/posts/using-wsl/</guid><description>经由多个版本更新，现在 wsl 对于普通开发工作已基本没啥问题了，已可基本抛弃虚拟机（
注：由于 wsl 实现方式是自己实现了一遍 Linux Kernel1，因此涉及 Linux 底层（内核、hack 等）的东西基本还是不行的。。
简明入坑教程 安装 进入设置，在 更新与安全 -&amp;gt; 开发者选项 中打开开发人员模式 直接使用 Cortana 搜索 Windows 功能，在 启用或关闭 Window 功能 中勾选打开 适用于 Linux 的 Windows 子系统 进入 microsoft store，搜索 Linux，挑一个顺眼的发行版安装2 待安装完成后打开该发行版的 shell，然后设置用户名与密码 提升体验 换源 是必须的 安装 build-essential, zsh, vim 等并配置 wsl-terminal wsl-terminal 是 「用于 Windows Subsystem for Linux (WSL) 的终端模拟器，基于 mintty、fatty 和 wslbridge。」，解决了很多默认终端里存在的问题，建议 wsl 用户都来下载使用这个。
基本配置其实看看文档都能理解，不过我还是想推荐几个功能：
运行 tools/1-add-open-wsl-terminal-here-menu.js (帮助) 来添加一个 Open wsl-terminal Here 右键菜单到资源管理器上。 配置文件 etc/wsl-terminal.</description></item><item><title>将linux装入u盘之路</title><link>https://example.org/posts/install-linux-in-upan/</link><pubDate>Thu, 21 Dec 2017 20:11:01 +0000</pubDate><guid>https://example.org/posts/install-linux-in-upan/</guid><description>别名：a day wasted
因为这事浪费了我一天时间，我觉得还是有必要写篇文章警醒后来人的（
起因 一时兴起啊 前几天有个群里有人想把 Windows 装入 u 盘，加之起了一个“做个系统随身带着岂不是美滋滋”的想法，今天早上着手制作。
过程 LinuxLive USB Creater 这么一个不好做的事，当然是事先找了很多资料的~ 于是在一个知乎回答里看到推荐了LinuxLive USB Creater，便去试了试，打开官网，按捺住吐槽这炫目的 Logo、古老的界面的冲动，先试了试。 过程不外乎选择镜像文件、u 盘之类。值得一提的是如果你勾选的话，其会自动下载一个 vbox portable 到你的 u 盘中。 安装后，根据官方文档，启动Virtualize_This_Key.exe，然而不行；重启也是不行。 方案枪毙
Rufus Rufus是一个非常好用的创建 usb 启动盘的工具。其作者对于捐赠的态度也极其令人敬佩
这个问题老是有人问我，不过这个页面上真的 没有 捐助按钮。 主要原因是我认为捐助模式不能真正帮助软件发展，相反的，会对没有捐助的用户产生一种无意的诱导性的愧疚歧视感。 当然，如果你非要坚持，你可以捐给 Free Software Foundation（自由软件基金会），他们才是无数类似 Rufus 的软件得以存在的原因。 不管如何，我都要在此对你们说 谢谢你们 对这个小程序持续的支持和热情：非常非常感谢。 但是无论怎样也请你随意使用 Rufus ，无需介怀对此项目没有付出任何经济上的贡献 – 因为你本来就不需要嘛。
但这不是我们的重点照例把iso镜像烧录进 u 盘，而后设置电脑从 u 盘启动。 显然这是无济于事的（，在再次尝试了一番 elementary os 并再次认为其好看后，便开始寻找下一个解决方案 如果我还有一个 u 盘的话应该是可以把系统安装进 u 盘的，可惜我没有
deepin boot maker &amp;amp; universal USB installer 和 Rufus 基本是一类软件，不作赘述：没卵用</description></item></channel></rss>