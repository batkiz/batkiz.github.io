<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>windows on My New Hugo Site</title><link>https://example.org/tags/windows/</link><description>Recent content in windows on My New Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 27 Jun 2020 20:58:36 +0800</lastBuildDate><atom:link href="https://example.org/tags/windows/index.xml" rel="self" type="application/rss+xml"/><item><title>powershell, headers 与乱码</title><link>https://example.org/posts/pwsh-headers-and-messy-code/</link><pubDate>Sat, 27 Jun 2020 20:58:36 +0800</pubDate><guid>https://example.org/posts/pwsh-headers-and-messy-code/</guid><description>问题起源 在几天之前，我的命令行翻译程序挂掉了，不过由于平时用的也少，所以就没太管，昨天才想起来再找个 API 用。
正如前文所述，我极少用到这个，所以我就懒得去申请腾讯、彩云或是 bing 的 API，毕竟太麻烦了。因此我决定找一个直接提供公用接口的 API，次数限制啥的只要不是太离谱就行。功夫不负有心人，在 Google 上翻了两页之后，我找到了由 厦门大学自然语言处理实验室 提供的 云译 CloudTranslation 的公开 API。
解决过程 就当我读完短短的 API Doc 后准备开始写段小脚本时，悲剧发生了：它竟然乱码了！
然后我也很不能相信，于是又回去读了读文档，看到其中清楚地写着：
返回格式： UTF-8 编码纯文本
WHAT THE F@XK? 我的 Windows 系统一直都是默认 unicode 的，而当前 pwsh 的活动代码页也是 65001。换言之，这个接口的返回值乱码绝对不是本地是 gbk/gb2312 这种低级错误。那问题出在哪呢？
为了确定它返回的编码确实是 utf-8，我看了看它的 headers，以防出现他本身发送的是 gbk/gb2312 这种乌龙。
通过 乱码恢复 确定了乱码文字现在的编码是 iso-8859-1，其本身确实是 utf-8 的。
打眼一看确实没啥问题，但我注意到了其中并没有指定 charset/encoding 信息。
以防万一，我又在 wsl 中用 curl 对比执行了一下：
此时我已经基本确定，乱码是因为 headers 中缺了东西导致的，但为什么会导致这种问题呢？我想让他不乱码难道就只能通过 wsl 来调用 API 了么？
然后通过我西安市 top3 的信息检索能力的 Google 技术，找到了这个 StackOverflow 回答：</description></item><item><title>在 winget 到来之际，再谈谈 scoop</title><link>https://example.org/posts/talk-about-scoop/</link><pubDate>Thu, 21 May 2020 15:56:06 +0800</pubDate><guid>https://example.org/posts/talk-about-scoop/</guid><description>Microsoft Build 2020 开发者大会在几天前召开了，除了 .NET, C# 等的常规更新之外，微软也发布了全新的、官方支持的命令行安装工具 winget。winget 出现的意义不用多说：Windows 终于迎来了受官方支持的命令行安装工具。此前虽然有 choco, scoop 等，但都只是第三方工具而已，如今微软第一方下场，无疑给开发者们带来了极大的鼓舞。
winget 的使用体验我一直有在 Telegram 频道 里更新，在这里不再多谈——winget 目前还没到 1.0 版本，现在只是 preview 而已，某些点今天谈完可能第二天就给更新了。或许到了 1.0 版本释出时我会再更一篇文章吧。
谈谈 scoop 现有的问题 我在这里更想谈一谈 scoop 这个第三方的 cli installer。我一直一来都是一个 scoop 吹，本博客之前也曾介绍过 scoop1，但经过了这一年多的使用，我也逐渐意识到了许多问题，这些问题或许不是“痛点”，但却总让人有股隔靴搔痒的无力感。
重名问题 当多个 bucket 内有同名 manifest 时，会按照 bucket 的顺序，自动安装最靠前的 manifest。比如我的 backit 与 main bucket 里都存在 ffsend，执行 scoop install ffsend 时，scoop 会安装 backit/ffsend，而非有一个询问。虽然可以用 scoop install main/ffsend 来指定安装，但 scoop 官方是应该注意到这一点的，而非让用户每次都 search 一下。
不受关注的软件 scoop 的 bucket 是靠社区维护的，通常情况下这意味着 bug 更容易被发现——最先发现问题的人通常都会去开 issue 或 pull request。</description></item><item><title>滚进 wsl2</title><link>https://example.org/posts/lets-roll-to-wsl2/</link><pubDate>Wed, 06 Nov 2019 23:23:42 +0800</pubDate><guid>https://example.org/posts/lets-roll-to-wsl2/</guid><description>本文已于 2020/05/26 更新，过时的信息已用删除线标注。
我是真没想到这都快过半年了 20H1 还没释出稳定版
早在今年上半年的 Build 2019 上，微软宣布了 wsl2，使得 wsl 不再只是 system call 的翻译，而是切切实实跑在一个真正的 Linux 内核之上。这样一来，wsl 将不再受内核的局限，能够运行 docker 等与 Linux kernel 密切相关的软件。
自宣布以来，wsl2 的开发很快提上日程，并将在 Windows 10 20H1 版本中可用。但想要升级至此版本，目前还需进入预览体验计划，而 Windows 10 目前的 bug 数量使我对 insider fast ring 望而却步。 最近在经过了很长时间的心理斗争之后，我最终还是进入了快速预览版，开始体验 wsl2，下面是途中遇到的一些坑，留存至此，以备后来者避坑。
首先需要说明的是，wsl1 与 wsl2 各有优劣，两者之间并非常规意义上的「升级」，更像是一种并行。如果并非是涉及内核等问题，仅仅是执行一些上层程序，我个人建议继续使用 wsl1，这样更加节省内存等资源。（当然可以 wsl1 与 wsl2 各安装一个/多个，按需启动）
安装 安装过程参考官方的 WSL 2 的安装说明 即可。
首先滚入 20H1 的预览版，升级系统，而后开启 hyper-v 平台，跑一个命令将原本的 wsl1 转为 wsl2 即可。更改的过程可能要花几分钟时间，等待就好。
之后就能开始使用 wsl2 啦！
各种坑 ……当然，路途不总是一帆风顺的，而是伴随着艰难险阻。</description></item><item><title>oh my powershell</title><link>https://example.org/posts/oh-my-powershell/</link><pubDate>Tue, 24 Sep 2019 22:43:46 +0000</pubDate><guid>https://example.org/posts/oh-my-powershell/</guid><description>对 *nix 平台上的 oh-my-zsh 的绝赞复刻！
备受好评的 shell 配置，来到了 powershell 之上~
requirements set-executionpolicy remotesigned 执行策略更改，以执行脚本、安装应用 scoop installation Install-Module posh-git -Scope CurrentUser Install-Module oh-my-posh -Scope CurrentUser scoop install scoop-completion 亦可均由 scoop 安装，即
scoop install scoop-completion scoop install oh-my-posh scoop install posh-git 配置 配置文件为 ~\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1，若不存在请自行创建。
写入下列内容并保存：
Import-Module posh-git Import-Module oh-my-posh Set-Theme PowerLine more things 我的 profile 文件与自己写的主题 dotfiles/powershell 最好用 Windows Terminal 作为终端</description></item><item><title>初探 Scoop</title><link>https://example.org/posts/using-scoop/</link><pubDate>Mon, 31 Dec 2018 00:23:27 +0000</pubDate><guid>https://example.org/posts/using-scoop/</guid><description>缘起 Linux 用的多了，不免会觉得有一个靠谱好用的包管理器是一件令人身心愉悦的事。许多人也便顺理成章地想要在 Windows 系统上来一个包管理器。
只是一方面微软已然在大力推介其 Microsoft Store，另一方面命令行形式的包管理器对于大多数人也是极为不友好的。如此这般，一个官方的包管理器自然无望。
好在开源社区里从来不缺人造轮子。于是我们现在有了两个选择：Chocolatey 与 Scoop，一个 package manager ，一个 command-line installer 。
既然本文标题为 scoop，那么显然 choco 已不是我们主要要讨论的了，至于最初我为什么选择了 scoop 而非 Choco，原因早已不记得了。或许是因为 choco 分为开源版与商业版，抑或是我尚未真正想要使用 Windows 上的“包管理器”来管理我的所有软件——虽然我不必与各种流氓软件斗智斗勇，但我还是非常享受各种软件的安装过程中的自定义，Add to PATH, 添加到右键菜单。当然，最主要的原因还是 Windows 并没有一个统一的命令行形式的安装软件接口，因此对于普通的软件，还是要无止境地 next——这又和不用包管理器又有什么区别呢？
让我们把视线转到 Linux 平台，apt 等包管理器自动进行了软件的依赖分析与解压、配置的过程。Windows 系统之上与之理念相似的便是所谓“绿色软件”——解压即可使用。这也正是 scoop 所做的，利用所写的 mainfest，将解压、配置环境变量等自动化处理。另一方面，Windows 之上大多数软件并无所谓依赖的东西，最多便是一个 VC runtime，这也使得 scoop 的工作量更少了。
使用 Scoop 默认是安装在你的用户文件夹下的，这样自然有着许多好处，例如不需要管理员权限。但如果你想要将其改变，可以在安装之前更改掉 scoop path
[environment]::setEnvironmentVariable(&amp;#39;SCOOP&amp;#39;,&amp;#39;C:\soft\Scoop&amp;#39;,&amp;#39;User&amp;#39;) $env:SCOOP=&amp;#39;C:\soft\Scoop&amp;#39; 其中的 C:\soft\Scoop 自然可以换成你想要的路径。 而后便是执行官网之上的那一行命令
iex (new-object net.webclient).downloadstring(&amp;#39;https://get.scoop.sh&amp;#39;) ——若是报错，便将 execution policy 更改一下
Set-ExecutionPolicy RemoteSigned -scope CurrentUser 而后再添加上 extras, versions 之类的 bucket，便可愉快的使用了。</description></item><item><title>wsl 使用指北</title><link>https://example.org/posts/using-wsl/</link><pubDate>Sat, 06 Oct 2018 16:59:37 +0000</pubDate><guid>https://example.org/posts/using-wsl/</guid><description>经由多个版本更新，现在 wsl 对于普通开发工作已基本没啥问题了，已可基本抛弃虚拟机（
注：由于 wsl 实现方式是自己实现了一遍 Linux Kernel1，因此涉及 Linux 底层（内核、hack 等）的东西基本还是不行的。。
简明入坑教程 安装 进入设置，在 更新与安全 -&amp;gt; 开发者选项 中打开开发人员模式 直接使用 Cortana 搜索 Windows 功能，在 启用或关闭 Window 功能 中勾选打开 适用于 Linux 的 Windows 子系统 进入 microsoft store，搜索 Linux，挑一个顺眼的发行版安装2 待安装完成后打开该发行版的 shell，然后设置用户名与密码 提升体验 换源 是必须的 安装 build-essential, zsh, vim 等并配置 wsl-terminal wsl-terminal 是 「用于 Windows Subsystem for Linux (WSL) 的终端模拟器，基于 mintty、fatty 和 wslbridge。」，解决了很多默认终端里存在的问题，建议 wsl 用户都来下载使用这个。
基本配置其实看看文档都能理解，不过我还是想推荐几个功能：
运行 tools/1-add-open-wsl-terminal-here-menu.js (帮助) 来添加一个 Open wsl-terminal Here 右键菜单到资源管理器上。 配置文件 etc/wsl-terminal.</description></item><item><title>解决 cmder 光标问题</title><link>https://example.org/posts/solving-cmder-space/</link><pubDate>Sat, 16 Jun 2018 22:07:53 +0000</pubDate><guid>https://example.org/posts/solving-cmder-space/</guid><description>问题 由于 powershell 配置有些麻烦，所以最近在使用 cmder，然而在使用中有一个问题非常难受： 在 cmder 中，无论英文还是中文，输入的光标变宽或者多一个字符。
解决方法 进入 %CMDER_ROOT%\vendor 文件夹，编辑 profile.ps1，寻找下列信息(Ctrl + F)
Microsoft.PowerShell.Utility\Write-Host &amp;#34;`nλ &amp;#34; -NoNewLine -ForegroundColor &amp;#34;DarkGray&amp;#34; 将其中的 λ 改为 # 或其它字符即可。
如果使用的是 cmd，则编辑 clink.lua，寻找
if env == nil then lambda = &amp;#34;λ&amp;#34; else lambda = &amp;#34;(&amp;#34;..env..&amp;#34;) λ&amp;#34; end 将其中的 λ 改为 # 或其它字符即可。</description></item><item><title>如何使用Xbox手柄玩Minecraft</title><link>https://example.org/posts/how-to-play-minecrafet-with-xbox-controller/</link><pubDate>Tue, 06 Mar 2018 15:23:26 +0000</pubDate><guid>https://example.org/posts/how-to-play-minecrafet-with-xbox-controller/</guid><description>前几天入手了一个 Xbox one 手柄，拿来 van ♂ 游戏，育碧的刺客信条原生滋瓷手柄，感觉不错。 但 Java 版 Minecraft 却并未支持手柄，虽然 Minecraft for Windows 10 对手柄原生支持，但可惜我要玩的是我们自行搭建的 mod 服。因此只好寻求其他方法。
被枪毙的方案 mod 在搜寻过程中，有人称该 mod 已不再更新，且 bug 较多，因此不予考虑。 Xpadder 等映射软件 需要使用第三方软件，稳定性堪忧，且需自行调整键位。 最终方案 好在一位朋友找到了油管上一位小哥上传的视频，问题终于得以解决。 为方便各位不想看或不能看的，我将方法写在下面。
步骤 打开 steam，进入库中添加本地游戏，快捷方式或自行寻找文件请随意。 点击右上角 🎮 图标，进入大屏幕模式。 而后对 Minecraft 进行单独设置为模拟键鼠模式。 在 steam 中打开 Minecraft。 enjoy it! :)
既然是模拟键鼠，那体验肯定是比不上 Windows 10 版原生支持的体验的。但总比没有强= =
2018 年八月更新： 买了个基岩版 MC，手柄体验完美！</description></item><item><title>我的电脑软件</title><link>https://example.org/posts/software-on-my-computer/</link><pubDate>Wed, 01 Nov 2017 07:40:44 +0000</pubDate><guid>https://example.org/posts/software-on-my-computer/</guid><description>时隔多时，我终于要从 Linux 平台回归 Windows，回想一番，把自己将要用的软件于此汇总一下。
也算是给自己一个备份归档。
浏览器 Vivaldi 一款来自 opera 浏览器创始人的浏览器 我一直在使用的浏览器，美观简洁，十分好用，标签组功能非常赞 chromium 内核，支持扩展~~(没用过就是了)~~ 2018-3-2 update: 添加了云同步的功能，完美！ Chrome Google 出品，掌握特殊上网姿势后云同步十分好用
Edge 🚀UWP Windows 10 预置浏览器 渲染内核反人类，为什么非要等到载入完成才渲染啊喂！
Firefox （三大神兽集齐了 主要用来做题用（CTF)。
下载 FDM 简洁美观的下载工具，还不限速，可惜不滋磁 ed2k 链接。
迅雷极速版 修改版的，完全绿色，可以用来下载磁力。（FDM 的磁力功能有够差的
dpdownload baidupcs-go 一个借由命令行操作的百度云工具
NetSpeedMonitor 实时查看当前网速的，直接作为任务栏插件显示，美观了不少 不能自动切换网线和 WiFi 就很难受
播放器 zPlayer UWP 🚀UWP 采用 vlc 的解码器，Fluent Design 界面，颜值爆表 现在需要付费了（好像不定时有限免活动
网易云音乐 🚀UWP 良心的音乐软件，虽然最近以来因为版权饱受诟病，但还是能用的 私人 FM 的推荐还可以 满级遥遥无期
Spotify 辣鸡网易云曲库
灵音播放器 与网易云搭配使用 不多解释，非常好用，能用来下载些歌曲 字体渲染有问题= =，桌面歌词看着好糊
哔哩哔哩动画 UWP 🚀UWP 逍遥橙子版的，偶尔看看动漫还有视频，比官方版体验好得多 与网页版各有千秋吧（</description></item></channel></rss>