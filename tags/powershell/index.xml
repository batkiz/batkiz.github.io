<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>powershell on My New Hugo Site</title><link>https://example.org/tags/powershell/</link><description>Recent content in powershell on My New Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 31 Aug 2020 12:57:22 +0800</lastBuildDate><atom:link href="https://example.org/tags/powershell/index.xml" rel="self" type="application/rss+xml"/><item><title>一些 powershell 脚本 | 其二</title><link>https://example.org/posts/some-pwsh-scripts-2/</link><pubDate>Mon, 31 Aug 2020 12:57:22 +0800</pubDate><guid>https://example.org/posts/some-pwsh-scripts-2/</guid><description>承接前文，这里是另一些可能有点用的 pwsh 脚本。
命令行代理 让命令行应用走代理，用法是 socks app command。也可以把 Set-CliProxy 与 Clear-CliProxy 单独拿出来用。
function socks { $Command = &amp;#34;$args&amp;#34; Set-CliProxy Invoke-Expression $Command 2&amp;gt;&amp;amp;1 | out-default Clear-CliProxy } function Set-CliProxy { $proxy = &amp;#39;http://127.0.0.1:43333&amp;#39; $env:HTTP_PROXY = $proxy $env:HTTPS_PROXY = $proxy } function Clear-CliProxy { Remove-Item env:HTTP_PROXY Remove-Item env:HTTPS_PROXY } time 为命令行应用计时，大概类似于 *nix 中的 time。用法是 time app command。
仅仅计时的话可以用 Measure-Command 命令，但它没有输出，只有时间信息，所以写了个 function 封装一下。
function time { $Command = &amp;#34;$args&amp;#34; $time = Measure-Command { Invoke-Expression $Command 2&amp;gt;&amp;amp;1 | out-default } $info = &amp;#34;{0:d2}:{1:d2}:{2:d2}.</description></item><item><title>powershell, headers 与乱码</title><link>https://example.org/posts/pwsh-headers-and-messy-code/</link><pubDate>Sat, 27 Jun 2020 20:58:36 +0800</pubDate><guid>https://example.org/posts/pwsh-headers-and-messy-code/</guid><description>问题起源 在几天之前，我的命令行翻译程序挂掉了，不过由于平时用的也少，所以就没太管，昨天才想起来再找个 API 用。
正如前文所述，我极少用到这个，所以我就懒得去申请腾讯、彩云或是 bing 的 API，毕竟太麻烦了。因此我决定找一个直接提供公用接口的 API，次数限制啥的只要不是太离谱就行。功夫不负有心人，在 Google 上翻了两页之后，我找到了由 厦门大学自然语言处理实验室 提供的 云译 CloudTranslation 的公开 API。
解决过程 就当我读完短短的 API Doc 后准备开始写段小脚本时，悲剧发生了：它竟然乱码了！
然后我也很不能相信，于是又回去读了读文档，看到其中清楚地写着：
返回格式： UTF-8 编码纯文本
WHAT THE F@XK? 我的 Windows 系统一直都是默认 unicode 的，而当前 pwsh 的活动代码页也是 65001。换言之，这个接口的返回值乱码绝对不是本地是 gbk/gb2312 这种低级错误。那问题出在哪呢？
为了确定它返回的编码确实是 utf-8，我看了看它的 headers，以防出现他本身发送的是 gbk/gb2312 这种乌龙。
通过 乱码恢复 确定了乱码文字现在的编码是 iso-8859-1，其本身确实是 utf-8 的。
打眼一看确实没啥问题，但我注意到了其中并没有指定 charset/encoding 信息。
以防万一，我又在 wsl 中用 curl 对比执行了一下：
此时我已经基本确定，乱码是因为 headers 中缺了东西导致的，但为什么会导致这种问题呢？我想让他不乱码难道就只能通过 wsl 来调用 API 了么？
然后通过我西安市 top3 的信息检索能力的 Google 技术，找到了这个 StackOverflow 回答：</description></item><item><title>一些 powershell 脚本</title><link>https://example.org/posts/some-pwsh-scripts/</link><pubDate>Wed, 13 May 2020 21:34:09 +0800</pubDate><guid>https://example.org/posts/some-pwsh-scripts/</guid><description>近期写的、收集的一些 pwsh 脚本，我完整的 pwsh 配置可看 batkiz/dotfiles。
由于主要是为了满足个人使用，所以没怎么做错误处理之类的。
在 pwsh 中使用 wsl 中的 nvim dos2nix 是将 windows 风格的路径转换为 wsl 中的路径。
function dos2nix { param($dosPath) $path = $dosPath.Replace(&amp;#39;\&amp;#39;, &amp;#39;/&amp;#39;) if ($path -match &amp;#39;[a-zA-Z]:.*&amp;#39;) { $drive = $path.split(&amp;#39;:&amp;#39;)[0].ToLower() $filePath = $path.split(&amp;#39;:&amp;#39;)[1] $nixPath = &amp;#39;/mnt/&amp;#39; + $drive + $filePath } else { $nixPath = $path } $nixPath } function vim { param ( $Path = &amp;#39;.&amp;#39; ) if ($Path -eq &amp;#39;.&amp;#39;) { $Path = &amp;#39;.</description></item><item><title>oh my powershell</title><link>https://example.org/posts/oh-my-powershell/</link><pubDate>Tue, 24 Sep 2019 22:43:46 +0000</pubDate><guid>https://example.org/posts/oh-my-powershell/</guid><description>对 *nix 平台上的 oh-my-zsh 的绝赞复刻！
备受好评的 shell 配置，来到了 powershell 之上~
requirements set-executionpolicy remotesigned 执行策略更改，以执行脚本、安装应用 scoop installation Install-Module posh-git -Scope CurrentUser Install-Module oh-my-posh -Scope CurrentUser scoop install scoop-completion 亦可均由 scoop 安装，即
scoop install scoop-completion scoop install oh-my-posh scoop install posh-git 配置 配置文件为 ~\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1，若不存在请自行创建。
写入下列内容并保存：
Import-Module posh-git Import-Module oh-my-posh Set-Theme PowerLine more things 我的 profile 文件与自己写的主题 dotfiles/powershell 最好用 Windows Terminal 作为终端</description></item></channel></rss>