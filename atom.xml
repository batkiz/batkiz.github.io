<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-hans"><generator uri="https://gohugo.io/" version="0.82.1">Hugo</generator><title type="html">not b@tk1z</title><subtitle type="html">一帘新语随风去，半山明月踏江来。</subtitle><link href="https://blog.batkiz.com/atom.xml" rel="self" type="application/rss+xml" title="atom"/><link href="https://blog.batkiz.com/" rel="alternate" type="text/html" title="HTML"/><updated>2021-04-20T14:32:44+00:00</updated><author><name>batkiz</name></author><id>https://blog.batkiz.com/atom.xml</id><entry><title type="html">翻译|REST API 设计最佳实践</title><link href="https://blog.batkiz.com/posts/2021/best-practices-for-rest-api-design/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2020/how-seo-ruined-the-internet/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | SEO 是如何毁掉互联网的"/><link href="https://blog.batkiz.com/posts/2019/advice-to-new-programmers/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | 给新手程序员们的建议"/><link href="https://blog.batkiz.com/posts/2018/translation-the-rise-and-demise-of-rss/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | RSS 的兴起与衰落"/><link href="https://blog.batkiz.com/links/?utm_source=atom_feed" rel="related" type="text/html" title="Links"/><link href="https://blog.batkiz.com/privacy/?utm_source=atom_feed" rel="related" type="text/html" title="隐私政策"/><id>https://blog.batkiz.com/posts/2021/best-practices-for-rest-api-design/</id><published>2021-03-18T18:51:25+08:00</published><updated>2021-03-18T18:51:25+08:00</updated><content type="html"><![CDATA[<blockquote>在这篇文章中，我们将探讨如何设计 REST API，使其对任何使用它们的人来说都是容易理解的，是面向未来的，并且是安全和快速的，因为它们为可能是机密的客户提供数据。</blockquote><p>原文链接：<a href="https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/">Best practices for REST API design</a></p>
<p>译者按：关于 REST API 的介绍与最佳实践，亦可参见微软 <a href="https://docs.microsoft.com/zh-cn/azure/architecture/best-practices/api-design">Web API 设计</a>。</p>
<p>声明：本文的完成亦有 <a href="https://www.deepl.com/">DeepL</a> 的帮助。</p>
<hr>
<p>REST API 是现今最常见的网络服务之一。它允许包括浏览器在内的多种客户端通过 REST API 与服务器进行通信。</p>
<p>因此，正确地设计 REST API 非常重要，这样我们就不会在后续的道路上出现问题。我们必须考虑到 API 用户的账号安全性、性能和易用性。</p>
<p>否则，我们就会给使用我们 API 的客户们带来问题，这并不令人愉快，也会影响人们使用我们的 API。如果我们不遵循普遍接受的惯例，那么我们就会给 API 的维护者和使用它们的客户带来困扰，因为它与大家所期望的不同。</p>
<p>在这篇文章中，我们将探讨如何设计 REST API，使其对任何使用它们的人来说都是容易理解的，是不会过时的，并且是安全和快速的，因为它们向客户提供的数据可能是保密的。</p>
<p>由于网络应用可能会被多种问题破坏，我们应该确保任何 REST API 都应使用标准的 HTTP 状态码，以优雅地处理错误，帮助用户处理问题。</p>
<h2 id="用-json-接收与响应">
    用 JSON 接收与响应 
    <a href="#%e7%94%a8-json-%e6%8e%a5%e6%94%b6%e4%b8%8e%e5%93%8d%e5%ba%94" class="anchor-link">#</a>
</h2><p>REST API 应该接收 JSON 作为请求的有效载荷（payload），同时也应以 JSON 发送响应。JSON 是传输数据的标准。几乎所有的网络技术都可以使用它：JavaScript 有内置的方法，可以通过 Fetch API 或其他 HTTP 客户端对 JSON 进行编码和解码。服务器端的技术也有一些库可以解码 JSON，不需要做太多工作。</p>
<p>当然，还有其他传输数据的方式。XML 并没有得到框架的广泛支持，其常用替代通常是 JSON。我们在客户端——尤其是在浏览器中——不能特别容易地操作这些数据。光是做正常的数据传输就会有很多额外的工作。</p>
<p>表单数据（form data）很适合用于发送数据，特别是当我们要发送文件时。但是对于文本和数字，我们不需要表单数据来传输这些，因为——对大多数框架来说——我们只需要在客户端直接从中获取数据就可以传输 JSON。这是到目前为止最直接的做法。</p>
<p>为了确保当我们的 REST API 应用以 JSON 响应时，客户端会将其解释为 JSON，我们应该在请求发出后，将响应头（header）中的 <code>Content-Type</code> 设置为 <code>application/json</code>。很多服务器端应用框架都会自动设置响应头。一些 HTTP 客户端会根据 <code>Content-Type</code> 响应头来解析数据。</p>
<p>唯一的例外是，如果我们试图在客户端和服务器之间发送和接收文件。那么我们就需要处理文件响应，从客户端向服务器发送表单数据。但这就是另外一个话题了。</p>
<p>我们还应该确保我们的端点（endpoint）能够返回 JSON 作为响应。许多服务器端框架都将此作为一个内置功能。</p>
<p>让我们来看看一个接受 JSON payload 的 API 示例。这个例子将使用 Node.js 的 <a href="https://expressjs.com/">Express</a> 后端框架。我们可以使用 <a href="https://www.npmjs.com/package/body-parser"><code>body-parser</code> 中间件</a> 来解析 JSON 请求体，然后我们可以调用 <code>res.json</code> 方法，将我们想要返回的对象构造为 JSON 响应，如下所示。</p>
<pre><code class="language-js">const express = require(&quot;express&quot;);
const bodyParser = require(&quot;body-parser&quot;);

const app = express();

app.use(bodyParser.json());

app.post(&quot;/&quot;, (req, res) =&gt; {
  res.json(req.body);
});

app.listen(3000, () =&gt; console.log(&quot;server started&quot;));
</code></pre>
<p><code>bodyParser.json()</code> 将 JSON 请求体字符串解析为 JavaScript 对象，然后将其分配给 <code>req.body</code> 对象。</p>
<p>将响应中的 <code>Content-Type</code> 头设置为 <code>application/json; charset=utf-8</code>，不要做任何修改。这个方法适用于大多数其他后端框架。</p>
<h2 id="在端点路径中使用名词而非动词">
    在端点路径中使用名词而非动词 
    <a href="#%e5%9c%a8%e7%ab%af%e7%82%b9%e8%b7%af%e5%be%84%e4%b8%ad%e4%bd%bf%e7%94%a8%e5%90%8d%e8%af%8d%e8%80%8c%e9%9d%9e%e5%8a%a8%e8%af%8d" class="anchor-link">#</a>
</h2><p>我们不应该在端点路径中使用动词。相反，我们应该使用名词作为路径名，该名词应代表我们要检索或操作的端点的实体。</p>
<p>这是因为我们的 HTTP 请求方法已经在用动词了。在我们的 API 端点路径中使用动词并没有益处，而且会使它变得不必要的长，因为它没有传达任何新的信息。选择的动词可以根据开发者的想法而变化。比如说，有些人喜欢用 &ldquo;get&rdquo;，有些人喜欢用 &ldquo;retrieve&rdquo;，所以让 HTTP GET 动词告诉我们什么和端点做什么就好了。</p>
<p>动作应该由我们所做的 HTTP 请求方法来表示。最常见的方法包括 GET、POST、PUT 和 DELETE。</p>
<p>GET 检索资源。POST 向服务器提交新数据。PUT 更新现有数据。DELETE 删除数据。这些动词映射到 <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> 操作。</p>
<p>考虑到我们上面讨论的两个原则，我们应该创建像 GET <code>/articles/</code> 这样的路由来获取新闻文章。同样，POST <code>/articles/</code> 用于添加新的文章，PUT <code>/articles/:id</code> 用于用给定的 id 更新文章。DELETE <code>/articles/:id</code> 用于删除给定 ID 的现有文章。</p>
<p><code>/articles</code> 代表一个 REST API 资源。例如，我们可以使用 Express 添加以下端点来操作文章，如下所示。</p>
<pre><code class="language-js">const express = require(&quot;express&quot;);
const bodyParser = require(&quot;body-parser&quot;);

const app = express();

app.use(bodyParser.json());

app.get(&quot;/articles&quot;, (req, res) =&gt; {
  const articles = [];
  // 获取文章的代码
  res.json(articles);
});

app.post(&quot;/articles&quot;, (req, res) =&gt; {
  // 添加新文章的代码
  res.json(req.body);
});

app.put(&quot;/articles/:id&quot;, (req, res) =&gt; {
  const { id } = req.params;
  // 更新文章的代码
  res.json(req.body);
});

app.delete(&quot;/articles/:id&quot;, (req, res) =&gt; {
  const { id } = req.params;
  // 删除文章的代码
  res.json({ deleted: id });
});

app.listen(3000, () =&gt; console.log(&quot;server started&quot;));
</code></pre>
<p>在上面的代码中，我们定义了操作文章的端点。我们可以看到，路径名中没有任何动词。所有的都是名词。动词在 HTTP 动词中。</p>
<p>POST、PUT 和 DELETE 端点都以 JSON 作为请求体，也都以 JSON 作为响应返回，包括 GET 端点。</p>
<h2 id="使用名词复数来命名集合">
    使用名词复数来命名集合 
    <a href="#%e4%bd%bf%e7%94%a8%e5%90%8d%e8%af%8d%e5%a4%8d%e6%95%b0%e6%9d%a5%e5%91%bd%e5%90%8d%e9%9b%86%e5%90%88" class="anchor-link">#</a>
</h2><p>我们应该用名词复数来命名集合。我们通常不会只想得到一个单项，所以我们的命名应该是一致的，我们应该用名词复数。</p>
<p>我们使用名词复数是为了和我们数据库中的内容保持一致。表通常有多个条目，并且在命名时会反映这一点，所以为了与它们保持一致，我们应该使用与 API 访问的表相同的语言。</p>
<p>对于 <code>/articles</code> 端点，我们的所有端点都是复数形式，所以我们不必将其改为复数。（译者注：此处似乎指的是上面代码之中的端点）</p>
<h2 id="分层对象的资源嵌套">
    分层对象的资源嵌套 
    <a href="#%e5%88%86%e5%b1%82%e5%af%b9%e8%b1%a1%e7%9a%84%e8%b5%84%e6%ba%90%e5%b5%8c%e5%a5%97" class="anchor-link">#</a>
</h2><p>在处理嵌套资源的端点的路径时，应把嵌套资源追加为父资源后面的路径上。</p>
<p>我们必须确保我们考虑的嵌套资源与我们数据库表中的资源相匹配。否则会非常混乱。</p>
<p>比如说，如果我们想要一个端点来获取一篇新闻文章的评论，我们应该将 <code>/comments</code> 追加到 <code>/articles</code> 路径的末尾。这假设了我们在数据库中把评论（<code>comments</code>）作为文章（<code>articles</code>）的一个子节点。</p>
<p>例如，我们可以在 Express 中使用以下代码来实现。</p>
<pre><code class="language-js">const express = require(&quot;express&quot;);
const bodyParser = require(&quot;body-parser&quot;);

const app = express();

app.use(bodyParser.json());

app.get(&quot;/articles/:articleId/comments&quot;, (req, res) =&gt; {
  const { articleId } = req.params;
  const comments = [];
  // 通过 articleId 获取评论的代码
  res.json(comments);
});

app.listen(3000, () =&gt; console.log(&quot;server started&quot;));
</code></pre>
<p>在上面的代码中，我们可以在路径 <code>'/articles/:articleId/comments'</code> 上使用 GET 方法。我们获取由 <code>articleId</code> 标识的文章的评论，然后在响应中返回。我们在 <code>'/articles/:articleId'</code> 路径后添加 <code>'comments'</code>，以表明它是 <code>/articles</code> 的子资源。</p>
<p>这是有意义的，因为评论（<code>comments</code>）是文章的子对象，假设每篇文章都有自己的评论。否则，就会让用户感到困惑，因为这个结构一般被认为是用来访问子对象的。同样的原理也适用于 POST、PUT 和 DELETE 端点。它们的路径名都可以使用同一种嵌套结构。</p>
<h2 id="优雅地处理错误并返回标准的错误代码">
    优雅地处理错误并返回标准的错误代码 
    <a href="#%e4%bc%98%e9%9b%85%e5%9c%b0%e5%a4%84%e7%90%86%e9%94%99%e8%af%af%e5%b9%b6%e8%bf%94%e5%9b%9e%e6%a0%87%e5%87%86%e7%9a%84%e9%94%99%e8%af%af%e4%bb%a3%e7%a0%81" class="anchor-link">#</a>
</h2><p>为了消除 API 用户在发生错误时的困惑，我们应该优雅地处理错误，并返回 HTTP 响应代码，说明发生了什么样的错误。这样可以让 API 的维护者有足够的信息来了解发生的问题。我们不希望错误使我们的系统崩溃，所以我们可以不处理它们，这意味着 API 消费者必须处理它们。</p>
<p>常见的错误 HTTP 状态码包括：</p>
<ul>
<li>400 Bad Request - 这意味着客户端的输入没有通过验证。</li>
<li>401 Unauthorized - 这意味着用户没有被授权访问资源。它通常在用户未认证时返回。</li>
<li>403 Forbidden - 这表示用户已通过认证，但不允许访问资源。</li>
<li>404 Not Found - 这表示找不到资源。</li>
<li>500 Internal server error - 这是一个通用的服务器错误。它可能不应该被明确地抛出。</li>
<li>502 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502">Bad Gateway</a> - 这表示上游服务器发来了无效响应。</li>
<li>503 Service Unavailable - 这表示在服务器端发生了一些意想不到的事情（可能是任何事情，比如服务器过载，系统的某些部分失效，等等）。</li>
</ul>
<p>我们抛出的错误应该与我们的应用所遇到的问题相对应。例如，如果我们想拒绝请求 payload 中的数据，那么我们应该在 Express API 中返回一个 400 响应，如下所示：</p>
<pre><code class="language-js">const express = require(&quot;express&quot;);
const bodyParser = require(&quot;body-parser&quot;);

const app = express();

// 用户已存在
const users = [{ email: &quot;abc@foo.com&quot; }];

app.use(bodyParser.json());

app.post(&quot;/users&quot;, (req, res) =&gt; {
  const { email } = req.body;
  const userExists = users.find((u) =&gt; u.email === email);
  if (userExists) {
    return res.status(400).json({ error: &quot;User already exists&quot; });
  }
  res.json(req.body);
});

app.listen(3000, () =&gt; console.log(&quot;server started&quot;));
</code></pre>
<p>在上面的代码中，我们在 <code>user</code> 数组中有一个现有用户列表，包含了给定的电子邮件。</p>
<p>那么如果我们尝试用已经存在于 <code>users</code> 中的 <code>email</code> 值来提交 payload，我们会得到一个 400 响应状态码，并附上 <code>'User already exists'</code> 的信息，让用户知道该用户已经存在。有了这些信息，用户可以将邮件改成数据库中尚不存在的邮件来纠正操作。</p>
<p>错误代码需要有信息伴随，这样维护者就有足够的信息来解决问题，但攻击者不能利用错误内容来进行我们的攻击，比如窃取信息或使系统瘫痪。</p>
<p>每当我们的 API 没有成功完成时，我们应该优雅地失败，发送一个带有信息的错误，以帮助用户做出纠正措施。</p>
<h2 id="支持过滤排序和分页">
    支持过滤、排序和分页 
    <a href="#%e6%94%af%e6%8c%81%e8%bf%87%e6%bb%a4%e6%8e%92%e5%ba%8f%e5%92%8c%e5%88%86%e9%a1%b5" class="anchor-link">#</a>
</h2><p>REST API 背后的数据库可能变得非常庞大。有时候，数据太多，不应该一次全部返回，因为太慢了，或者会让我们的系统崩溃。因此，我们需要有办法来过滤项目。</p>
<p>我们还需要对数据进行分页的方法，这样我们就能一次只返回几个结果。我们不希望因为一个请求，而占用资源太长时间。</p>
<p>过滤和分页都可以通过减少服务器资源的使用来提高性能。随着数据库中积累的数据越多，这些功能就越发重要。</p>
<p>这里有一个小例子，API 可以接受一个带有各种查询参数的查询字符串，让我们通过字段过滤出项目：</p>
<pre><code class="language-js">const express = require(&quot;express&quot;);
const bodyParser = require(&quot;body-parser&quot;);

const app = express();

// 数据库中的 employees 数据
const employees = [
  { firstName: &quot;Jane&quot;, lastName: &quot;Smith&quot;, age: 20 },
  //...
  { firstName: &quot;John&quot;, lastName: &quot;Smith&quot;, age: 30 },
  { firstName: &quot;Mary&quot;, lastName: &quot;Green&quot;, age: 50 },
];

app.use(bodyParser.json());

app.get(&quot;/employees&quot;, (req, res) =&gt; {
  const { firstName, lastName, age } = req.query;
  let results = [...employees];
  if (firstName) {
    results = results.filter((r) =&gt; r.firstName === firstName);
  }

  if (lastName) {
    results = results.filter((r) =&gt; r.lastName === lastName);
  }

  if (age) {
    results = results.filter((r) =&gt; +r.age === +age);
  }
  res.json(results);
});

app.listen(3000, () =&gt; console.log(&quot;server started&quot;));
</code></pre>
<p>在上面的代码中，我们通过 <code>req.query</code> 变量来获取查询参数。然后，我们通过使用 JavaScript 解构语法将各个查询参数解构为变量，以提取属性值。最后，我们用每个查询参数值运行 <code>filter</code> 来定位我们想要返回的项目。</p>
<p>一旦我们完成了这些工作，我们就将 <code>results</code> 作为响应返回。因此，当我们用查询字符串向以下路径发出 GET 请求时</p>
<pre><code>/employees?lastName=Smith&amp;age=30
</code></pre>
<p>我们得到</p>
<pre><code class="language-json">[
  {
    &quot;firstName&quot;: &quot;John&quot;,
    &quot;lastName&quot;: &quot;Smith&quot;,
    &quot;age&quot;: 30
  }
]
</code></pre>
<p>作为返回的响应，因为我们是按 <code>lastName</code> 和 <code>age</code> 过滤的。</p>
<p>同样，我们也可以接受 <code>page</code> 查询参数，并返回一组从 <code>(page - 1) * 20</code> 到 <code>page * 20</code> 位置的条目。</p>
<p>我们还可以在查询字符串中指定要排序的字段。例如，我们可以从查询字符串中获取参数，其中包含我们要对数据进行排序的字段。然后，我们可以按照这些单独的字段进行排序。</p>
<p>例如，我们可能想从一个 URL 中提取查询字符串，比如。</p>
<pre><code>http://example.com/articles?sort=+author,-datepublished
</code></pre>
<p>其中 <code>+</code> 表示升序，<code>-</code> 表示降序。因此，我们按照作者姓名的字母顺序和 <code>datepublished</code> 从最新的到最旧的排序。</p>
<h2 id="保持良好的安全实践">
    保持良好的安全实践 
    <a href="#%e4%bf%9d%e6%8c%81%e8%89%af%e5%a5%bd%e7%9a%84%e5%ae%89%e5%85%a8%e5%ae%9e%e8%b7%b5" class="anchor-link">#</a>
</h2><p>客户端和服务器之间的大部分通信应该是私密的，因为我们经常发送和接收私人信息。因此，使用 SSL/TLS 来保证安全是必须的。</p>
<p>SSL 证书加载到服务器上并不难，而且其是免费或花费很少的。我们应使我们的 REST API 通过安全通道，而不是在公开地通信。</p>
<p>人们不应该能够访问到他们所请求的信息之外的信息。例如，一个普通用户不应该能够访问另一个用户的信息。他们也不应该能够访问管理员的数据。</p>
<p>为了执行最小权限原则，我们需要添加角色检查，或者针对单一角色，或者为每个用户设置更细的角色。</p>
<p>如果我们选择把用户分成几个角色群，那么这些角色的权限应该覆盖他们所需要的所有权限，而不是更多。如果我们对每个用户可以访问的功能有更细化的权限，那么我们要确保管理员可以相应地添加和删除每个用户的这些功能。另外，我们还需要添加一些预设的角色，可以应用于一组用户，这样我们就不必对每个用户都手动操作了。</p>
<h2 id="缓存数据以提高性能">
    缓存数据以提高性能 
    <a href="#%e7%bc%93%e5%ad%98%e6%95%b0%e6%8d%ae%e4%bb%a5%e6%8f%90%e9%ab%98%e6%80%a7%e8%83%bd" class="anchor-link">#</a>
</h2><p>我们可以添加缓存，从本地内存缓存中返回数据，而不是每次要检索用户请求的一些数据时，都要查询数据库。缓存的好处是，用户可以更快的获得数据。但是，用户得到的数据可能是过时的。这也可能导致在生产环境中调试时出现问题，因为我们一直看到旧的数据。</p>
<p>缓存解决方案有很多种，比如 <a href="https://redis.io/">Redis</a>、内存缓存等等。我们可以随着需求的变化，改变数据的缓存方式。</p>
<p>例如，Express 有 <a href="https://www.npmjs.com/package/apicache">apicache</a> 中间件，不需要太多的配置就可以为我们的应用添加缓存功能。我们可以像这样在服务器中添加一个简单的内存缓存。</p>
<pre><code class="language-js">const express = require(&quot;express&quot;);
const bodyParser = require(&quot;body-parser&quot;);
const apicache = require(&quot;apicache&quot;);
const app = express();
let cache = apicache.middleware;
app.use(cache(&quot;5 minutes&quot;));

// 数据库中的 employees 数据
const employees = [
  { firstName: &quot;Jane&quot;, lastName: &quot;Smith&quot;, age: 20 },
  //...
  { firstName: &quot;John&quot;, lastName: &quot;Smith&quot;, age: 30 },
  { firstName: &quot;Mary&quot;, lastName: &quot;Green&quot;, age: 50 },
];

app.use(bodyParser.json());

app.get(&quot;/employees&quot;, (req, res) =&gt; {
  res.json(employees);
});

app.listen(3000, () =&gt; console.log(&quot;server started&quot;));
</code></pre>
<p>上面的代码只是用 <code>apicache.middleware</code> 来引用 <code>apicache</code> 中间件，然后我们用:</p>
<pre><code class="language-js">app.use(cache(&quot;5 minutes&quot;));
</code></pre>
<p>来将缓存应用于整个应用。比如说，我们将结果缓存 5 分钟。我们可以根据自己的需要调整。</p>
<h2 id="版本化我们的-api">
    版本化我们的 API 
    <a href="#%e7%89%88%e6%9c%ac%e5%8c%96%e6%88%91%e4%bb%ac%e7%9a%84-api" class="anchor-link">#</a>
</h2><p>如果我们要对 API 进行任何可能破坏客户端的修改，我们便应有不同的版本。版本划分可以像现在大多数应用一样，根据语义版本进行（例如，2.0.6 表示主要版本 2 和第 6 个补丁）。</p>
<p>这样一来，我们可以逐步淘汰旧的端点，而不是强迫大家同时转移到新的 API 上。v1 端点可以为那些不想改变的人保持活跃，而 v2 则可以凭借其闪亮的新功能为那些准备升级的人服务。如果我们的 API 是公开的，这一点尤其重要。我们应该对它们进行版本调整，这样就不会破坏使用我们 API 的第三方应用。</p>
<p>版本化通常是在 API 路径的开头加上 <code>/v1/</code>、<code>/v2/</code> 等。</p>
<p>例如，我们可以对 Express 进行如下操作。</p>
<pre><code class="language-js">const express = require(&quot;express&quot;);
const bodyParser = require(&quot;body-parser&quot;);
const app = express();
app.use(bodyParser.json());

app.get(&quot;/v1/employees&quot;, (req, res) =&gt; {
  const employees = [];
  // 获取 employees 的代码
  res.json(employees);
});

app.get(&quot;/v2/employees&quot;, (req, res) =&gt; {
  const employees = [];
  // 另一些获取 employees 的代码
  res.json(employees);
});

app.listen(3000, () =&gt; console.log(&quot;server started&quot;));
</code></pre>
<p>我们只需将版本号添加到端点 URL 路径的开头，就可以对它们进行版本控制。</p>
<h2 id="结束语">
    结束语 
    <a href="#%e7%bb%93%e6%9d%9f%e8%af%ad" class="anchor-link">#</a>
</h2><p>设计高质量的 REST API 最重要的思考是，通过遵循 Web 标准和约定来获取一致性。JSON、SSL/TLS 和 HTTP 状态码都是现代网络的标准构件。</p>
<p>性能也是一个重要的考虑因素。我们可以通过不一次性返回太多数据来提高它的性能。此外，我们还可以使用缓存，这样我们就不必一直查询数据。</p>
<p>端点的路径应该是一致的，我们只使用名词，因为 HTTP 方法表示我们要采取的行动。嵌套资源的路径应该在父资源的路径之后。它们应该告诉我们，我们正在获取或操作什么，而非我们需要阅读额外的文档来理解它在做什么。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/%E7%BF%BB%E8%AF%91" term="%E7%BF%BB%E8%AF%91" label="翻译"/><category scheme="https://blog.batkiz.com/tags/stackoverflow" term="stackoverflow" label="stackoverflow"/></entry><entry><title type="html">博客主题新功能：repl 代码集成</title><link href="https://blog.batkiz.com/posts/2020/theme-new-feat-repl-embed/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2020/some-pwsh-scripts-2/?utm_source=atom_feed" rel="related" type="text/html" title="一些 powershell 脚本 | 其二"/><link href="https://blog.batkiz.com/posts/2020/301-redirect-with-cloudflare/?utm_source=atom_feed" rel="related" type="text/html" title="无服务器实现 301 跳转（with Cloudflare）"/><link href="https://blog.batkiz.com/posts/2020/pwsh-headers-and-messy-code/?utm_source=atom_feed" rel="related" type="text/html" title="powershell, headers 与乱码"/><link href="https://blog.batkiz.com/posts/2020/talk-about-scoop/?utm_source=atom_feed" rel="related" type="text/html" title="在 winget 到来之际，再谈谈 scoop"/><link href="https://blog.batkiz.com/posts/2020/some-pwsh-scripts/?utm_source=atom_feed" rel="related" type="text/html" title="一些 powershell 脚本"/><id>https://blog.batkiz.com/posts/2020/theme-new-feat-repl-embed/</id><published>2020-09-06T13:30:29+08:00</published><updated>2020-09-06T13:30:29+08:00</updated><content type="html"><![CDATA[<p>由于 hugo 自 v0.60 之后默认忽略 raw html，所以为了便捷地使用 repl 的 embed code share 功能，我就写了个 shortcode。</p>
<h2 id="效果测试">
    效果测试 
    <a href="#%e6%95%88%e6%9e%9c%e6%b5%8b%e8%af%95" class="anchor-link">#</a>
</h2><div class="embed repl">
    <iframe class="repl" height="400px" width="100%" src="https://repl.it/@batkiz/hello-repl?lite=true"
        scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true"
        sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals">
    </iframe>
</div>
<h2 id="使用方法">
    使用方法 
    <a href="#%e4%bd%bf%e7%94%a8%e6%96%b9%e6%b3%95" class="anchor-link">#</a>
</h2><pre><code class="language-plain">{{&lt; repl &quot;batkiz/hello-repl&quot; &gt;}}

/*
batkiz -&gt; username(不带 `@`)
hello-repl -&gt; repl name
*/
</code></pre>
<p>具体的代码则可以去我主题的代码仓库瞅一眼（毕竟非常简单）</p>
]]></content></entry><entry><title type="html">一些 powershell 脚本 | 其二</title><link href="https://blog.batkiz.com/posts/2020/some-pwsh-scripts-2/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2020/pwsh-headers-and-messy-code/?utm_source=atom_feed" rel="related" type="text/html" title="powershell, headers 与乱码"/><link href="https://blog.batkiz.com/posts/2020/some-pwsh-scripts/?utm_source=atom_feed" rel="related" type="text/html" title="一些 powershell 脚本"/><link href="https://blog.batkiz.com/posts/2019/oh-my-powershell/?utm_source=atom_feed" rel="related" type="text/html" title="oh my powershell"/><link href="https://blog.batkiz.com/posts/2020/301-redirect-with-cloudflare/?utm_source=atom_feed" rel="related" type="text/html" title="无服务器实现 301 跳转（with Cloudflare）"/><link href="https://blog.batkiz.com/posts/2020/talk-about-scoop/?utm_source=atom_feed" rel="related" type="text/html" title="在 winget 到来之际，再谈谈 scoop"/><id>https://blog.batkiz.com/posts/2020/some-pwsh-scripts-2/</id><published>2020-08-31T12:57:22+08:00</published><updated>2020-08-31T12:57:22+08:00</updated><content type="html"><![CDATA[<p>承接<a href="/posts/2020/some-pwsh-scripts/">前文</a>，这里是另一些可能有点用的 pwsh 脚本。</p>
<h2 id="命令行代理">
    命令行代理 
    <a href="#%e5%91%bd%e4%bb%a4%e8%a1%8c%e4%bb%a3%e7%90%86" class="anchor-link">#</a>
</h2><p>让命令行应用走代理，用法是 <code>socks app command</code>。也可以把 <code>Set-CliProxy</code> 与 <code>Clear-CliProxy</code> 单独拿出来用。</p>
<pre><code class="language-powershell">function socks {
    $Command = &quot;$args&quot;

    Set-CliProxy
    Invoke-Expression $Command 2&gt;&amp;1 | out-default
    Clear-CliProxy
}

function Set-CliProxy {
    $proxy = 'http://127.0.0.1:43333'

    $env:HTTP_PROXY = $proxy
    $env:HTTPS_PROXY = $proxy
}

function Clear-CliProxy {
    Remove-Item env:HTTP_PROXY
    Remove-Item env:HTTPS_PROXY
}
</code></pre>
<h2 id="time">
    time 
    <a href="#time" class="anchor-link">#</a>
</h2><p>为命令行应用计时，大概类似于 <em>*nix</em> 中的 <code>time</code>。用法是 <code>time app command</code>。</p>
<p>仅仅计时的话可以用 <code>Measure-Command</code> 命令，但它没有输出，只有时间信息，所以写了个 function 封装一下。</p>
<pre><code class="language-powershell">function time {
    $Command = &quot;$args&quot;

    $time = Measure-Command { Invoke-Expression $Command 2&gt;&amp;1 | out-default }

    $info = &quot;{0:d2}:{1:d2}:{2:d2}.{3}&quot; -f $time.Hours, $time.Minutes, $time.Seconds, $time.Milliseconds

    Write-Output $info
}
</code></pre>
<h2 id="get-size">
    Get-Size 
    <a href="#get-size" class="anchor-link">#</a>
</h2><p>命令行里查看文件夹、文件的大小，按 M 显示。用法是 <code>Get-Size folder/file</code>。</p>
<pre><code class="language-powershell">function Get-Size {
    param([string]$pth)
    &quot;{0:n2}&quot; -f ((Get-ChildItem -path $pth -recurse | measure-object -property length -sum).sum / 1mb) + &quot; M&quot;
}
</code></pre>
<h2 id="翻译">
    翻译 
    <a href="#%e7%bf%bb%e8%af%91" class="anchor-link">#</a>
</h2><p>命令行里的翻译程序，其实之前是想用 go 写一个的，但不如直接写个 pwsh 脚本简便。由于 api key 是扒的别人的，所以就在源码里删去了。</p>
<pre><code class="language-powershell">function fy {
    if ($args.Length -eq 0 ) {
        Write-Output 'this is a cli translator, try `fy hello world`.'
    }
    else {
        $query = &quot;&quot;
        for ($i = 0; $i -lt $args.Count; $i++) {
            $query += &quot; &quot;
            $query += $args[$i]
        }

        $ApiUrl = &quot;redacted&quot;

        $info = (Invoke-WebRequest $ApiUrl).Content | ConvertFrom-Json

        Write-Host &quot;@&quot; $query  &quot;[&quot; $info.basic.phonetic &quot;]&quot;
        Write-Host &quot;翻译：`t&quot; $info.translation
        Write-Host &quot;词典：&quot;
        for ($i = 0; $i -lt $info.basic.explains.Count; $i++) {
            Write-Host &quot;`t&quot; $info.basic.explains[$i]
        }
        Write-Host &quot;网络：&quot;
        for ($i = 0; $i -lt $info.web.Count; $i++) {
            Write-Host &quot;`t&quot; $info.web[$i].key &quot;: &quot; -NoNewline
            for ($j = 0; $j -lt $info.web[$i].value.Count; $j++) {
                Write-Host $info.web[$i].value[$j] &quot;; &quot; -NoNewline
            }
            Write-Host &quot;&quot;
        }
    }
}
</code></pre>
]]></content><category scheme="https://blog.batkiz.com/tags/powershell" term="powershell" label="powershell"/></entry><entry><title type="html">无服务器实现 301 跳转（with Cloudflare）</title><link href="https://blog.batkiz.com/posts/2020/301-redirect-with-cloudflare/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2020/pwsh-headers-and-messy-code/?utm_source=atom_feed" rel="related" type="text/html" title="powershell, headers 与乱码"/><link href="https://blog.batkiz.com/posts/2020/talk-about-scoop/?utm_source=atom_feed" rel="related" type="text/html" title="在 winget 到来之际，再谈谈 scoop"/><link href="https://blog.batkiz.com/posts/2020/some-pwsh-scripts/?utm_source=atom_feed" rel="related" type="text/html" title="一些 powershell 脚本"/><link href="https://blog.batkiz.com/posts/2020/conways-game-of-life/?utm_source=atom_feed" rel="related" type="text/html" title="Conway's Game of Life"/><link href="https://blog.batkiz.com/posts/2020/hugo-ci-v2/?utm_source=atom_feed" rel="related" type="text/html" title="Hugo 自动化 CI V2"/><id>https://blog.batkiz.com/posts/2020/301-redirect-with-cloudflare/</id><published>2020-07-16T22:26:33+08:00</published><updated>2020-07-16T22:26:33+08:00</updated><content type="html"><![CDATA[<h2 id="原因">
    原因 
    <a href="#%e5%8e%9f%e5%9b%a0" class="anchor-link">#</a>
</h2><p>我想通过 git.batkiz.com 访问我的 Azure DevOps 主页，但其不支持 CNAME，同时我又不想通过服务器来 301 跳转，所以我就寻思着能不能找个方法白嫖。</p>
<p>下面是通过 Cloudflare 白嫖的教程。</p>
<h2 id="完整步骤">
    完整步骤 
    <a href="#%e5%ae%8c%e6%95%b4%e6%ad%a5%e9%aa%a4" class="anchor-link">#</a>
</h2><h3 id="新建-workers">
    新建 workers 
    <a href="#%e6%96%b0%e5%bb%ba-workers" class="anchor-link">#</a>
</h3><p>workers 即 Cloudflare 推出的 serverless 云函数。在 <a href="https://dash.cloudflare.com/">主页</a> 直接点击 workers 新建一个，名字随意，代码如下：</p>
<pre><code class="language-js">async function handleRequest() {
  return Response.redirect(someURLToRedirectTo, code);
}
addEventListener(&quot;fetch&quot;, async (event) =&gt; {
  event.respondWith(handleRequest());
});
/**
 * @param {Request} url where to redirect the response
 * @param {number?=301|302} type permanent or temporary redirect
 */
const someURLToRedirectTo = &quot;https://batkiz.visualstudio.com/&quot;;
const code = 301;
</code></pre>
<p>部署好之后即可通过其 <code>workers.dev</code> 域名访问了，其会在访问时 301 跳转到指定页。</p>
<p>可是 <code>workers.dev</code> 的域名太长了，也与最初的需求（通过 git.batkiz.com 访问我的 Azure DevOps 主页）不符。因此需要通过某种手段把此域名 CNAME 到 git.batkiz.com 这个域名上。</p>
<p>但云函数显然是没有 CNAME 这个说法的，所以需要借助其他路由来实现。</p>
<h3 id="其他路由">
    其他路由 
    <a href="#%e5%85%b6%e4%bb%96%e8%b7%af%e7%94%b1" class="anchor-link">#</a>
</h3><p>从 <a href="https://dash.cloudflare.com/">dash</a> 点进需要的域名设置，进入其 workers tab，选择添加路由即可。</p>
<p>路由示例：<code>*git.batkiz.com/*</code>，选择匹配的 worker 即可。</p>
<p>而后进入 dns 编辑页，给所用的域名（本例中为 git.batkiz.com）添加一个 A 记录，指向 <code>192.2.0.1</code>。</p>
<p>然后就能用啦！</p>
<hr>
<h2 id="参考">
    参考 
    <a href="#%e5%8f%82%e8%80%83" class="anchor-link">#</a>
</h2><ol>
<li><a href="https://community.cloudflare.com/t/setup-workers-on-personal-domain/88012">Setup Workers on Personal Domain</a></li>
<li><a href="https://developers.cloudflare.com/workers/about/routes/">https://developers.cloudflare.com/workers/about/routes/</a></li>
</ol>
]]></content></entry><entry><title type="html">powershell, headers 与乱码</title><link href="https://blog.batkiz.com/posts/2020/pwsh-headers-and-messy-code/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2019/oh-my-powershell/?utm_source=atom_feed" rel="related" type="text/html" title="oh my powershell"/><link href="https://blog.batkiz.com/posts/2020/some-pwsh-scripts/?utm_source=atom_feed" rel="related" type="text/html" title="一些 powershell 脚本"/><link href="https://blog.batkiz.com/posts/2019/lets-roll-to-wsl2/?utm_source=atom_feed" rel="related" type="text/html" title="滚进 wsl2"/><link href="https://blog.batkiz.com/posts/2018/using-scoop/?utm_source=atom_feed" rel="related" type="text/html" title="初探 Scoop"/><link href="https://blog.batkiz.com/posts/2018/using-wsl/?utm_source=atom_feed" rel="related" type="text/html" title="wsl 使用指北"/><id>https://blog.batkiz.com/posts/2020/pwsh-headers-and-messy-code/</id><published>2020-06-27T20:58:36+08:00</published><updated>2020-06-27T20:58:36+08:00</updated><content type="html"><![CDATA[<h2 id="问题起源">
    问题起源 
    <a href="#%e9%97%ae%e9%a2%98%e8%b5%b7%e6%ba%90" class="anchor-link">#</a>
</h2><p>在几天之前，我的<a href="https://github.com/batkiz/dotfiles/blob/3497c735909dda8b95c62da5ffaffc34cb0b09ee/pwsh/Microsoft.PowerShell_profile.ps1#L123">命令行翻译程序</a>挂掉了，不过由于平时用的也少，所以就没太管，昨天才想起来再找个 API 用。</p>
<p>正如前文所述，我极少用到这个，所以我就懒得去申请腾讯、彩云或是 bing 的 API，毕竟太麻烦了。因此我决定找一个直接提供公用接口的 API，次数限制啥的只要不是太离谱就行。功夫不负有心人，在 Google 上翻了两页之后，我找到了由 <a href="http://nlp.xmu.edu.cn/">厦门大学自然语言处理实验室</a> 提供的 <a href="http://nmt.xmu.edu.cn/">云译 CloudTranslation</a> 的公开 <a href="http://nmt.xmu.edu.cn/static/api_zh-cn.html">API</a>。</p>
<h2 id="解决过程">
    解决过程 
    <a href="#%e8%a7%a3%e5%86%b3%e8%bf%87%e7%a8%8b" class="anchor-link">#</a>
</h2><p>就当我读完短短的 API Doc 后准备开始写段小脚本时，悲剧发生了：它竟然乱码了！</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="图中的 Content 与 RawContent 都是乱码的" data-pswp-title="图中的 Content 与 RawContent 都是乱码的" src="https://s1.ax1x.com/2020/06/27/NckFpV.png" sizes="auto">
    <figcaption>图中的 Content 与 RawContent 都是乱码的</figcaption>
</figure></p>
<p>然后我也很不能相信，于是又回去读了读文档，看到<a href="http://nmt.xmu.edu.cn/static/api_zh-cn.html#_4">其中</a>清楚地写着：</p>
<blockquote>
<p>返回格式： UTF-8 编码纯文本</p>
</blockquote>
<p>WHAT THE F@XK? 我的 Windows 系统一直都是默认 unicode 的，而当前 pwsh 的活动代码页也是 <code>65001</code>。换言之，这个接口的返回值乱码绝对不是本地是 gbk/gb2312 这种低级错误。那问题出在哪呢？</p>
<p>为了确定它返回的编码确实是 utf-8，我看了看它的 headers，以防出现他本身发送的是 gbk/gb2312 这种乌龙。</p>
<p><em>通过 <a href="http://www.mytju.com/classCode/tools/messyCodeRecover.asp">乱码恢复</a> 确定了乱码文字现在的编码是 iso-8859-1，其本身确实是 utf-8 的。</em></p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="看起来并没有问题" data-pswp-title="看起来并没有问题" src="https://s1.ax1x.com/2020/06/27/NcARqe.png" sizes="auto">
    <figcaption>看起来并没有问题</figcaption>
</figure></p>
<p>打眼一看确实没啥问题，但我注意到了其中并没有指定 charset/encoding 信息。</p>
<p>以防万一，我又在 wsl 中用 curl 对比执行了一下：</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="完 全 正 常" data-pswp-title="完 全 正 常" src="https://s1.ax1x.com/2020/06/27/NcAYvT.png" sizes="auto">
    <figcaption>完 全 正 常</figcaption>
</figure></p>
<p>此时我已经基本确定，乱码是因为 headers 中缺了东西导致的，但为什么会导致这种问题呢？我想让他不乱码难道就只能通过 wsl 来调用 API 了么？</p>
<p>然后通过我<del>西安市 top3 的信息检索能力</del>的 Google 技术，找到了这个 StackOverflow 回答：</p>
<blockquote>
<p>The problem is that Spotify is (unwisely) not returning the encoding it&rsquo;s using in its headers. PowerShell obeys the standard by assuming ISO-8859-1, but unfortunately the site is using UTF-8. <a href="https://stackoverflow.com/a/47961370/8553961">src</a></p>
</blockquote>
<p>即一则网站未按规范在 headers 中指定编码信息；二则 powershell 遇到未指定编码的内容时，会假设其编码为 ISO-8859-1，问题就这样出现了。</p>
<p>想要解决也很简单，把内容从 ISO-8859-1 编码转换回 utf-8 即可。</p>
<h2 id="等等还有一个问题">
    等等，还有一个问题 
    <a href="#%e7%ad%89%e7%ad%89%e8%bf%98%e6%9c%89%e4%b8%80%e4%b8%aa%e9%97%ae%e9%a2%98" class="anchor-link">#</a>
</h2><p>命令行中的问题解决了，浏览器中的呢？</p>
<p>如果在浏览器中打开 <a href="https://nmt.xmu.edu.cn/nmt?lang=en_zh-cn&amp;src=Neural%20Machine%20Translation">此示例</a>，浏览器中的内容会是 <em>绁炵粡鏈哄櫒缈昏瘧</em>，是被错误以 gbk 解码而出现的乱码，这个问题在 chromium 与 firefox 上都会出现。</p>
<p>然而在开发者工具的 network 中查看时，其响应会是正常的。时间与才学所限没能细看 chromium/firefox 的源代码，希望有朋友知道的话能指教一二（可看关于页中我的联系方式）。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/><category scheme="https://blog.batkiz.com/tags/powershell" term="powershell" label="powershell"/></entry><entry><title type="html">在 winget 到来之际，再谈谈 scoop</title><link href="https://blog.batkiz.com/posts/2020/talk-about-scoop/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2020/some-pwsh-scripts/?utm_source=atom_feed" rel="related" type="text/html" title="一些 powershell 脚本"/><link href="https://blog.batkiz.com/posts/2020/conways-game-of-life/?utm_source=atom_feed" rel="related" type="text/html" title="Conway's Game of Life"/><link href="https://blog.batkiz.com/posts/2020/hugo-ci-v2/?utm_source=atom_feed" rel="related" type="text/html" title="Hugo 自动化 CI V2"/><link href="https://blog.batkiz.com/posts/2020/how-seo-ruined-the-internet/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | SEO 是如何毁掉互联网的"/><link href="https://blog.batkiz.com/posts/2020/set-hugo-aliases-with-csharp/?utm_source=atom_feed" rel="related" type="text/html" title="用 C# 设置 Hugo Aliases"/><id>https://blog.batkiz.com/posts/2020/talk-about-scoop/</id><published>2020-05-21T15:56:06+08:00</published><updated>2020-05-21T15:56:06+08:00</updated><content type="html"><![CDATA[<p>Microsoft Build 2020 开发者大会在几天前召开了，除了 .NET, C# 等的常规更新之外，微软也发布了全新的、官方支持的命令行安装工具 winget。winget 出现的意义不用多说：Windows 终于迎来了受官方支持的命令行安装工具。此前虽然有 choco, scoop 等，但都只是第三方工具而已，如今微软第一方下场，无疑给开发者们带来了极大的鼓舞。</p>
<p>winget 的使用体验我一直有在 <a href="https://t.me/batkizc">Telegram 频道</a> 里更新，在这里不再多谈——winget 目前还没到 1.0 版本，现在只是 preview 而已，某些点今天谈完可能第二天就给更新了。或许到了 1.0 版本释出时我会再更一篇文章吧。</p>
<h2 id="谈谈-scoop-现有的问题">
    谈谈 scoop 现有的问题 
    <a href="#%e8%b0%88%e8%b0%88-scoop-%e7%8e%b0%e6%9c%89%e7%9a%84%e9%97%ae%e9%a2%98" class="anchor-link">#</a>
</h2><p>我在这里更想谈一谈 scoop 这个第三方的 <code>cli installer</code>。我一直一来都是一个 scoop 吹，本博客之前也曾介绍过 scoop<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>，但经过了这一年多的使用，我也逐渐意识到了许多问题，这些问题或许不是“痛点”，但却总让人有股隔靴搔痒的无力感。</p>
<h3 id="重名问题">
    重名问题 
    <a href="#%e9%87%8d%e5%90%8d%e9%97%ae%e9%a2%98" class="anchor-link">#</a>
</h3><p>当多个 bucket 内有同名 manifest 时，会按照 bucket 的顺序，自动安装最靠前的 manifest。比如我的 <a href="https://github.com/batkiz/backit">backit</a> 与 main bucket 里都存在 ffsend，执行 <code>scoop install ffsend</code> 时，scoop 会安装 backit/ffsend，而非有一个询问。虽然可以用 <code>scoop install main/ffsend</code> 来指定安装，但 scoop 官方是应该注意到这一点的，而非让用户每次都 search 一下。</p>
<h3 id="不受关注的软件">
    不受关注的软件 
    <a href="#%e4%b8%8d%e5%8f%97%e5%85%b3%e6%b3%a8%e7%9a%84%e8%bd%af%e4%bb%b6" class="anchor-link">#</a>
</h3><p>scoop 的 bucket 是靠社区维护的，通常情况下这意味着 bug 更容易被发现——最先发现问题的人通常都会去开 issue 或 pull request。</p>
<p>但当某个软件没那么受人关注，或人们根本没有发现其问题时，就出现另一个问题了：scoop 里的软件版本滞后于官方。</p>
<p>比如 <a href="https://github.com/o2sh/onefetch">onefetch</a>，在 2019/11/06 的 manifest 更新 <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> 之后，onefetch 在自己的 release 里发布了 3 个新版本<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>，而 scoop 里的 manifest 再无更新。虽然这是因为 onefetch 的 release 总是变换命名风格，但 scoop 应该尽力避免这一问题。</p>
<h3 id="人手过少与软件过多">
    人手过少与软件过多 
    <a href="#%e4%ba%ba%e6%89%8b%e8%bf%87%e5%b0%91%e4%b8%8e%e8%bd%af%e4%bb%b6%e8%bf%87%e5%a4%9a" class="anchor-link">#</a>
</h3><p>ScoopInstaller 组织里公开显示的有 8 个人<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>，而足够活跃的仅仅有 <a href="https://github.com/r15ch13">@r15ch13</a> 与 <a href="https://github.com/Ash258">@Ash258</a> 两个人<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>，scoop 并非一个有盈利的项目，这两位也都不是全职维护 scoop，这两人除了自己的本职工作外，能有多少时间投入进来呢？</p>
<p>而仅 main 与 extras 两个 bucket 的软件数量，就已经达到了 1786 个，虽然有社区的力量，但每天 review PR 都够累死的。</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="main 与 extras 包含的 manifest 数量。2020/05/21 15:14" data-pswp-title="main 与 extras 包含的 manifest 数量。2020/05/21 15:14" src="https://s1.ax1x.com/2020/05/21/Yb13Mq.png" sizes="auto">
    <figcaption>main 与 extras 包含的 manifest 数量。2020/05/21 15:14</figcaption>
</figure></p>
<p>当一个 bucket 只有 20 个软件时（指我的 backit），维护者完全有精力隔三岔五地看一眼整个的 checkver 的 log，但当一个 bucket 有 200 个时，就完全不一样了。就比如现在的 main bucket 经常会出现更新滞后的情况，毕竟更新脚本跑起来也是需要时间的。（有兴趣的可以比较一下 <a href="https://github.com/batkiz/backit">batkiz/backit</a> 与 <a href="https://github.com/ScoopInstaller/Main">ScoopInstaller/Main</a> 里 ffsend 的更新时间。）</p>
<h3 id="功能停滞">
    功能停滞 
    <a href="#%e5%8a%9f%e8%83%bd%e5%81%9c%e6%bb%9e" class="anchor-link">#</a>
</h3><p>人手过少带来的另一个问题就是 scoop 本身的功能更新几乎停滞，今年以来在 master 分支上仅仅有两个 commit<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>，还都是 fix。新功能的添加也是如此，<code>scoop download</code> 命令<a href="https://github.com/lukesampson/scoop/issues/1804">早在 2017 年就被 issue 提出</a>，而 2019/12/06 的 #3782 PR 为 scoop 添加了此功能，一直未被合并，今年 5 月又被离奇关闭<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>。让人不得不担心 scoop 项目的发展。</p>
<h3 id="没有明确的-roadmap">
    没有明确的 roadmap 
    <a href="#%e6%b2%a1%e6%9c%89%e6%98%8e%e7%a1%ae%e7%9a%84-roadmap" class="anchor-link">#</a>
</h3><p>scoop 项目至今已经发展了 7 年，却仍没有一个明确的 roadmap，功能的更新也毫无规划。官方的几位开发者除了偶尔对 scoop 进行更新外，每天在忙的就是处理 bucket 里的各种 issue，审批望不到尽头的 PR。</p>
<h3 id="shim-带来的问题">
    shim 带来的问题 
    <a href="#shim-%e5%b8%a6%e6%9d%a5%e7%9a%84%e9%97%ae%e9%a2%98" class="anchor-link">#</a>
</h3><p>scoop 的一个功能特性就是防止 <em>Path pollution from installing lots of programs</em><sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup>，由于 Windows 上并没有像 *nix 上一样强大的链接，这一点是靠所谓的 <em>shim</em> 实现的。shim 的作用基本就是对 example 生成一个非常小的 example.exe，读取 example.shim 内指定的源 example.exe 路径，（传递命令行参数并）将其启动。</p>
<p>这是一个非常聪明的做法，但有时候却也会带来问题。如在 Windows terminal 里，如果用 pwsh shim 作为启动的 shell，会导致对接收到的 <code>Ctrl + c</code> 的处理不正常：我们想要的是将当前正在运行的命令强行停止，pwsh shim 却会直接将 pwsh 停止。<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup>虽然我们可以通过指定 pwsh 原路径的方法避免，但这又有违了 scoop 进行 shim 的初衷。</p>
<h3 id="依赖问题">
    依赖问题 
    <a href="#%e4%be%9d%e8%b5%96%e9%97%ae%e9%a2%98" class="anchor-link">#</a>
</h3><p>有些读者可能看到这里会有些迷惑，解决依赖问题怎么会成为一个问题呢？*nix 上的包管理器不都是在吹自己能处理好依赖吗？</p>
<p>在通常情况下有且仅有一个 package manager 的 *nix 系统之上，包管理器帮助解决依赖问题会很棒。</p>
<p>但在 Windows 系统上，一切都变了：几乎所有软件都没有依赖，最多是 msvc runtime/dotnet runtime；同时用户安装软件的来源也是五花八门的：从官网下载的 exe 文件、MS Store、scoop、choco 等“包管理器”等等等等。</p>
<p>这种情况下，当 scoop 试图接管依赖处理时，就非常令人不爽了。由于 scoop 是按 package 来设定的依赖，而非在环境变量中搜寻是否存在需要的 exe 文件。当你通过其他方式安装了 A，又想要通过 scoop 安装依赖于 A 的 B 时，scoop 只会再给你安装一份 A，非常之 unintelligible。<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup></p>
<p>这样的依赖处理方式还带来了另外一个问题：卸载软件时，无法顺带卸载其不会再用到的依赖。scoop 并没有区分 lib 与 exe，这样也就无法确定你的软件是否能被安全地移除。最终只能是用户在无意间 <code>scoop list</code> 时，发现一个自己毫无印象的软件，然后将其卸载。</p>
<h3 id="我们真的如同我们想象的那般需要-portable-吗">
    我们真的如同我们想象的那般需要 portable 吗 
    <a href="#%e6%88%91%e4%bb%ac%e7%9c%9f%e7%9a%84%e5%a6%82%e5%90%8c%e6%88%91%e4%bb%ac%e6%83%b3%e8%b1%a1%e7%9a%84%e9%82%a3%e8%88%ac%e9%9c%80%e8%a6%81-portable-%e5%90%97" class="anchor-link">#</a>
</h3><p>scoop 在普通情况下非常之 portable，理论上 <code>$env:SCOOP</code> 下的文件可以在不同电脑间相互移动，所需要的仅仅是设定好 scoop 所需要的几个环境变量——但是等等，我们真的需要这一点吗？</p>
<p>scoop 的 nonportable bucket 与种种以 <code>-np</code> 结尾的 manifest 已经证实了 portable 不是灵丹妙药，是不能解决所有的软件的：比如 Windows terminal 等以 appx 为打包格式的软件，根本无法指定安装地址；yarn-np 等软件如果进行极端的 portable 化会导致每次更新都丢数据。</p>
<p>不可否认，这个世界上有很多人同时使用多台电脑，或者想要完全的 portable 软件。但对我们这些仅仅拥有一台电脑、并不太在意软件是否是 portable 的、甚至根本不在乎环境变量是不是被污染的人呢？为了 portable, path clean 而付出的额外的代价，我们是否也应该承受呢？仅就我而言，需要的可能只是一个恰倒好处的 <em>CLI installer</em> 罢了。</p>
<hr>
<h2 id="设计一个-cli-installer">
    设计一个 CLI installer 
    <a href="#%e8%ae%be%e8%ae%a1%e4%b8%80%e4%b8%aa-cli-installer" class="anchor-link">#</a>
</h2><p>scoop 无疑是一个值得使用的 <em>package manager</em>，上面列出了的种种缺点也都是站在我个人立场上的，毕竟吾之蜜糖，彼之砒霜，适合自己的才是最好的。</p>
<p>但如果让我来设计的话，一个完全只符合我 <strong>个人需求</strong> 的 CLI installer 会是怎么样的呢？</p>
<ul>
<li>安装过程通过 pwsh 脚本定义，增强自由度。</li>
<li>对 exe, msi, appx 等用 inno, Add-AppxPackage 等安装，参考 winget。</li>
<li>对 zip 进行解压等，将 manifest 中定义的 bin 写入环境变量。</li>
<li>卸载过程则参考 winget 后续的动作。</li>
<li>dependencies 则是在 manifest 中写入所需的 exe，安装过程中搜寻整个环境变量，如果不存在则推荐安装，并不强制。</li>
<li>利用 GitHub API，manifest 的自动更新出问题时自动新建 issue。</li>
<li>数据持久化仅在 update 时进行，通过 manifest 中定义的文件/文件夹或脚本，来在不同版本文件夹间互相复制等。</li>
</ul>
<p>当然，这只是目前的构想，后续的开发过程中一定会有所更改。</p>
<p>那么问题来了，我什么时候能用上这个 CLI installer 呢？</p>
<p>下周发布 PPT，今年 12 月第一阶段开源！（逃</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="ttps://blog.batkiz.com/posts/2018/using-scoop/">初探 Scoop</a>，2018/12/31 <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://github.com/lukesampson/scoop-extras/commit/063694cae5019119e117fae5458219d8e32397d0">https://github.com/lukesampson/scoop-extras/commit/063694cae5019119e117fae5458219d8e32397d0</a> <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p><a href="https://github.com/o2sh/onefetch/releases">https://github.com/o2sh/onefetch/releases</a> <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p><a href="https://github.com/orgs/ScoopInstaller/people">https://github.com/orgs/ScoopInstaller/people</a> <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>由 <a href="https://github.com/ScoopInstaller/Main/graphs/contributors">Main/contributors</a> 与 <a href="https://github.com/lukesampson/scoop-extras/graphs/contributors">extras/contributors</a> 得出的结论 <a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6" role="doc-endnote">
<p><a href="https://github.com/lukesampson/scoop/commits/master">https://github.com/lukesampson/scoop/commits/master</a> <a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7" role="doc-endnote">
<p><a href="https://github.com/lukesampson/scoop/pull/3782">feat: Present download command #3782</a> <a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8" role="doc-endnote">
<p><a href="https://github.com/lukesampson/scoop#what-does-scoop-do">what-does-scoop-do</a> <a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9" role="doc-endnote">
<p><a href="https://github.com/PowerShell/PowerShell/issues/11314">pwsh as a dotnet global tool exhibits very unusual behavior with Ctrl-C</a> <a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10" role="doc-endnote">
<p><a href="https://github.com/lukesampson/scoop-extras/issues/3200">https://github.com/lukesampson/scoop-extras/issues/3200</a> <a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content><category scheme="https://blog.batkiz.com/tags/scoop" term="scoop" label="scoop"/><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="Windows"/><category scheme="https://blog.batkiz.com/tags/winget" term="winget" label="winget"/></entry><entry><title type="html">一些 powershell 脚本</title><link href="https://blog.batkiz.com/posts/2020/some-pwsh-scripts/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2019/oh-my-powershell/?utm_source=atom_feed" rel="related" type="text/html" title="oh my powershell"/><link href="https://blog.batkiz.com/posts/2020/conways-game-of-life/?utm_source=atom_feed" rel="related" type="text/html" title="Conway's Game of Life"/><link href="https://blog.batkiz.com/posts/2020/hugo-ci-v2/?utm_source=atom_feed" rel="related" type="text/html" title="Hugo 自动化 CI V2"/><link href="https://blog.batkiz.com/posts/2020/how-seo-ruined-the-internet/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | SEO 是如何毁掉互联网的"/><link href="https://blog.batkiz.com/posts/2020/set-hugo-aliases-with-csharp/?utm_source=atom_feed" rel="related" type="text/html" title="用 C# 设置 Hugo Aliases"/><id>https://blog.batkiz.com/posts/2020/some-pwsh-scripts/</id><published>2020-05-13T21:34:09+08:00</published><updated>2020-05-13T21:34:09+08:00</updated><content type="html"><![CDATA[<p>近期写的、收集的一些 pwsh 脚本，我完整的 pwsh 配置可看 <a href="https://github.com/batkiz/dotfiles">batkiz/dotfiles</a>。</p>
<p>由于主要是为了满足个人使用，所以没怎么做错误处理之类的。</p>
<h2 id="在-pwsh-中使用-wsl-中的-nvim">
    在 pwsh 中使用 wsl 中的 nvim 
    <a href="#%e5%9c%a8-pwsh-%e4%b8%ad%e4%bd%bf%e7%94%a8-wsl-%e4%b8%ad%e7%9a%84-nvim" class="anchor-link">#</a>
</h2><p><code>dos2nix</code> 是将 windows 风格的路径转换为 wsl 中的路径。</p>
<pre><code class="language-powershell">function dos2nix {
    param($dosPath)

    $path = $dosPath.Replace('\', '/')

    if ($path -match '[a-zA-Z]:.*') {
        $drive = $path.split(':')[0].ToLower()
        $filePath = $path.split(':')[1]

        $nixPath = '/mnt/' + $drive + $filePath
    }
    else {
        $nixPath = $path
    }

    $nixPath
}

function vim {
    param (
        $Path = '.'
    )

    if ($Path -eq '.') {
        $Path = '.'
    }
    else {
        $Path = dos2nix -dosPath $Path
    }

    wsl -d debian -e nvim $Path
}
</code></pre>
<h2 id="which">
    which 
    <a href="#which" class="anchor-link">#</a>
</h2><p>获取某个可执行文件的路径。</p>
<pre><code class="language-powershell">function which {
    $results = New-Object System.Collections.Generic.List[System.Object];
    foreach ($command in $args) {
        $path = (Get-Command $command).Source
        if ($path) {
            $results.Add($path);
        }
    }
    return $results;
}
</code></pre>
<h2 id="ls">
    ls 
    <a href="#ls" class="anchor-link">#</a>
</h2><p>*nix 中的 <code>ls</code> 样式，可惜没搞出来着色。</p>
<pre><code class="language-powershell">function ListDirectory {
    Get-ChildItem $args | Format-Wide Name -AutoSize
}

Set-Alias -Name ls -Value ListDirectory
Set-Alias -Name ll -Value Get-ChildItem
Set-Alias -Name l -Value Get-ChildItem
</code></pre>
<p>related: <a href="https://github.com/JRJurman/PowerLS">powerls</a></p>
<h2 id="nali">
    nali 
    <a href="#nali" class="anchor-link">#</a>
</h2><p>接收一个域名或 ip（<code>-Query</code>），返回其 ip 和地理位置信息。</p>
<p>默认是获取本地的 ip 和位置，语言可以切换英文或中文（默认是中文）。</p>
<pre><code class="language-powershell">function nali {
    param (
        $Query = '',
        [Alias('l')]
        $Lang = 'zh'
    )

    if ($Lang.ToLower() -eq 'en' ) {
        $Lang = 'en'
    }
    else {
        $Lang = 'zh-CN'
    }

    $ApiUrl = &quot;http://ip-api.com/json/{0}?lang={1}&quot; -f $Query, $Lang

    $info = (Invoke-WebRequest $ApiUrl).Content | ConvertFrom-Json

    $printInfo = &quot;{0}`t[{1} @ {2}, {3}]&quot; -f $info.query, $info.isp, $info.city, $info.country

    $printInfo
}
</code></pre>
<p>related: <a href="https://github.com/batkiz/nali-go">batkiz/nali-go</a></p>
]]></content><category scheme="https://blog.batkiz.com/tags/powershell" term="powershell" label="powershell"/></entry><entry><title type="html">Conway's Game of Life</title><link href="https://blog.batkiz.com/posts/2020/conways-game-of-life/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2020/set-hugo-aliases-with-csharp/?utm_source=atom_feed" rel="related" type="text/html" title="用 C# 设置 Hugo Aliases"/><link href="https://blog.batkiz.com/posts/2020/hugo-ci-v2/?utm_source=atom_feed" rel="related" type="text/html" title="Hugo 自动化 CI V2"/><link href="https://blog.batkiz.com/posts/2020/how-seo-ruined-the-internet/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | SEO 是如何毁掉互联网的"/><link href="https://blog.batkiz.com/posts/2019/using-wsl-nvim-in-powershell/?utm_source=atom_feed" rel="related" type="text/html" title="在 powershell 中无缝调用 wsl 中的 neovim"/><link href="https://blog.batkiz.com/posts/2019/lets-roll-to-wsl2/?utm_source=atom_feed" rel="related" type="text/html" title="滚进 wsl2"/><id>https://blog.batkiz.com/posts/2020/conways-game-of-life/</id><published>2020-04-17T20:55:58+08:00</published><updated>2020-04-17T20:55:58+08:00</updated><content type="html"><![CDATA[<p>R.I.P John Conway.</p>
<p>由于近期席卷全球的新冠肺炎，John Conway 不幸染病离世。生命游戏 (Game of Life) 是其最为著名的成果。几天前我在 Codewars 上刷到了相关的题目，花了一段时间做了出来，在此写一篇文章，就当是为了纪念 Conway 吧。</p>
<h2 id="题目">
    题目 
    <a href="#%e9%a2%98%e7%9b%ae" class="anchor-link">#</a>
</h2><p>Given a 2D array and a number of generations, compute n timesteps of <a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Conway&rsquo;s Game of Life</a>.</p>
<p>The rules of the game are:</p>
<ol>
<li>Any live cell with fewer than two live neighbours dies, as if caused by underpopulation.</li>
<li>Any live cell with more than three live neighbours dies, as if by overcrowding.</li>
<li>Any live cell with two or three live neighbours lives on to the next generation.</li>
<li>Any dead cell with exactly three live neighbours becomes a live cell.</li>
</ol>
<p>Each cell&rsquo;s neighborhood is the 8 cells immediately around it (i.e. <a href="https://en.wikipedia.org/wiki/Moore_neighborhood">Moore Neighborhood</a>). The universe is infinite in both the x and y dimensions and all cells are initially dead - except for those specified in the arguments. The return value should be a 2d array cropped around all of the living cells. (If there are no living cells, then return <code>[[]]</code>.)</p>
<p>题目其实就是生命游戏的定义：</p>
<p>在一个无限大的棋盘上，我们以 <code>1</code> 代表存活的生命，以 <code>0</code> 代表死去的生命或 <code>无</code>。</p>
<p>其上的生命遵循上面的四条规则存活、死去、或是产生下一代。</p>
<h2 id="思路">
    思路 
    <a href="#%e6%80%9d%e8%b7%af" class="anchor-link">#</a>
</h2><pre><code class="language-cs">public static int[,] GetGeneration(int[,] cells, int generation)
</code></pre>
<p>可以看到函数接收了二维数组与一个整数，分别代表了其上的生命与要演化的代数。</p>
<p>首先我们要认识清楚，棋盘的大小是<strong>无限的</strong>，而不仅仅是接收的二维数组的大小。当然，题中也给出了计算邻居的规则，我们在处理时，要将接收到的数组扩大一圈。</p>
<p>新建一个长宽各自 +2 的矩形，再把目前的矩形放在其正中间，最后返回这个矩形。</p>
<pre><code class="language-cs">public static int[,] NewBoard(int[,] cells)
{
    var hang = cells.GetLength(0);
    var lie = cells.GetLength(1);

    var newBoard = new int[hang + 2, lie + 2];

    for (int i = 0; i &lt; hang + 2; i++)
    {
        for (int j = 0; j &lt; lie + 2; j++)
        {
            newBoard[i, j] = 0;
        }
    }

    for (int i = 1; i &lt; hang + 1; i++)
    {
        for (int j = 1; j &lt; lie + 1; j++)
        {
            newBoard[i, j] = cells[i - 1, j - 1];
        }
    }

    return newBoard;
}
</code></pre>
<p>相应的，在返回最终的结果时，棋盘除了有生命存在的一个矩形之外，也要裁剪掉多出的全为 0 的行与列。</p>
<p>这里是分别从上下、左右遍历了数组，获取了其存在 1 的最外层的坐标，然后把它裁剪了下来，返回了最精简的数组。</p>
<pre><code class="language-cs">public static int[,] cropped(int[,] cells)
{
    var hang = cells.GetLength(0);
    var lie = cells.GetLength(1);
    var (hStart, lStart, hEnd, lEnd, hLen, lLen) = (0, 0, 0, 0, 0, 0);

    for (int i = 0; i &lt; hang; i++)
    {
        for (int j = 0; j &lt; lie; j++)
        {
            if (cells[i, j] != 0)
            {
                hStart = i;
                i = hang;
                break;
            }
        }
    }

    for (int i = hang - 1; i &gt;= 0; i--)
    {
        for (int j = lie - 1; j &gt;= 0; j--)
        {
            if (cells[i, j] != 0)
            {
                hEnd = i;
                i = 0;
                break;
            }
        }
    }

    for (int i = 0; i &lt; lie; i++)
    {
        for (int j = 0; j &lt; hang; j++)
        {
            if (cells[j, i] != 0)
            {
                lStart = i;
                i = lie;
                break;
            }
        }
    }


    for (int i = lie - 1; i &gt;= 0; i--)
    {
        for (int j = hang - 1; j &gt;= 0; j--)
        {
            if (cells[j, i] != 0)
            {
                lEnd = i;
                i = 0;
                break;
            }
        }
    }

    hLen = hEnd - hStart + 1;
    lLen = lEnd - lStart + 1;

    var newCell = new int[hLen, lLen];

    for (int i = 0; i &lt; hLen; i++)
    {
        for (int j = 0; j &lt; lLen; j++)
        {
            newCell[i, j] = cells[hStart + i, lStart + j];
        }
    }

    return newCell;
}
</code></pre>
<p>确定了最先与最后的步骤，就要处理中间的过程了。</p>
<p>为了确定某一个坐标下的生物在下一轮中是死是活，只需要获取它有多少存活的邻居，再用给出的四条规则来判定就能得出了。</p>
<p>首先是获取某一特定坐标的生物有多少活着的邻居，仅需遍历它八个邻居的位置并确定是否存活即可。值得注意的是，对于最外层、邻居不足八个的生物要做特殊的处理，以防数组越界。由于我懒得确定是否越界，就用了一个邪道玩法，如果出现了数组越界的 Exception 就忽略掉它继续访问下一个地址。</p>
<pre><code class="language-cs">public static int GetLiveNeighbors(int x, int y, int[,] ceil)
{
    var val = 0;
    int[] neighbors = { 0, 1, -1 };

    for (int i = 0; i &lt; 3; i++)
    {
        for (int j = 0; j &lt; 3; j++)
        {
            if (!(neighbors[i] == 0 &amp;&amp; neighbors[j] == 0))
            {
                int r = (x + neighbors[i]);
                int c = (y + neighbors[j]);

                try
                {
                    if (ceil[r, c] == 1)
                    {
                        val += 1;
                    }
                }
                catch (System.Exception)
                {
                    val += 0;
                    continue;
                }
            }
        }
    }

    return val;
}
</code></pre>
<p>下面则是确定某一坐标下的生物在下一轮中是死是活。</p>
<pre><code class="language-cs">var hang = cells.GetLength(0);
var lie = cells.GetLength(1);
var newGen = new int[hang + 2, lie + 2];
var biggerCells = NewBoard(cells);

for (int x = 0; x &lt; hang + 2; x++)
{
    for (int y = 0; y &lt; lie + 2; y++)
    {
        var n = GetLiveNeighbors(x, y, biggerCells);
        var c = biggerCells[x, y];

        newGen[x, y] = ((c == 1) &amp;&amp; (n == 2 || n == 3) || (c == 0) &amp;&amp; n == 3) ? 1 : 0;
    }
}

var result = cropped(newGen);
</code></pre>
<p>至于代数，一个递归就能解决问题了。在此不作赘述。</p>
<h2 id="完整代码">
    完整代码 
    <a href="#%e5%ae%8c%e6%95%b4%e4%bb%a3%e7%a0%81" class="anchor-link">#</a>
</h2><pre><code class="language-cs">using System;
using System.Linq;

public class ConwayLife
{
    public static int[,] GetGeneration(int[,] cells, int generation)
    {
        if (generation &lt;= 0)
        {
            return cells;
        }

        var hang = cells.GetLength(0);
        var lie = cells.GetLength(1);

        var newGen = new int[hang + 2, lie + 2];

        var biggerCells = NewBoard(cells);


        for (int x = 0; x &lt; hang + 2; x++)
        {
            for (int y = 0; y &lt; lie + 2; y++)
            {
                var n = GetLiveNeighbors(x, y, biggerCells);
                var c = biggerCells[x, y];

                newGen[x, y] = ((c == 1) &amp;&amp; (n == 2 || n == 3) || (c == 0) &amp;&amp; n == 3) ? 1 : 0;
            }
        }

        var result = cropped(newGen);

        return GetGeneration(result, generation - 1);
    }

    public static int GetLiveNeighbors(int x, int y, int[,] ceil)
    {
        var val = 0;
        int[] neighbors = { 0, 1, -1 };

        for (int i = 0; i &lt; 3; i++)
        {
            for (int j = 0; j &lt; 3; j++)
            {
                if (!(neighbors[i] == 0 &amp;&amp; neighbors[j] == 0))
                {
                    int r = (x + neighbors[i]);
                    int c = (y + neighbors[j]);

                    try
                    {
                        if (ceil[r, c] == 1)
                        {
                            val += 1;
                        }
                    }
                    catch (System.Exception)
                    {
                        val += 0;
                        continue;
                    }
                }
            }
        }

        return val;
    }

    public static int[,] cropped(int[,] cells)
    {
        var hang = cells.GetLength(0);
        var lie = cells.GetLength(1);
        var (hStart, lStart, hEnd, lEnd, hLen, lLen) = (0, 0, 0, 0, 0, 0);

        for (int i = 0; i &lt; hang; i++)
        {
            for (int j = 0; j &lt; lie; j++)
            {
                if (cells[i, j] != 0)
                {
                    hStart = i;
                    i = hang;
                    break;
                }
            }
        }

        for (int i = hang - 1; i &gt;= 0; i--)
        {
            for (int j = lie - 1; j &gt;= 0; j--)
            {
                if (cells[i, j] != 0)
                {
                    hEnd = i;
                    i = 0;
                    break;
                }
            }
        }

        for (int i = 0; i &lt; lie; i++)
        {
            for (int j = 0; j &lt; hang; j++)
            {
                if (cells[j, i] != 0)
                {
                    lStart = i;
                    i = lie;
                    break;
                }
            }
        }


        for (int i = lie - 1; i &gt;= 0; i--)
        {
            for (int j = hang - 1; j &gt;= 0; j--)
            {
                if (cells[j, i] != 0)
                {
                    lEnd = i;
                    i = 0;
                    break;
                }
            }
        }

        hLen = hEnd - hStart + 1;
        lLen = lEnd - lStart + 1;

        var newCell = new int[hLen, lLen];

        Console.WriteLine($&quot;h {hLen} l {lLen}&quot;);

        for (int i = 0; i &lt; hLen; i++)
        {
            for (int j = 0; j &lt; lLen; j++)
            {
                newCell[i, j] = cells[hStart + i, lStart + j];
            }
        }

        return newCell;
    }

    public static int[,] NewBoard(int[,] cells)
    {
        var hang = cells.GetLength(0);
        var lie = cells.GetLength(1);

        var newBoard = new int[hang + 2, lie + 2];

        for (int i = 0; i &lt; hang + 2; i++)
        {
            for (int j = 0; j &lt; lie + 2; j++)
            {
                newBoard[i, j] = 0;
            }
        }

        for (int i = 1; i &lt; hang + 1; i++)
        {
            for (int j = 1; j &lt; lie + 1; j++)
            {
                newBoard[i, j] = cells[i - 1, j - 1];
            }
        }

        return newBoard;
    }
}
</code></pre>
]]></content><category scheme="https://blog.batkiz.com/tags/codewars" term="codewars" label="codewars"/><category scheme="https://blog.batkiz.com/tags/csharp" term="csharp" label="csharp"/></entry><entry><title type="html">Hugo 自动化 CI V2</title><link href="https://blog.batkiz.com/posts/2020/hugo-ci-v2/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2020/set-hugo-aliases-with-csharp/?utm_source=atom_feed" rel="related" type="text/html" title="用 C# 设置 Hugo Aliases"/><link href="https://blog.batkiz.com/posts/2019/migrate-to-hugo-and-automation/?utm_source=atom_feed" rel="related" type="text/html" title="博客迁移至 Hugo 并实现自动化"/><link href="https://blog.batkiz.com/posts/2020/how-seo-ruined-the-internet/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | SEO 是如何毁掉互联网的"/><link href="https://blog.batkiz.com/posts/2019/using-wsl-nvim-in-powershell/?utm_source=atom_feed" rel="related" type="text/html" title="在 powershell 中无缝调用 wsl 中的 neovim"/><link href="https://blog.batkiz.com/posts/2019/lets-roll-to-wsl2/?utm_source=atom_feed" rel="related" type="text/html" title="滚进 wsl2"/><id>https://blog.batkiz.com/posts/2020/hugo-ci-v2/</id><published>2020-04-13T11:19:09+08:00</published><updated>2020-04-13T11:19:09+08:00</updated><content type="html"><![CDATA[<p>改进了一下自动化发布博客的 CI，代码在下面。</p>
<p>如果想拿去用的话只需要修改 env 下的值就行了。</p>
<pre><code class="language-yml">name: blog

on: [push]

# 各种信息在此处设置
env:
  # config.toml 里 theme 的值
  THEME_NAME: left
  # 主题的 github 链接
  THEME_REPO: https://github.com/batkiz/left.git
  # github username
  USER_NAME: batkiz
  # github email
  EMAIL: batkiz@outlook.com
  # GitHub token
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # 获取 repo 内文件
      - uses: actions/checkout@v2
      # 使用预编译的 Hugo 二进制文件
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: &quot;latest&quot;
          extended: true

      # 新建站点
      - name: new site
        run: |
          hugo new site $HOME/blog

      # 获取主题
      - name: get theme
        run: |
          git clone --depth=1 $THEME_REPO $HOME/blog/themes/$THEME_NAME

      # 获取 $user.github.io 以保持 commit 记录
      - name: get username.github.io
        run: |
          git clone --no-checkout https://github.com/$USER_NAME/$USER_NAME.github.io.git $HOME/blog/public

      # 将内容文件复制进入站点内
      - name: copy in
        run: |
          rm -rf $HOME/blog/config.toml $HOME/blog/content/
          /bin/cp -rf config.toml $HOME/blog/config.toml
          /bin/cp -rf content/ $HOME/blog/content/

      # build
      - name: build
        run: |
          cd $HOME/blog
          HUGO_ENV=production hugo --gc --minify

      # 将生成出的站点推向 user.github.io
      # 注意设置 github token
      - name: publish
        run: |
          git config --global user.name $USER_NAME
          git config --global user.email $EMAIL
          cd $HOME/blog/public
          git add .
          git commit -m &quot;Auto Update: `date +'%Y-%m-%d %H:%M:%S'`&quot;
          git push &quot;https://$USER:$GH_TOKEN@github.com/$USER_NAME/$USER_NAME.github.io.git&quot; master:master
</code></pre>
<p>附赠本人用于存放 blog 内容仓库的 gitignore</p>
<pre><code class="language-gitignore">/archetypes/
/data/
/layouts/
/public/
/resources/
/static/
/themes/
</code></pre>
]]></content><category scheme="https://blog.batkiz.com/tags/hugo" term="hugo" label="hugo"/><category scheme="https://blog.batkiz.com/tags/ci" term="ci" label="CI"/></entry><entry><title type="html">翻译 | SEO 是如何毁掉互联网的</title><link href="https://blog.batkiz.com/posts/2020/how-seo-ruined-the-internet/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2019/advice-to-new-programmers/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | 给新手程序员们的建议"/><link href="https://blog.batkiz.com/posts/2018/translation-the-rise-and-demise-of-rss/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | RSS 的兴起与衰落"/><link href="https://blog.batkiz.com/posts/2020/set-hugo-aliases-with-csharp/?utm_source=atom_feed" rel="related" type="text/html" title="用 C# 设置 Hugo Aliases"/><link href="https://blog.batkiz.com/posts/2019/using-wsl-nvim-in-powershell/?utm_source=atom_feed" rel="related" type="text/html" title="在 powershell 中无缝调用 wsl 中的 neovim"/><link href="https://blog.batkiz.com/posts/2019/lets-roll-to-wsl2/?utm_source=atom_feed" rel="related" type="text/html" title="滚进 wsl2"/><id>https://blog.batkiz.com/posts/2020/how-seo-ruined-the-internet/</id><published>2020-04-09T22:49:16+08:00</published><updated>2020-04-09T22:49:16+08:00</updated><content type="html"><![CDATA[<p>原文： <a href="https://www.superhighway98.com/seo">How SEO Ruined the Internet</a></p>
<p>翻译：<a href="https://github.com/batkiz">batkiz</a></p>
<p>译者按：SEO，即搜索引擎优化（search engine optimization），指通过了解搜索引擎的运作规则来调整网站，以提高网站在有关搜索引擎内排名的方式。</p>
<hr>
<p>在 1998 年到 2003 年的那段时间，在 Google 上搜索是非常神奇的。我还记得输入像是“oil mother&rsquo;s milk,”这样一个模糊的概念，然后就被导航到了 <a href="https://www.wired.com/2000/07/gold/">Thomas Gold 的一篇访谈</a>。（Thomas Gold 是一位天文物理学家，提出了石油会因为地壳压力重新沉积的理论。）</p>
<p>现如今，如果你在寻找技术性的、具体的、学术性的或是一般非商业的信息，那么你拥有了该死的好运气。世界上最好的信息检索系统像是变成了 <a href="https://www.informationweek.com/digg-dogged-by-allegations-of-manipulation-/d/d-id/1046783">2006 年代的 Digg</a> 一样：由一小部分商业玩家控制的流行流行指数。他们称自己为“SEO”。</p>
<p>拥有着卓越技术的 SEO 专家们通常使网站更快、更安全、更易访问。“黑帽” SEO 则显然是坏蛋。他们以破坏规则的方式来提升自己网站的排名（例如侵入一个网站，在其中添加到自己网站的链接）。然而，黑帽们只是 SEO 世界中的小小罪犯。还存在着看似是好家伙，实际上却是披着羊皮的狼的 “白帽” SEO。</p>
<p>这些网络营销者的策略十分简单：以集权压制竞争。他们躲藏在合理与伪善的大旗之下，如同极权政体一般，他们为了达到目的不择手段。下面是他们使用的一些手段：</p>
<h2 id="编辑历史">
    编辑历史 
    <a href="#%e7%bc%96%e8%be%91%e5%8e%86%e5%8f%b2" class="anchor-link">#</a>
</h2><p>你重新读一篇文章时，你可能会发现其标题或是链接被改动过，这是一个非常普遍的行为。SEO 专家会“优化”旧文章来使它们更为市场化（并为读者推荐更新、更商业化的内容）。当我回看十年前我写的文章时，文章已经变得面目全非：夹杂着我从未写过的内容，承载着我从未表达的含义。</p>
<h2 id="删除过去">
    删除过去 
    <a href="#%e5%88%a0%e9%99%a4%e8%bf%87%e5%8e%bb" class="anchor-link">#</a>
</h2><p>在大型知名网站上，“内容修剪”是一个非常有效的 SEO 策略。相比于将具有历史意义的内容归档，许多网站会选择将它们删除，返回 410 状态码。<em>永久性的丢失</em>。这样做是为了优化“抓取配额”，使 Google 关注当下更为流行的内容。结果便是互联网上不再有制度记忆（<a href="https://en.wikipedia.org/wiki/Institutional_memory">institutional memory</a>或是可信度了。</p>
<h2 id="导演叙事">
    导演叙事 
    <a href="#%e5%af%bc%e6%bc%94%e5%8f%99%e4%ba%8b" class="anchor-link">#</a>
</h2><p>给我一个现代新闻编辑室，我会给你展示一个指导写手们的内容策略专家。但是，当记者们因必须写自己感到不舒服的专题而感到压力，或是被强迫以特定的角度解读问题，“SEO 最佳实践”就像是一个宣传机构了。这是<em>有线新闻效应</em>，黑幕背后的人可以随意修改台本，将所有的事都推送为“爆炸新闻”！</p>
<h2 id="提供有选择的错觉">
    提供“有选择的”错觉 
    <a href="#%e6%8f%90%e4%be%9b%e6%9c%89%e9%80%89%e6%8b%a9%e7%9a%84%e9%94%99%e8%a7%89" class="anchor-link">#</a>
</h2><p>一少部分出版公司手握着上百家的年浏览量以数十亿计的媒体网站。当你搜索“最好的手机”时，你可能会看到来自 TechRadar, Android Central, T3, Tom&rsquo;s Guide, Anandtech, iMore 或是 Top Ten Reviews 的搜索结果。不论你点击了哪个结果，你其实都毫无选择：上述的所有都隶属于一下公司之下。</p>
<h2 id="囤积财富">
    囤积财富 
    <a href="#%e5%9b%a4%e7%a7%af%e8%b4%a2%e5%af%8c" class="anchor-link">#</a>
</h2><p>链接就是网络中的货币。没有链接的话，搜索引擎将无法分辨哪个页面更为有价值。不幸的是，许多网站不允许其他网站引用他们的内容，或是为每一个链接都加上 <a href="https://zh.wikipedia.org/wiki/Nofollow"><code>ref=&quot;nofollow&quot;</code> 属性</a>（即告诉搜索引擎不要抓取这条链接）。这使得整个网络世界都变的更为贫瘠了。</p>
<hr>
<p>SEO 是一个零和游戏，有赢家必定就有输家。SEO 促进了装神弄鬼、链接失效、整合、垄断与颠覆，我们都成为了输家。我还记得在互联网上非常容易找到逻辑、事实与理性的时代。在那之后，有人把它优化掉了。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/%E7%BF%BB%E8%AF%91" term="%E7%BF%BB%E8%AF%91" label="翻译"/></entry><entry><title type="html">用 C# 设置 Hugo Aliases</title><link href="https://blog.batkiz.com/posts/2020/set-hugo-aliases-with-csharp/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2019/migrate-to-hugo-and-automation/?utm_source=atom_feed" rel="related" type="text/html" title="博客迁移至 Hugo 并实现自动化"/><link href="https://blog.batkiz.com/posts/2019/using-wsl-nvim-in-powershell/?utm_source=atom_feed" rel="related" type="text/html" title="在 powershell 中无缝调用 wsl 中的 neovim"/><link href="https://blog.batkiz.com/posts/2019/lets-roll-to-wsl2/?utm_source=atom_feed" rel="related" type="text/html" title="滚进 wsl2"/><link href="https://blog.batkiz.com/posts/2019/sth-about-hosts-tool-2/?utm_source=atom_feed" rel="related" type="text/html" title="写在 hosts-tool-go 0.1.0 之际"/><link href="https://blog.batkiz.com/about/?utm_source=atom_feed" rel="related" type="text/html" title="关于"/><id>https://blog.batkiz.com/posts/2020/set-hugo-aliases-with-csharp/</id><published>2020-01-05T00:53:07+08:00</published><updated>2020-01-05T00:53:07+08:00</updated><content type="html"><![CDATA[<p>2020 年新年好！</p>
<p>相信细心的读者已经注意到了，本博客的文章链接已经全部从 <code>blog.batkiz.com/:year/:month/:day/:filename/</code> 调整为了 <code>blog.batkiz.com/posts/:year/:filename/</code> 的 url 格式。主要的原因是 url 的可读性：一则我个人认为让完整的日期出现在文章的 url 中对“人”非常之不友好。比如我曾想直接输入文章链接访问文章时，日期极大地为我原本就不太好的记忆力增加了负担。另一方面，具体而完整的时间对于读者也是不必要的，几乎没有人会关注文章是在几月几号几点写的，作为读者，更关注的点在于内容，在 url 中隐藏掉具体的时间，只给出一个年份，在我看来是某种程度上的平衡。</p>
<p>其实这个想法早在将博客生成器由 hexo 切换到 hugo 时就有了，但是由于兼容性的问题（我在煎蛋等平台上的投稿有到我文章的链接），我不能让原本的文章给 404 掉，所以当时只能忍辱负重，继续使用含有完整日期的 url。（见<a href="/posts/2019/migrate-to-hugo-and-automation/">此文</a>）</p>
<p>而在某天晚上我刷牙洗漱时，我突然想到，能否将 url 更改的同时，设置以带有完整日期链接的访问跳转到新的链接。经过一番搜索，我找到了名为 <a href="https://gohugo.io/content-management/urls/#aliases">Aliases</a> 的功能，这正是我要找的！</p>
<p>但是，在打算用这个功能时，我犯了难：博客经过三年多的积累，文章的量并不是我能够手动一篇一篇的修改的了的。当然啦，作为一个程序员，第一时间想到的，当然就是通过写代码来自动化啦。</p>
<p>通过观察，所添加的 Aliases 项应被添加在 frontmatter 中，其主要依赖了文章的日期即 date 项。我最开始的想法是，将每篇文章的 frontmatter （在我的文章中用的是 yaml）序列化，对序列化后的项进行修改，最后再反序列化，保存至文章。</p>
<p>但是由于我并没有找到一个可用性较高的解析 markdown 文件 yaml frontmatter 的库，此想法只好作罢。</p>
<p>经过我的进一步观察，每篇文章的 date 项均处在第三行，且格式为</p>
<pre><code class="language-yaml">date: yyyy-mm-dd time
</code></pre>
<p>事情就好办了起来。</p>
<p>核心思想即：读入文本，将位于第三行的日期解析出来-&gt;生成 Aliases 项-&gt;写入文本。</p>
<p>下面是代码（C# 8, dotnet core 3.1），由于时间匆忙，且需求简单，因此未做过多的处理。</p>
<pre><code class="language-cs">using System.Linq;
using System.IO;
using System;

namespace AddAliasToBlogPosts
{
    class Program
    {
        static void Main(string[] args)
        {
            string dir = @&quot;C:\code\blog-contents\content\posts&quot;;
            var posts = GetPosts(dir);

            foreach (var item in posts)
            {
                AppendAlias(GetAlias(item), item, 3);
                //System.Console.WriteLine(GetAlias(item));
            }
        }

        static string[] GetPosts(string dir) =&gt; Directory.GetFiles(dir);


        static string GetFilesName(string path)
        {
            path = path.Split('\\').Last();
            return path.Substring(0, path.Length - 3);
        }
        static string GetLine(string text, int lineNo)
        {
            string[] lines = text.Replace(&quot;\r&quot;, &quot;&quot;).Split('\n');
            return lines.Length &gt;= lineNo ? lines[lineNo - 1] : null;
        }

        static Func&lt;string, string&gt; GetTime = (path) =&gt;
        {
            string text = File.ReadAllText(path);
            string time = GetLine(text, 3);
            return time.Substring(6, 10).Replace('-', '/');
        };

        static Func&lt;string, string&gt; GetAlias = (path)
             =&gt; $&quot;\naliases:\n    - /{GetTime(path)}/{GetFilesName(path)}/&quot;;

        static void AppendAlias(string newText, string fileName, int line_to_edit)
        {
            string[] arrLine = File.ReadAllLines(fileName);
            arrLine[line_to_edit - 1] += newText;
            File.WriteAllLines(fileName, arrLine);
        }
    }
}

</code></pre>
<p>最后，感谢 MSDN 与 StackOverflow。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/csharp" term="csharp" label="csharp"/><category scheme="https://blog.batkiz.com/tags/hugo" term="hugo" label="hugo"/></entry><entry><title type="html">在 powershell 中无缝调用 wsl 中的 neovim</title><link href="https://blog.batkiz.com/posts/2019/using-wsl-nvim-in-powershell/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2019/lets-roll-to-wsl2/?utm_source=atom_feed" rel="related" type="text/html" title="滚进 wsl2"/><link href="https://blog.batkiz.com/posts/2019/sth-about-hosts-tool-2/?utm_source=atom_feed" rel="related" type="text/html" title="写在 hosts-tool-go 0.1.0 之际"/><link href="https://blog.batkiz.com/posts/2019/migrate-to-hugo-and-automation/?utm_source=atom_feed" rel="related" type="text/html" title="博客迁移至 Hugo 并实现自动化"/><link href="https://blog.batkiz.com/about/?utm_source=atom_feed" rel="related" type="text/html" title="关于"/><link href="https://blog.batkiz.com/posts/2019/c-using-vscode-and-tcc/?utm_source=atom_feed" rel="related" type="text/html" title="使用 VS Code 与 TinyCC 学习 C 语言"/><id>https://blog.batkiz.com/posts/2019/using-wsl-nvim-in-powershell/</id><published>2019-11-30T16:04:34+08:00</published><updated>2019-11-30T16:04:34+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>注 1：neovim 亦可换为 vim</p>
</blockquote>
<blockquote>
<p>注 2：最新版本的 pwsh 脚本请<a href="https://blog.batkiz.com/posts/2020/some-pwsh-scripts/">点此获取</a></p>
</blockquote>
<p>在如今的 Windows 中，wsl 无疑能够极大提升我的开发体验。vim 则是任何人都绕不开的 TUI 编辑器。</p>
<p>不可否认，zsh/bash/fish 等 Linux 下的终端非常便捷好用，但我也是非常喜欢 powershell 的。在 <a href="/2019/09/24/oh-my-powershell/">之前的文章</a> 中，我对 powershell 进行了很多自定义配置，我也越来越离不开 powershell 了。</p>
<p>既然在我的 wsl 中我已经配好了 neovim，如果我再在 Windows 之上配置一份，无疑是多此一举。</p>
<p>那么该如何无缝调用呢？</p>
<h2 id="主要问题">
    主要问题 
    <a href="#%e4%b8%bb%e8%a6%81%e9%97%ae%e9%a2%98" class="anchor-link">#</a>
</h2><ul>
<li>使用 <code>wsl nvim filename</code> 的话过于啰嗦</li>
<li>Windows 中如果使用自动补全路径，文件路径使用的 <code>\</code>，neovim 会将其识别为文件名的一部分</li>
</ul>
<h2 id="解决方案">
    解决方案 
    <a href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88" class="anchor-link">#</a>
</h2><p>话不多说，来看代码：</p>
<pre><code class="language-powershell">function vim {
   param($fileName = '.')
   wsl -e nvim $filename.Replace('\','/').Replace('C:','/mnt/c')
}
</code></pre>
<p>将上面的代码写入 powershell 的配置文件保存（<code>notepad.exe $PROFILE</code>），之后新开一个 powershell 终端，就能无缝体验啦。</p>
<h2 id="对代码的解释">
    对代码的解释 
    <a href="#%e5%af%b9%e4%bb%a3%e7%a0%81%e7%9a%84%e8%a7%a3%e9%87%8a" class="anchor-link">#</a>
</h2><p>下面是解释。</p>
<p>第一行的 <code>function vim</code> 可以视为 Linux 之中的 alias，让我们每次在 powershell 中输入 vim 时，自动转换为下面的命令。</p>
<p>第二行的 <code>param($fileName = '.')</code> 则定义了 <code>vim</code> 所接收的参数，即要编辑的文件名。当未传入参数时，默认传入当前目录。</p>
<p>第三行的 <code>wsl -e nvim $filename.Replace('\','/')</code> 则是真正起作用的代码。<code>$filename.Replace('\','/')</code> 将 <code>\</code> 全部替换为 <code>/</code>，让 wsl 中的 neovim 能够识别我们真正要编辑的文件。<code>wsl -e nvim</code> 则是调用 wsl 中的 neovim 的命令，感兴趣的读者还可阅读 <code>wsl --help</code> 来查看更多用法。</p>
<h2 id="仍存在的问题">
    仍存在的问题 
    <a href="#%e4%bb%8d%e5%ad%98%e5%9c%a8%e7%9a%84%e9%97%ae%e9%a2%98" class="anchor-link">#</a>
</h2><ul>
<li><del>对所要编辑的文件只能使用相对路径，而不能是绝对路径</del>[solved]</li>
</ul>
<p>通过 <code>.Replace('C:','/mnt/c')</code> 将 C 盘的绝对路径转为 wsl 中的相对路径，可实现对绝对路径文件的转译（注：由于本人电脑只有 C 盘，因此并未对其他盘符做兼容处理）</p>
]]></content></entry><entry><title type="html">滚进 wsl2</title><link href="https://blog.batkiz.com/posts/2019/lets-roll-to-wsl2/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2019/oh-my-powershell/?utm_source=atom_feed" rel="related" type="text/html" title="oh my powershell"/><link href="https://blog.batkiz.com/posts/2018/using-scoop/?utm_source=atom_feed" rel="related" type="text/html" title="初探 Scoop"/><link href="https://blog.batkiz.com/posts/2018/using-wsl/?utm_source=atom_feed" rel="related" type="text/html" title="wsl 使用指北"/><link href="https://blog.batkiz.com/posts/2018/solving-cmder-space/?utm_source=atom_feed" rel="related" type="text/html" title="解决 cmder 光标问题"/><link href="https://blog.batkiz.com/posts/2018/how-to-play-minecrafet-with-xbox-controller/?utm_source=atom_feed" rel="related" type="text/html" title="如何使用Xbox手柄玩Minecraft"/><id>https://blog.batkiz.com/posts/2019/lets-roll-to-wsl2/</id><published>2019-11-06T23:23:42+08:00</published><updated>2019-11-06T23:23:42+08:00</updated><content type="html"><![CDATA[<p>本文已于 2020/05/26 更新，过时的信息已用删除线标注。</p>
<p><del>我是真没想到这都快过半年了 20H1 还没释出稳定版</del></p>
<p>早在今年上半年的 Build 2019 上，微软<a href="https://devblogs.microsoft.com/commandline/announcing-wsl-2/">宣布了 wsl2</a>，使得 wsl 不再只是 system call 的翻译，而是切切实实跑在一个<strong>真正的</strong> Linux 内核之上。这样一来，wsl 将不再受内核的局限，能够运行 docker 等与 Linux kernel 密切相关的软件。</p>
<p>自宣布以来，wsl2 的开发很快提上日程，并将在 Windows 10 20H1 版本中可用。<del>但想要升级至此版本，目前还需进入预览体验计划，而 Windows 10 目前的 bug 数量使我对 insider fast ring 望而却步。</del> 最近在经过了很长时间的心理斗争之后，我最终还是进入了快速预览版，开始体验 wsl2，下面是途中遇到的一些坑，留存至此，以备后来者避坑。</p>
<p>首先需要说明的是，wsl1 与 wsl2 各有优劣，两者之间并非常规意义上的「升级」，更像是一种并行。如果并非是涉及内核等问题，仅仅是执行一些上层程序，我个人建议继续使用 wsl1，这样更加节省内存等资源。（当然可以 wsl1 与 wsl2 各安装一个/多个，按需启动）</p>
<h2 id="安装">
    安装 
    <a href="#%e5%ae%89%e8%a3%85" class="anchor-link">#</a>
</h2><p>安装过程参考官方的 <a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-install">WSL 2 的安装说明</a> 即可。</p>
<p>首先滚入 20H1 的预览版，升级系统，而后开启 hyper-v 平台，跑一个命令将原本的 wsl1 转为 wsl2 即可。更改的过程可能要花几分钟时间，等待就好。</p>
<p>之后就能开始使用 wsl2 啦！</p>
<h2 id="各种坑">
    各种坑 
    <a href="#%e5%90%84%e7%a7%8d%e5%9d%91" class="anchor-link">#</a>
</h2><p>……当然，路途不总是一帆风顺的，而是伴随着艰难险阻。</p>
<h3 id="虚拟机">
    虚拟机 
    <a href="#%e8%99%9a%e6%8b%9f%e6%9c%ba" class="anchor-link">#</a>
</h3><p><del>由于 VMware 暂未支持嵌套虚拟化，所以开启了 hyper-v 之后，将无法继续使用 VMware 虚拟机。虽然 hyper-v 本身也能装个虚拟机应个急，但体验确实是远远不如 VMware 的。</del></p>
<p>VMware 20H1 技术预览版已支持嵌套虚拟化，可以与 hyper-v 共存，更多信息与下载链接等请 <a href="https://blogs.vmware.com/workstation/2020/01/vmware-workstation-tech-preview-20h1.html">点击此处</a>。</p>
<h3 id="terminal">
    terminal 
    <a href="#terminal" class="anchor-link">#</a>
</h3><p><del>另外就是终端问题了。</del></p>
<p><del>我在 wsl1 时期一直使用的终端 wsl-terminal 由于很久没有更新，所以并没有支持 wsl2，但见鬼的是我升级完之后 wsl1 也没办法用了……不过好在还有 windows terminal 这个官方的终端可以使用（虽然现在还不能输入中文有点难受）。</del></p>
<p><del>有一个方法则是可以先启动 powershell，然后通过命令行启动 wsl2。</del></p>
<p><a href="https://github.com/mskyaxl/wsl-terminal">wsl-terminal</a> 与 <a href="https://github.com/mintty/wsltty">wsl-tty</a> 均已支持 wsl2。但由于 windows terminal 的卓越体验（现已支持中文输入），我更为推荐使用 windows terminal 作为 wsl 的终端。感兴趣的可以参考一下 <a href="https://github.com/batkiz/dotfiles/blob/master/wt/settings.json">我的 windows terminal 配置</a>。</p>
<h3 id="代理">
    代理 
    <a href="#%e4%bb%a3%e7%90%86" class="anchor-link">#</a>
</h3><p>安装了 hyper-v 之后，会将一系列端口划入保留端口之中，其中就包括了某软件的默认端口 1080。解决方法也很简单，换一个高位端口即可。（各种配置里的更改就是一项大工程了）</p>
<p>但真正吊诡则是，在我最初试用 hyper-v 时并未出现这个情况，开始使用 wsl2 后才发生……</p>
<p>此外，wsl2 与 windows 之间存在着网络隔离，虽然 wsl 团队已全力优化但还存在着一些可能会影响体验的问题。如在 windows 中可用 <code>localhost</code> 直接访问 wsl2 的 <code>localhost</code>，但反之则不行。</p>
<p>如果想要在 wsl 中利用 windows 本身的代理，可以在 <code>~/.zshrc</code> 或 <code>~/.bashrc</code> 中写入以下配置（我并不熟悉 fish 所以请 fish 用户自己改改吧）：</p>
<pre><code class="language-bash"># wsl 2 中请启用下面这一行
# export hostip=$(cat /etc/resolv.conf | grep -oP '(?&lt;=nameserver\ ).*')
# wsl 1 中请启用下面这一行
# export hostip=&quot;127.0.0.1&quot;
# 请将 1080 换为自己代理软件的端口
alias socks=&quot;http_proxy=http://${hostip}:1080 https_proxy=http://${hostip}:1080 &quot;
</code></pre>
<p><code>source ~/.zshrc</code> 之后即可通过 <code>socks command params</code> 来在 shell 中临时使用代理。</p>
<h3 id="systemd">
    systemd 
    <a href="#systemd" class="anchor-link">#</a>
</h3><p><strong>警告：作者本人已不在 wsl 2 中使用 docker 与 genie，本部分可能存在不可预知的错误，请审慎阅读。</strong></p>
<p>由于 wsl2 的第一个（<code>PID=1</code>）进程是维持 windows 与 wsl2 通信等所需的 <code>init</code>，因此 systemd 无法以 PID=1 启动，直接无法使用。</p>
<p>但是，人民群众造轮子的热情是不可磨灭的（误），我们可以用 <a href="https://github.com/arkane-systems/genie">genie</a> 来使用 systemd。</p>
<p>genie 的安装过程不再赘述，紧随官方文档或者使用 aur 即可。需要注意的是，genie 需要 dotnet 被引入环境变量，只需在你正使用的 shell 的配置文件（如 zsh 的 <code>~/.zshrc</code> ）中加入 <code>export DOTNET_ROOT=/opt/dotnet</code> 并 <code>source</code> 之以应用即可。</p>
<p>此外，由于其实现原理，最好将宿主机上自定义的 hosts 文件清空，以防出现问题。</p>
<p>安装成功之后，只需执行 <code>genie -s</code> ，systemd 即可正常使用。</p>
<h3 id="docker">
    docker 
    <a href="#docker" class="anchor-link">#</a>
</h3><p>在 systemd 这一问题解决之后，docker 的安装与使用非常简单。</p>
<p><code>yay docker</code> 安装之后，只需通过 <code>systemctl</code> 启用其服务即可，换源等不再赘述。</p>
<h2 id="after">
    after 
    <a href="#after" class="anchor-link">#</a>
</h2><p>其实在这一套安装下来之后，甚至感觉有点没啥用（？</p>
]]></content><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/><category scheme="https://blog.batkiz.com/tags/wsl" term="wsl" label="wsl"/></entry><entry><title type="html">写在 hosts-tool-go 0.1.0 之际</title><link href="https://blog.batkiz.com/posts/2019/sth-about-hosts-tool-2/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2019/sth-about-hosts-tool/?utm_source=atom_feed" rel="related" type="text/html" title="关于 hosts-tool 的一些事"/><link href="https://blog.batkiz.com/posts/2019/migrate-to-hugo-and-automation/?utm_source=atom_feed" rel="related" type="text/html" title="博客迁移至 Hugo 并实现自动化"/><link href="https://blog.batkiz.com/about/?utm_source=atom_feed" rel="related" type="text/html" title="关于"/><link href="https://blog.batkiz.com/posts/2019/c-using-vscode-and-tcc/?utm_source=atom_feed" rel="related" type="text/html" title="使用 VS Code 与 TinyCC 学习 C 语言"/><link href="https://blog.batkiz.com/posts/2019/oh-my-powershell/?utm_source=atom_feed" rel="related" type="text/html" title="oh my powershell"/><id>https://blog.batkiz.com/posts/2019/sth-about-hosts-tool-2/</id><published>2019-10-24T23:59:34+08:00</published><updated>2019-10-24T23:59:34+08:00</updated><content type="html"><![CDATA[<p>不知不觉，自 <a href="https://github.com/batkiz/hosts-tool-go/commit/e460d9ce228172e33f8504960a1bb917d5b311a9">第一个 commit</a> 算起，时间已经过去了四个多月。实际的开始开发时间自然要更早一些。host-tool-go 也慢慢变得更加可用，版本号也刷到了 0.1.0。</p>
<p>到现在，在 <a href="https://blog.batkiz.com/2019/06/17/sth-about-hosts-tool/">上一篇文章</a> 中所计划的三个功能也已一一实现：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> local hosts 功能，暂定是搞个 <code>local</code> 文件和 config 文件放一块</li>
<li><input checked="" disabled="" type="checkbox"> home 功能，<code>hosts-tool-go home NAME</code> 来直接浏览器打开这个 hosts 源</li>
<li><input checked="" disabled="" type="checkbox"> 无任何命令行参数附加打开时搞出一个交互式的命令行</li>
</ul>
<h2 id="开发过程">
    开发过程 
    <a href="#%e5%bc%80%e5%8f%91%e8%bf%87%e7%a8%8b" class="anchor-link">#</a>
</h2><p>这里记录一些写 go 语言时的小技巧</p>
<pre><code class="language-go">// TODO
// （其实大家都知道 TODO 列表里的事情永远都不会办的对吧
</code></pre>
<p>事实上这个在闲暇之余写的小软件已经完全地满足了我自己的需求，我甚至有点就此封存、甩手不干的冲动。</p>
<p>但说实话，这个小软件还有很多缺点：</p>
<ul>
<li>丑陋的实现</li>
<li>毫无错误处理</li>
<li>没有用上的 API</li>
<li>一团糟的代码管理</li>
<li>词不达意的变量名</li>
<li>etc.</li>
</ul>
<p>所以我还会继续写下去，一步步重构、重写，慢慢完善。</p>
<h2 id="roadmap">
    ROADMAP 
    <a href="#roadmap" class="anchor-link">#</a>
</h2><p>按照惯例，文章最后我会列出目前所规划的一些东西，具体如下：</p>
<ul>
<li><input disabled="" type="checkbox"> 启动时自动请求 admin/root 权限，省的每次都 <code>sudo</code> 了</li>
<li><input disabled="" type="checkbox"> 使用 goroutine 并行进行各个源的更新</li>
<li><input disabled="" type="checkbox"> 组织代码存放目录与 <code>package</code> 信息</li>
<li><input disabled="" type="checkbox"> 重构代码</li>
<li><input disabled="" type="checkbox"> 添加单元测试</li>
<li><input disabled="" type="checkbox"> 完善错误处理（Go 2 释出之后）</li>
</ul>
<hr>
<p>by <em>batkiz</em> ，2019 年 10 月 24 日夜。</p>
]]></content><category scheme="https://blog.batkiz.com/categories/hosts-tool-go" term="hosts-tool-go" label="hosts-tool-go"/><category scheme="https://blog.batkiz.com/tags/golang" term="golang" label="golang"/><category scheme="https://blog.batkiz.com/tags/hosts" term="hosts" label="hosts"/></entry><entry><title type="html">博客迁移至 Hugo 并实现自动化</title><link href="https://blog.batkiz.com/posts/2019/migrate-to-hugo-and-automation/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/about/?utm_source=atom_feed" rel="related" type="text/html" title="关于"/><link href="https://blog.batkiz.com/posts/2019/c-using-vscode-and-tcc/?utm_source=atom_feed" rel="related" type="text/html" title="使用 VS Code 与 TinyCC 学习 C 语言"/><link href="https://blog.batkiz.com/posts/2019/oh-my-powershell/?utm_source=atom_feed" rel="related" type="text/html" title="oh my powershell"/><link href="https://blog.batkiz.com/posts/2019/sth-about-hosts-tool/?utm_source=atom_feed" rel="related" type="text/html" title="关于 hosts-tool 的一些事"/><link href="https://blog.batkiz.com/posts/2019/git-behind-proxy/?utm_source=atom_feed" rel="related" type="text/html" title="为 Git 配置代理"/><id>https://blog.batkiz.com/posts/2019/migrate-to-hugo-and-automation/</id><published>2019-10-20T22:01:44+08:00</published><updated>2019-10-20T22:01:44+08:00</updated><content type="html"><![CDATA[<p>好久不见！</p>
<p>自 6 月以来，本人虽然没什么产出，但怎奈没动力写博客，至今只写了两篇不疼不痒的综述文章。但今天（2019/10/20）偶然在 v2ex 上看到了 <a href="https://www.v2ex.com/t/611063">hexo 释出 4.0 版本</a> 的消息，而后想到自己曾数次想要脱离贵前端生态圈，摆脱令人脑壳痛的依赖问题，实现博客自动化等等等等事情。</p>
<p>于是，我趁着今天是闲暇的周日，把一切事情办好了。</p>
<p>下面是过程复现与总结。</p>
<h2 id="hugo">
    Hugo 
    <a href="#hugo" class="anchor-link">#</a>
</h2><p>其实最早我并不是太想换到 Hugo 的，但奈何自己想要写一个静态博客生成器的计划一直提不上日程…… 便选择了这个解决方案。</p>
<p>之后是主题的选择。由于 Hugo 的主题生态圈较之 Hexo 仍较为匮乏，因此选择并不多。经过我在各种网站上的搜罗与比较，下面列出我较为偏向的选择：</p>
<ul>
<li>Maupassant，这个是我在 Hexo 上一直使用的主题，但 Hugo 上的移植版我不太满意，pass。</li>
<li><a href="https://linw1995.com/">https://linw1995.com/</a>，这个主题我十分喜欢，但由于没有提供主题的 repo，只能作罢。</li>
<li><a href="https://github.com/liuzc/LeaveIt">LeaveIt</a>，这个主题看着还行，但太久没维护，都没办法用……</li>
<li><a href="https://github.com/Fastbyte01/KeepIt">KeepIt</a>，这个是上面 LeaveIt 的 fork，也是我最终的选择。</li>
</ul>
<p>但由于 KeepIt 的功能还是不太能满足我的需求，因此我又 fork 了一份，作为自用。地址 <a href="https://github.com/batkiz/left">batkiz/left</a></p>
<h2 id="开始迁移">
    开始迁移 
    <a href="#%e5%bc%80%e5%a7%8b%e8%bf%81%e7%a7%bb" class="anchor-link">#</a>
</h2><p>整个迁移过程中，我最在意的是该死的 <strong>兼容性</strong> ，即，我新生成的博客要与之前的博客在整体行为上没有太大变化，下面就是在保证兼容性前提下的迁移过程。</p>
<h3 id="链接">
    链接 
    <a href="#%e9%93%be%e6%8e%a5" class="anchor-link">#</a>
</h3><p>之前的链接不能直接 404，让读者找不到文章（虽然原来就没啥读者），不能造成割裂行为。</p>
<p>Hexo 默认的链接生成方法为 <code>/:year/:month/:day/:filename/</code>，而 Hugo 的则为 <code>/:year/:filename/</code>。</p>
<p>解决很简单，修改为相同的即可。</p>
<h3 id="rss">
    RSS 
    <a href="#rss" class="anchor-link">#</a>
</h3><p>之前在 hexo 之上构建时，我采用的 hexo 插件是生成出 <code>atom.xml</code> 文件的，而在新的主题下生成的则是 <code>index.xml</code>。</p>
<p>解决方法：在 <code>config.toml</code> 中加入下列内容</p>
<pre><code class="language-toml">[outputs]
  home = [&quot;Atom&quot;, &quot;HTML&quot;]

[outputFormats.Atom]
  mediatype = &quot;application/rss&quot;
  baseName = &quot;atom&quot;
</code></pre>
<p>即可生成 <code>atom.xml</code> 文件作为 RSS feed。</p>
<p>在成功解决上述兼容性问题之后，新问题随之而来：<strong>为什么生成的 xml 里 tmd 没有内容？</strong></p>
<p>为解决此问题，我试着看了看源码，但看不懂（</p>
<p>接着我试了试 Google，感谢 <a href="https://github.com/kaushalmodi/hugo-atom-feed">kaushalmodi</a> 的代码，我用它覆盖了 <code>index.atom.xml</code> 之后便成功部署了正确的 RSS，简单修改（将默认的只生成最近 6 条增加到 20）之后便符合了需求。</p>
<h3 id="mathjax">
    mathjax 
    <a href="#mathjax" class="anchor-link">#</a>
</h3><p>虽然我平时很少输入数学公式，但这个功能也不能少！</p>
<p>首先我尝试了将 mathjax 的支持直接写入 head/footer/js 等几个模板，但，还是没用（即使我已经在源码中看到了 mathjax 的支持代码）。</p>
<p>接下来仍然是 Google。</p>
<p>感谢 <a href="http://weibo.com/u/2837672545">匿蟒</a>，我在 <a href="https://note.qidong.name/2018/03/hugo-mathjax/">在 Hugo 中使用 MathJax</a> 一文中找到了解决方案，即下述方法：</p>
<p>在添加 <a href="https://www.mathjax.org/">MathJax</a> 时，把所有修改写成了一个 <code>layouts/partials/mathjax.html</code> 文件：</p>
<pre><code class="language-html">&lt;script
  type=&quot;text/javascript&quot;
  async
  src=&quot;https://cdn.bootcss.com/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;
&gt;
  MathJax.Hub.Config({
      &quot;HTML-CSS&quot;: {preferredFont: &quot;TeX&quot;, availableFonts: [&quot;STIX&quot;, &quot;TeX&quot;], linebreaks: { automatic: true }, EqnChunk: (MathJax.Hub.Browser.isMobile ? 10 : 50) },
      tex2jax: {inlineMath: [[&quot;$&quot;, &quot;$&quot;], [&quot;\\(&quot;, &quot;\\)&quot;]], processEscapes: true, ignoreClass: &quot;tex2jax_ignore|dno&quot;, skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code'] },
      TeX: {noUndefined: { attributes: { mathcolor: &quot;red&quot;, mathbackground: &quot;#FFEEEE&quot;, mathsize: &quot;90%&quot;} }, Macros: { href: &quot;{}&quot; } },
      messageStyle: &quot;none&quot;
  });

  MathJax.Hub.Queue(function () {
      var all = MathJax.Hub.getAllJax(), i;
      for (i = 0; i &lt; all.length; i += 1) {
          all[i].SourceElement().parentNode.className += 'has-jax';
      }
  });
&lt;/script&gt;

&lt;style&gt;
  code.has-jax {
    font: inherit;
    font-size: 100%;
    background: inherit;
    border: inherit;
    color: #515151;
  }
&lt;/style&gt;
</code></pre>
<p>这里，把官网的三处修改合并成一个 partial。 此外，还把 <a href="https://www.mathjax.org/">MathJax</a> 的 CDN 从 <code>cdnjs.cloudflare.com</code> 替换成了 <code>cdn.bootcss.com</code>，更好地支持国内。</p>
<p>把这个 partial 模板添加到 <code>&lt;head&gt;</code> 中，即可正常工作。</p>
<pre><code class="language-html">{{partial &quot;mathjax.html&quot; .}}
</code></pre>
<h3 id="frontmatter">
    frontmatter 
    <a href="#frontmatter" class="anchor-link">#</a>
</h3><p>Hugo 支持 toml, yml 与 json 格式的 frontmatter，但与 Hexo 的 yml frontmatter 又有所不同。</p>
<p>Hugo 中的 tags 的形式应为</p>
<pre><code class="language-yml">tags:
  - hello
  - world
  - etc
</code></pre>
<p>即使只有一个 tag ，也要按此格式来写，否则会编译错误。</p>
<p>此外还有 title 的值应被包裹在括号之中等。</p>
<p>另外，hexo 中的 time 项可不用修改，Hugo 似乎已支持了此种格式。</p>
<h2 id="版本控制与自动化">
    版本控制与自动化 
    <a href="#%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6%e4%b8%8e%e8%87%aa%e5%8a%a8%e5%8c%96" class="anchor-link">#</a>
</h2><p>很久之前也曾想过要实现博客的云同步与自动化部署，但当时没有余力去做，今天趁着迁移博客，顺带利用 GitHub actions 实现自动化。</p>
<h3 id="版本控制">
    版本控制 
    <a href="#%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6" class="anchor-link">#</a>
</h3><p>首先是对内容（markdown 文件）的版本控制。</p>
<p>对 <code>hugo new site .</code> 生成出来的文件夹，使用 <code>git init</code> ，并添加以下的 <code>.gitignore</code> 信息：</p>
<pre><code class="language-gitignore">/archetypes/
/data/
/layouts/
/public/
/resources/
/static/
/themes/
</code></pre>
<p>这样的话，只有下面两项被加入了版本控制之中：</p>
<ul>
<li><code>content/</code>，这个是文章所在的文件夹</li>
<li><code>config.toml</code>，这个是 hugo 的配置文件</li>
</ul>
<p>之后可以将此目录推向 GitHub，进行文章的版本控制与部署的自动化。</p>
<h3 id="自动化">
    自动化 
    <a href="#%e8%87%aa%e5%8a%a8%e5%8c%96" class="anchor-link">#</a>
</h3><p>Hugo 的无依赖特性、配置都写在根目录下的 config.toml 文件中的功能与 GitHub Actions 的出现，使得文章自动部署变得极为简单。毫不夸张的说，在最初的配置之后，我们可以专注于文章的内容，本地甚至不需要有 Hugo 的存在。</p>
<p>下面是 GitHub Actions 的 workflow，详情请看注释。</p>
<pre><code class="language-yml">name: blog

on: [push]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # 使用预编译的 Hugo 二进制文件
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2.2.2
        with:
          hugo-version: &quot;latest&quot;
          # 使用 Hugo-extended 版本
          extended: true

      # 新建站点
      - name: new site
        run: |
          hugo new site $HOME/blog

      # 获取主题
      - name: get theme
        run: |
          git clone --depth=1 https://github.com/batkiz/left.git $HOME/blog/themes/left

      # 获取 username.github.io 以保持 commit 记录
      - name: get username.github.io
        run: |
          git clone --no-checkout https://github.com/batkiz/batkiz.github.io.git $HOME/blog/public

      # 获取内容文件
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1

      # 将内容文件复制进入站点内
      - name: copy in
        run: |
          rm -rf $HOME/blog/config.toml $HOME/blog/content/
          /bin/cp -rf config.toml $HOME/blog/config.toml
          /bin/cp -rf content/ $HOME/blog/content/

      # build
      - name: build
        run: |
          cd $HOME/blog
          HUGO_ENV=production hugo --gc --minify

      # 将生成出的站点推向 username.github.io
      - name: publish
        env:
          USER: batkiz
          EMAIL: batkiz@outlook.com
          GH_REF: github.com/batkiz/batkiz.github.io.git
          # 这里的 token 需要自己在 GitHub settings 中部署，并利用 actions 的 secrets 功能
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          cd $HOME/blog/public
          git config --global user.name $USER
          git config --global user.email $EMAIL
          git add .
          git commit -m &quot;Auto Update: `date +'%Y-%m-%d %H:%M:%S'`&quot;
          git push &quot;https://$USER:$GH_TOKEN@$GH_REF&quot; master:master
</code></pre>
<p>感谢 <a href="https://github.com/peaceiris/actions-hugo">https://github.com/peaceiris/actions-hugo</a> 提供的可在 GitHub actions 使用的 Hugo 二进制文件，避免了每次都手动编译 Hugo。</p>
<p>另外希望大家别不看内容就随便写，会出 typo 的，然后 failed（泪</p>
<h2 id="结语">
    结语 
    <a href="#%e7%bb%93%e8%af%ad" class="anchor-link">#</a>
</h2><p>经过一个下午 + 一个晚上的努力，终于成功地把博客迁移到了 Hugo，并实现了内容的版本管理与自动化部署。可喜可贺，可喜可贺。</p>
<p>接下来大概会抽空将以前的文章格式调整一下（Hugo 的 markdown 不知道是用啥解析的，写的随意的话不会按你想的那样渲染），以及自己写一个 Hugo 的主题。</p>
<p>see you later.</p>
]]></content><category scheme="https://blog.batkiz.com/tags/hugo" term="hugo" label="hugo"/></entry><entry><title type="html">使用 VS Code 与 TinyCC 学习 C 语言</title><link href="https://blog.batkiz.com/posts/2019/c-using-vscode-and-tcc/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2019/oh-my-powershell/?utm_source=atom_feed" rel="related" type="text/html" title="oh my powershell"/><link href="https://blog.batkiz.com/posts/2019/sth-about-hosts-tool/?utm_source=atom_feed" rel="related" type="text/html" title="关于 hosts-tool 的一些事"/><link href="https://blog.batkiz.com/posts/2019/git-behind-proxy/?utm_source=atom_feed" rel="related" type="text/html" title="为 Git 配置代理"/><link href="https://blog.batkiz.com/posts/2019/advice-to-new-programmers/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | 给新手程序员们的建议"/><link href="https://blog.batkiz.com/posts/2019/xatuctf2019-wp/?utm_source=atom_feed" rel="related" type="text/html" title="xatuctf2019 校赛 writeup"/><id>https://blog.batkiz.com/posts/2019/c-using-vscode-and-tcc/</id><published>2019-10-06T15:56:43+00:00</published><updated>2019-10-06T15:56:43+00:00</updated><content type="html"><![CDATA[<p>本文不对其他 C 语言的 (editor || IDE || compiler) 作评价，仅分享一个方案。</p>
<h2 id="vs-code">
    VS Code 
    <a href="#vs-code" class="anchor-link">#</a>
</h2><p>下载安装 <a href="https://code.visualstudio.com/">VS Code</a>。</p>
<p>安装下列扩展</p>
<ul>
<li>C/C++ <code>ms-vscode.cpptools</code></li>
<li>TCC Compiler <code>lihram.vscode-tcc-compiler</code></li>
</ul>
<h2 id="使用">
    使用 
    <a href="#%e4%bd%bf%e7%94%a8" class="anchor-link">#</a>
</h2><p>于任意路径新建 <code>tmp</code> 文件夹，使用 VS Code 打开。</p>
<p>新建 <code>hello.c</code> 文件，并写入下列内容</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main(void)
{
    printf(&quot;Hello World.\n&quot;);
    printf(&quot;你好世界。&quot;);
    return 0;
}
</code></pre>
<p>保存后按下 <code>F1</code> 键，输入 <code>tcc</code>，找到 <code>TCC: Run</code> 项，回车，可看到下面的 terminal 被唤起，并输出下列信息</p>
<pre><code class="language-text">Hello World.
你好世界。
</code></pre>
<p>如此，基本的开发环境便配置完成，enjoy!</p>
<h2 id="疑难解答">
    疑难解答 
    <a href="#%e7%96%91%e9%9a%be%e8%a7%a3%e7%ad%94" class="anchor-link">#</a>
</h2><ul>
<li>
<p>why TCC?<br>
在 Windows 平台上，gcc, clang 的安装过于复杂，且所占空间较大，而 TCC 仅几百余 k，安装扩展后即可使用。而且 TCC 完全支持 ANSI C，且对 C99 的特性大部分都支持，仅对学习来说，完全够用。</p>
</li>
<li>
<p>输出中文乱码如何解决？<br>
在 VS Code 的配置文件中加入 <code>&quot;terminal.integrated.shellArgs.windows&quot;: [&quot;-NoExit&quot;, &quot;/c&quot;, &quot;chcp 65001&quot;]</code>，或<a href="https://www.zhihu.com/question/54724102/answer/380875686">这样</a></p>
</li>
</ul>
]]></content><category scheme="https://blog.batkiz.com/tags/vscode" term="vscode" label="vscode"/></entry><entry><title type="html">oh my powershell</title><link href="https://blog.batkiz.com/posts/2019/oh-my-powershell/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2018/using-scoop/?utm_source=atom_feed" rel="related" type="text/html" title="初探 Scoop"/><link href="https://blog.batkiz.com/posts/2018/using-wsl/?utm_source=atom_feed" rel="related" type="text/html" title="wsl 使用指北"/><link href="https://blog.batkiz.com/posts/2018/solving-cmder-space/?utm_source=atom_feed" rel="related" type="text/html" title="解决 cmder 光标问题"/><link href="https://blog.batkiz.com/posts/2018/how-to-play-minecrafet-with-xbox-controller/?utm_source=atom_feed" rel="related" type="text/html" title="如何使用Xbox手柄玩Minecraft"/><link href="https://blog.batkiz.com/posts/2017/software-on-my-computer/?utm_source=atom_feed" rel="related" type="text/html" title="我的电脑软件"/><id>https://blog.batkiz.com/posts/2019/oh-my-powershell/</id><published>2019-09-24T22:43:46+00:00</published><updated>2019-09-24T22:43:46+00:00</updated><content type="html"><![CDATA[<blockquote>对 *nix 平台上的 oh-my-zsh 的绝赞复刻！</blockquote><p>对 *nix 平台上的 oh-my-zsh 的绝赞复刻！</p>
<p>备受好评的 shell 配置，来到了 powershell 之上~</p>
<h2 id="requirements">
    requirements 
    <a href="#requirements" class="anchor-link">#</a>
</h2><ul>
<li><code>set-executionpolicy remotesigned</code> 执行策略更改，以执行脚本、安装应用</li>
<li><a href="scoop.sh">scoop</a></li>
</ul>
<h2 id="installation">
    installation 
    <a href="#installation" class="anchor-link">#</a>
</h2><pre><code class="language-ps">Install-Module posh-git -Scope CurrentUser
Install-Module oh-my-posh -Scope CurrentUser
</code></pre>
<pre><code class="language-ps">scoop install scoop-completion
</code></pre>
<p>亦可均由 scoop 安装，即</p>
<pre><code class="language-ps">scoop install scoop-completion
scoop install oh-my-posh
scoop install posh-git
</code></pre>
<h2 id="配置">
    配置 
    <a href="#%e9%85%8d%e7%bd%ae" class="anchor-link">#</a>
</h2><p>配置文件为 <code>~\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1</code>，若不存在请自行创建。</p>
<p>写入下列内容并保存：</p>
<pre><code class="language-ps">Import-Module posh-git
Import-Module oh-my-posh
Set-Theme PowerLine
</code></pre>
<h2 id="more-things">
    more things 
    <a href="#more-things" class="anchor-link">#</a>
</h2><ul>
<li>我的 profile 文件与自己写的主题 <a href="https://github.com/batkiz/dotfiles/tree/master/powershell">dotfiles/powershell</a></li>
<li>最好用 Windows Terminal 作为终端</li>
</ul>
]]></content><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/><category scheme="https://blog.batkiz.com/tags/powershell" term="powershell" label="powershell"/></entry><entry><title type="html">关于 hosts-tool 的一些事</title><link href="https://blog.batkiz.com/posts/2019/sth-about-hosts-tool/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2019/git-behind-proxy/?utm_source=atom_feed" rel="related" type="text/html" title="为 Git 配置代理"/><link href="https://blog.batkiz.com/posts/2019/advice-to-new-programmers/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | 给新手程序员们的建议"/><link href="https://blog.batkiz.com/posts/2019/xatuctf2019-wp/?utm_source=atom_feed" rel="related" type="text/html" title="xatuctf2019 校赛 writeup"/><link href="https://blog.batkiz.com/posts/2018/using-scoop/?utm_source=atom_feed" rel="related" type="text/html" title="初探 Scoop"/><link href="https://blog.batkiz.com/posts/2018/where-vim-came-from/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | Vim 的诞生"/><id>https://blog.batkiz.com/posts/2019/sth-about-hosts-tool/</id><published>2019-06-17T19:10:57+00:00</published><updated>2019-06-17T19:10:57+00:00</updated><content type="html"><![CDATA[<h2 id="前置">
    前置 
    <a href="#%e5%89%8d%e7%bd%ae" class="anchor-link">#</a>
</h2><p>由于平时有些修改 hosts 文件的需求（屏蔽广告啦），所以之前一直在用 <a href="https://github.com/oldj/SwitchHosts/">SwitchHosts!</a> 来自动下载远程 hosts 文件。</p>
<p>但 SwitchHosts! 还是有几点不尽如人意的地方：</p>
<ul>
<li>由 Electron 与 JavaScript 开发</li>
<li><a href="https://github.com/oldj/SwitchHosts/issues/334">每次开启均会使用一个一个名为 SnoreToast 的软件</a></li>
<li>不能做到随用随开，用完就关，需要手动在托盘处关闭后台</li>
</ul>
<p>上面这些其实都在能忍受的范围内，毕竟 <em>又不是不能用</em> ，而且也没有其他合适的轮子，将就着也还能用。
但是！近期（也都两三个月了）直接不能用了。直接不能从远端下载更新 hosts 文件了，加上我瞅着<a href="https://github.com/oldj/SwitchHosts/commits/master">作者也不活跃开发了</a>，迫不得已，只好自己造轮子。</p>
<p>最开始时是用的 dotnet core C# 来写的，名为 hosts-tool，代码已基本可用，奈何我对 OO 不甚了解，后面的功能无法继续增加，也就未开源。加上种种原因，一直勉强用着。</p>
<p>后来，我学了 golang，由于其编译出来的可执行程序是单文件，所以使用 go 来重写 hosts-tool 势在必行。</p>
<h2 id="重写">
    重写 
    <a href="#%e9%87%8d%e5%86%99" class="anchor-link">#</a>
</h2><p>刚开始重写实际上是简单的把 C# 的函数写成 go 语言版本的。后来开始使用各种库、考虑跨平台。</p>
<p>下面是一些写代码过程中得到的经验与吐槽。</p>
<ul>
<li>为什么 args 里第一个是 <code>c.Args().First()</code> 第二个却是 <code>c.Args().Get(1))</code> 。都用 <code>c.Args().Get())</code> 之后从零数也不至于让人这么迷惑。</li>
<li>将 aurora 以 <code>. &quot;github.com/logrusorgru/aurora&quot;</code> 方式引入经常会打印出来一些奇怪的字符。</li>
<li>错误处理太烦人了。</li>
<li>写入配置文件记得用 <code>os.O_TRUNC</code> 截断。</li>
</ul>
<h2 id="roadmap">
    ROADMAP 
    <a href="#roadmap" class="anchor-link">#</a>
</h2><p>下面是一些想起来了但暂时没动力写的功能</p>
<ul>
<li><input disabled="" type="checkbox"> local hosts 功能，暂定是搞个 <code>local</code> 文件和 config 文件放一块</li>
<li><input disabled="" type="checkbox"> home 功能，<code>hosts-tool-go home NAME</code> 来直接浏览器打开这个 hosts 源</li>
<li><input disabled="" type="checkbox"> 无任何命令行参数附加打开时搞出一个交互式的命令行</li>
</ul>
<p>慢慢摸咯，想起来时再写 23333</p>
]]></content><category scheme="https://blog.batkiz.com/categories/hosts-tool-go" term="hosts-tool-go" label="hosts-tool-go"/><category scheme="https://blog.batkiz.com/tags/golang" term="golang" label="golang"/><category scheme="https://blog.batkiz.com/tags/hosts" term="hosts" label="hosts"/></entry><entry><title type="html">为 Git 配置代理</title><link href="https://blog.batkiz.com/posts/2019/git-behind-proxy/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2019/advice-to-new-programmers/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | 给新手程序员们的建议"/><link href="https://blog.batkiz.com/posts/2019/xatuctf2019-wp/?utm_source=atom_feed" rel="related" type="text/html" title="xatuctf2019 校赛 writeup"/><link href="https://blog.batkiz.com/posts/2018/using-scoop/?utm_source=atom_feed" rel="related" type="text/html" title="初探 Scoop"/><link href="https://blog.batkiz.com/posts/2018/where-vim-came-from/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | Vim 的诞生"/><link href="https://blog.batkiz.com/posts/2018/oh-the-old-days/?utm_source=atom_feed" rel="related" type="text/html" title="考古 | 不知纸外几春秋"/><id>https://blog.batkiz.com/posts/2019/git-behind-proxy/</id><published>2019-05-26T16:39:16+00:00</published><updated>2019-05-26T16:39:16+00:00</updated><content type="html"><![CDATA[<p>加速境外 git 服务托管网站速度。</p>
<h2 id="操作">
    操作 
    <a href="#%e6%93%8d%e4%bd%9c" class="anchor-link">#</a>
</h2><p>首先确保本地已开启 ss 或 ssr。
而后命令行执行如下命令。</p>
<pre><code class="language-bash">git config --global http.proxy 'http://127.0.0.1:1080'
git config --global https.proxy 'http://127.0.0.1:1080'
</code></pre>
<h2 id="原理">
    原理 
    <a href="#%e5%8e%9f%e7%90%86" class="anchor-link">#</a>
</h2><p>在大多数 git 代理相关文章中，均配置的是 <code>socks5://127.0.0.1:1080</code> 进行代理。这样虽然速度确实增加了，但由于 协议并不支持 socks5 协议，每次 git push 操作时还需要手动输入账户密码，不能通过 ssh key 来登录，非常影响体验。</p>
<p>ss/ssr 使用的是 socks5 协议，为使 http 协议也经过代理，均自带了 privoxy 将 socks5 协议 转换为 http 协议。因此我们可以直接设置为 <code>http://127.0.0.1:1080</code>，问题得以解决。</p>
<hr>
<h2 id="注意事项">
    注意事项 
    <a href="#%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9" class="anchor-link">#</a>
</h2><ul>
<li>此处配置代理只配置了 <code>http</code> 与 <code>https</code> 的，因此一定<strong>不要</strong>使用 ssh 协议。</li>
</ul>
]]></content><category scheme="https://blog.batkiz.com/tags/git" term="git" label="git"/></entry><entry><title type="html">翻译 | 给新手程序员们的建议</title><link href="https://blog.batkiz.com/posts/2019/advice-to-new-programmers/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2018/translation-the-rise-and-demise-of-rss/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | RSS 的兴起与衰落"/><link href="https://blog.batkiz.com/posts/2019/xatuctf2019-wp/?utm_source=atom_feed" rel="related" type="text/html" title="xatuctf2019 校赛 writeup"/><link href="https://blog.batkiz.com/posts/2018/using-scoop/?utm_source=atom_feed" rel="related" type="text/html" title="初探 Scoop"/><link href="https://blog.batkiz.com/posts/2018/where-vim-came-from/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | Vim 的诞生"/><link href="https://blog.batkiz.com/posts/2018/oh-the-old-days/?utm_source=atom_feed" rel="related" type="text/html" title="考古 | 不知纸外几春秋"/><id>https://blog.batkiz.com/posts/2019/advice-to-new-programmers/</id><published>2019-04-28T21:17:56+00:00</published><updated>2019-04-28T21:17:56+00:00</updated><content type="html"><![CDATA[<blockquote>并不是每天都有学生向 709 个软件开发者寻求建议的机会的。</blockquote><p><del>这篇都是过年前翻译的了，但一直懒得放上来=。=</del></p>
<hr>
<p>原文：<a href="http://olafurw.com/2019-01-27-programmer-advice/">Advice to new Programmers</a></p>
<p>并不是每天都有学生向 709 个软件开发者寻求建议的机会的。</p>
<h2 id="综述">
    综述 
    <a href="#%e7%bb%bc%e8%bf%b0" class="anchor-link">#</a>
</h2><p>在瑞典马尔摩有一所学校叫做 <a href="https://www.thegameassembly.com/">The Game Assembly</a>。这所学校专注于游戏制作教学。编程、艺术及设计，无所不包。有一个最后一年在游戏工作室度过的三年项目。</p>
<p>因为我为一家<a href="https://www.massive.se/">游戏公司</a>工作，我们被邀请向这些学生举办讲座。在过去几年间我曾数次做讲座，且非常荣幸得到此机会。</p>
<p>今年我开始向新来的学生们讲演。原计划为<a href="https://speakerdeck.com/olafurw/the-basics-of-object-oriented-programming">面向对象编程的基础</a>，但我还有另一个想法。</p>
<p>为什么不联系 Twitter 并问他们对“易受影响的年轻人”有什么建议呢？</p>
<blockquote>
<p>推特上的程序员你们好！</p>
<p>几天后我将会向一些易受影响的年轻人演讲</p>
<p>他们尚且处于学习的早期阶段，20 来岁的样子。</p>
<p>你最想给出什么建议呢？语言是未知的。</p>
<p>感谢转推</p>
<p>（我会在幻灯片中引用你们，所以务必友善：）</p>
<p>— Ólafur Waage (@olafurw) <a href="https://twitter.com/olafurw/status/1087438169585434624?ref_src=twsrc%5Etfw">January 21, 2019</a></p>
</blockquote>
<p>我确实没料到能获得 700 余条回复。因为在这条推特与演讲之间只有两天，我并不能总结所有的智慧。但是我也在试着寻找获赞最多的与在游戏产业中工作的人。</p>
<p>但有着太多的数据被掩盖。我需要分析这些回复。</p>
<h2 id="获得数据">
    获得数据 
    <a href="#%e8%8e%b7%e5%be%97%e6%95%b0%e6%8d%ae" class="anchor-link">#</a>
</h2><p>刚开始我试着仅仅浏览 Twitter 上的时间线并复制文本。但显然，当一个讨论贴达到了一定规模时，Twitter 限制了你能看到的推文数。所以从数据集中我仅能得到 285 个回复。</p>
<p>接下来是使用 Twitter 开发者 API，虽然被限制严重，但允许更多的搜索粒度。</p>
<p>通过 Python 和 Tweepy 及请求间的 5 分钟睡眠，我能够从请求中得到 763 条直接回复于我的推文。这花了 <strong>362 分钟</strong>，或言 <strong>6 个小时</strong>。更短的睡眠时间可能也行，但我睡后留下它自己跑，所以也没多大关系。</p>
<pre><code class="language-python">for page in tweepy.Cursor(api.search, q=&quot;to:olafurw&quot;, since_id='1087438169585434624', tweet_mode='extended').pages():
  repliesFile = open(&quot;replies.txt&quot;, &quot;a&quot;)

  for tweet in page:
    repliesFile.write(tweet.in_reply_to_status_id_str + &quot;\n&quot;)
    repliesFile.write(tweet.user.screen_name + &quot;\n&quot;)
    repliesFile.write(tweet.id_str + &quot;\n&quot;)
    repliesFile.write(tweet.full_text.encode(&quot;utf-8&quot;) + &quot;\n&quot;)

    repliesFile.write(&quot;\n--==--\n&quot;)

  repliesFile.flush()
  repliesFile.close()

  time.sleep(300)
</code></pre>
<h2 id="基本的分析">
    基本的分析 
    <a href="#%e5%9f%ba%e6%9c%ac%e7%9a%84%e5%88%86%e6%9e%90" class="anchor-link">#</a>
</h2><p>分析一个文本语料库是在教育领域之中的，且我对此了解不多，也没有时间来深入了解。但我想要强调一些尤为突出的事情。</p>
<h3 id="编程是一个人类的领域">
    编程是一个人类的领域 
    <a href="#%e7%bc%96%e7%a8%8b%e6%98%af%e4%b8%80%e4%b8%aa%e4%ba%ba%e7%b1%bb%e7%9a%84%e9%a2%86%e5%9f%9f" class="anchor-link">#</a>
</h3><p>763 条推文中有 131 条在谈到其他人。<strong>17.1%</strong></p>
<p>他们谈论了人类，团队，同事，朋友，同行。</p>
<p>这里是一些例子：</p>
<blockquote>
<p><a href="https://twitter.com/tomjadams/status/1088336413827915776">@tomjadams</a>
软件是一个团体运动</p>
<p><a href="https://twitter.com/mrdowden/status/1087882550964641792">@mrdowden</a>
生活中最重要的事——及你总是在控制的——是你如何对待他人</p>
<p><a href="https://twitter.com/originalJonLowe/status/1087594133357760513">@originalJonLowe</a>
在求知之旅中总是宽容、鼓励他人
抬举其他开发者，因为在最后的日子里，你是队伍的一部分
在成为一个“明星”之上，成为一个团队合作者，因为知识应被共享</p>
<p><a href="https://twitter.com/ccmccomb/status/1087845662937546756">@ccmccomb</a>
在计算中永远不要忘了为怜悯之心寻求空间</p>
</blockquote>
<h3 id="编程是关于持续学习的">
    编程是关于持续学习的 
    <a href="#%e7%bc%96%e7%a8%8b%e6%98%af%e5%85%b3%e4%ba%8e%e6%8c%81%e7%bb%ad%e5%ad%a6%e4%b9%a0%e7%9a%84" class="anchor-link">#</a>
</h3><p>13 个回复字面上都是“永远不要停止学习”</p>
<p>763 条推文中的 82 个在某种意义上谈论了学习或实践。<strong>10.7%</strong></p>
<p>下面是例子：</p>
<blockquote>
<p><a href="https://twitter.com/iam_js_/status/1088153200371355650">@iam<em>js</em></a>
没有捷径，实践、实践及更多的实践</p>
<p><a href="https://twitter.com/curtisko/status/1087725805982093312">@curtisko</a>
你有责任持续地学习与职业发展</p>
<p><a href="https://twitter.com/hedgeb/status/1087525264140234752">@hedgeb</a>
即使你只比手册快了一页，你也能指导一些人并在他们的学习编程之路中提供帮助</p>
<p><a href="https://twitter.com/howbazaar/status/1087773774374522881">@howbazaar</a>
你将会持续学习
你永不止步
变得更好需要练习
读书，读博客
别指望在六个月内变得伟大</p>
</blockquote>
<h3 id="编程有时会很吓人">
    编程有时会很吓人 
    <a href="#%e7%bc%96%e7%a8%8b%e6%9c%89%e6%97%b6%e4%bc%9a%e5%be%88%e5%90%93%e4%ba%ba" class="anchor-link">#</a>
</h3><p>许多回复也表达了这个。有许多东西需要你去学习，有许多东西你并不懂。看着领域内的专家也会使人畏缩。</p>
<p>27 条回复谈及错误或失败，29 条关于害怕</p>
<blockquote>
<p><a href="https://twitter.com/jitterted/status/1087575050318835712">@jitterted</a>
别与其他人相比较，而是与过去的 <em>你</em> 相比较</p>
<p><a href="https://twitter.com/greberger/status/1087842355481325574">@greberger</a>
不要害怕说你不懂什么东西
别对寻求帮助感到害怕
我们都曾（或正在）经历妄自菲薄</p>
<p><a href="https://twitter.com/ben_deane/status/1087805790423904256">@ben_deane</a>
我们都会出错
试着对自己的错误负责而不惭愧，在他人出现错误时也不要责怪他们</p>
<p><a href="https://twitter.com/FiddlersCode/status/1087619274032721926">@FiddlersCode</a>
技术是短暂的，但关系长存
感情上试着了解你的同事与你自己
有勇气接受你的努力会易受伤害
寻求帮助，即使你害怕出丑</p>
</blockquote>
<h3 id="编程不仅仅是最新的技术">
    编程不仅仅是最新的技术 
    <a href="#%e7%bc%96%e7%a8%8b%e4%b8%8d%e4%bb%85%e4%bb%85%e6%98%af%e6%9c%80%e6%96%b0%e7%9a%84%e6%8a%80%e6%9c%af" class="anchor-link">#</a>
</h3><p>对，闪亮的新库/语言/框架非常酷。但正如许多回复所言，基础原理更要紧。</p>
<p>34 条回复直接地谈论技术，算法及关注于更大的图景。</p>
<blockquote>
<p><a href="https://twitter.com/bjorn_fahller/status/1087439484709490689">@bjorn_fahller</a>
语言与工具来来去去。
学会去看重复的模式，更准确地说，不同语言与库甚至范例中的规律。
学习不同技术的优劣，如此你能为你的特定问题精确地选择。</p>
<p><a href="https://twitter.com/aras_p/status/1087443639750529025">@aras_p</a>
找到编程领域中使你感兴趣的，并在此工作。
小的递增任务——“嘿我把屏幕变成红色的了！现在我又更进一步！”，“我使页面上的按键移动了！”等
语言、框架、库、“技术栈”并不重要（别理睬说这些重要的人）。</p>
<p><a href="https://twitter.com/rickschott/status/1087492136331812867">@rickschott</a>
世界需要问题解决者，而非被记住的算法。</p>
</blockquote>
<h3 id="编程对你要求严苛">
    编程对你要求严苛 
    <a href="#%e7%bc%96%e7%a8%8b%e5%af%b9%e4%bd%a0%e8%a6%81%e6%b1%82%e4%b8%a5%e8%8b%9b" class="anchor-link">#</a>
</h3><p>个人健康是一个普遍的讨论点。睡眠与合理饮食是有关健康行为中排在第一位的。</p>
<p>33 条回复谈论了睡眠，饮食，个人健康与工作时间。</p>
<blockquote>
<p><a href="https://twitter.com/sehurlburt/status/1087448744113684481">@sehurlburt</a>
睡觉，健康饮食，关心你自己的身体——即使你感觉良好
更多的工作时间并不意味着更好的工作，甚至并不意味着更多的工作被做完
你不必弄懂你的事业
你不需要生活的里程碑来仅仅变得健康与快乐</p>
<p><a href="https://twitter.com/caffodian/status/1087449579589591044">@caffodian</a>
照顾好你的身体
对，实际编程技巧非常有用，但这能使你使用鼠标而不伤害自己，或久坐而不背疼，看着屏幕而不头疼，等等。</p>
<p><a href="https://twitter.com/ArvidGerstmann/status/1087462222551490560">@ArvidGerstmann</a>
不要勉强自己。在你还能时，享受你该死的生活。来自一位 24 岁却感觉像是已经 44 岁的人。</p>
<p><a href="https://twitter.com/ma_lindstedt/status/1087683256835809281">@ma_lindstedt</a>
每周工作 100 小时并不意味着你非常投入
照顾好你的身体，坦率地与管理者交谈
享受你的空闲时间，如此你能得到最棒的工作效率
兴趣爱好+朋友与良好的职业道德并不排斥</p>
</blockquote>
<h3 id="编程其他有趣的回复">
    编程，其他有趣的回复 
    <a href="#%e7%bc%96%e7%a8%8b%e5%85%b6%e4%bb%96%e6%9c%89%e8%b6%a3%e7%9a%84%e5%9b%9e%e5%a4%8d" class="anchor-link">#</a>
</h3><p>上述分类是寻常的主题，但也有无法归类但值得提及的回复。</p>
<p>30 条回复提及测试</p>
<blockquote>
<p><a href="https://twitter.com/brianokken/status/1088177245431115776">@brianokken</a>
学着去问这些问题：</p>
<ul>
<li>我是如何知道它能跑起来的？</li>
<li>我该如何使之自动化？
尽快学会依靠自动化测试会节省大量的时间</li>
</ul>
</blockquote>
<p>18 条回复谈论了某种版本控制</p>
<blockquote>
<p><a href="https://twitter.com/UndefinedBehav/status/1087441412747128832">@UndefinedBehav</a>
使用一个版本控制工具
如果某人曾在之前告诉我，我会喜欢它的</p>
</blockquote>
<p>14 条提及调试</p>
<blockquote>
<p><a href="https://twitter.com/AliBeeGfx/status/1087826867363741696">@AliBeeGfx</a>
写代码经常像是测不准原理的对立
唯一去了解什么确定的东西 <em>真的</em> 发生的方法是通过调试来近距离观察！</p>
</blockquote>
<h2 id="感谢">
    感谢 
    <a href="#%e6%84%9f%e8%b0%a2" class="anchor-link">#</a>
</h2><p>像这样的帖子难得一见。如此之多的人花费时间回复很不可思议</p>
<p><strong>感谢每一个回复、转推与点赞的人。</strong></p>
<p>我希望这个帖子能够鼓舞你，我也希望这篇博文能够有所帮助。</p>
<blockquote>
<p><a href="https://twitter.com/ericniebler/status/1087447876286869504">@ericniebler</a>
保持谦虚，保持好奇。</p>
</blockquote>
]]></content><category scheme="https://blog.batkiz.com/tags/%E7%BF%BB%E8%AF%91" term="%E7%BF%BB%E8%AF%91" label="翻译"/></entry><entry><title type="html">xatuctf2019 校赛 writeup</title><link href="https://blog.batkiz.com/posts/2019/xatuctf2019-wp/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2018/using-scoop/?utm_source=atom_feed" rel="related" type="text/html" title="初探 Scoop"/><link href="https://blog.batkiz.com/posts/2018/where-vim-came-from/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | Vim 的诞生"/><link href="https://blog.batkiz.com/posts/2018/oh-the-old-days/?utm_source=atom_feed" rel="related" type="text/html" title="考古 | 不知纸外几春秋"/><link href="https://blog.batkiz.com/posts/2018/translation-the-rise-and-demise-of-rss/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | RSS 的兴起与衰落"/><link href="https://blog.batkiz.com/posts/2018/using-wsl/?utm_source=atom_feed" rel="related" type="text/html" title="wsl 使用指北"/><id>https://blog.batkiz.com/posts/2019/xatuctf2019-wp/</id><published>2019-04-19T21:57:00+00:00</published><updated>2019-04-19T21:57:00+00:00</updated><content type="html"><![CDATA[<blockquote>代打出题人</blockquote><p>2019.4.14 校赛，由于之前没办萌新赛，所以这次的题有点水 23333</p>
<h2 id="web">
    WEB 
    <a href="#web" class="anchor-link">#</a>
</h2><h3 id="你能读到-flag-吗">
    你能读到 flag 吗 
    <a href="#%e4%bd%a0%e8%83%bd%e8%af%bb%e5%88%b0-flag-%e5%90%97" class="anchor-link">#</a>
</h3><p>题目：</p>
<pre><code class="language-php"> &lt;?php
error_reporting(0);
show_source(__FILE__);

$a = @$_REQUEST['hello'];
eval(&quot;var_dump($a);&quot;);?&gt;
</code></pre>
<p><del>谷歌之，原题，直接复制提交。</del></p>
<p>使用 <code>file_get_contents()</code> 方法获得 flag</p>
<p>python 代码如下</p>
<pre><code class="language-python">import requests

s=requests.session()
body = {&quot;hello&quot;:&quot;file_get_contents('flag.php')&quot;}
r = s.post(&quot;http://192.168.1.5:23114/read.php&quot;, data=body)

print(r.content)
</code></pre>
<h3 id="phpdecode">
    phpdecode 
    <a href="#phpdecode" class="anchor-link">#</a>
</h3><p><del>直接搜 <code>1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY=</code> 找到了别人的 wp，flag 获得。</del></p>
<pre><code class="language-php">1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY= &lt;?php

error_reporting(0);
require __DIR__.'/lib.php';

echo base64_encode(hex2bin(strrev(bin2hex($flag)))), '&lt;hr&gt;';

highlight_file(__FILE__);?&gt;
</code></pre>
<p>可知加密为 <code>base64_encode(hex2bin(strrev(bin2hex($flag))))</code>，一层一层解密，python 脚本如下</p>
<pre><code class="language-python">from base64 import b64decode
from binascii import hexlify, unhexlify

code = &quot;1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY=&quot;

print(unhexlify(hexlify(b64decode(code))[::-1]))
</code></pre>
<h2 id="pwn">
    PWN 
    <a href="#pwn" class="anchor-link">#</a>
</h2><h3 id="nc-from-0-to-1">
    nc from 0 to 1 
    <a href="#nc-from-0-to-1" class="anchor-link">#</a>
</h3><p>直接 nc 连接即可获得 flag</p>
<h3 id="ls1">
    ls1 
    <a href="#ls1" class="anchor-link">#</a>
</h3><p>ls as a service，将输入的字符传递为 ls 的 args，多试几次即可得出文件目录结构，精简后的如下：</p>
<pre><code class="language-bash">.
├── bin
│   ├── cat
│   ├── ls
│   └── sh
├── flag
└── ls1
</code></pre>
<p>传入 <code>; cat flag</code> 即可读到
<figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="ls1" data-pswp-title="ls1" src="https://s2.ax1x.com/2019/04/19/E92wlT.png" sizes="auto">
    <figcaption>ls1</figcaption>
</figure></p>
<h3 id="ls2">
    ls2 
    <a href="#ls2" class="anchor-link">#</a>
</h3><p>ls as a service v2，限制了传入 args 的字符数为 3，无法直接 <code>cat flag</code>。
由于 <code>bin</code> 下存在 <code>sh</code>，通过 <code>;sh</code> 唤起 shell，读取 flag。</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="ls2" data-pswp-title="ls2" src="https://s2.ax1x.com/2019/04/19/E9206U.png" sizes="auto">
    <figcaption>ls2</figcaption>
</figure></p>
<h2 id="crypto">
    CRYPTO 
    <a href="#crypto" class="anchor-link">#</a>
</h2><h3 id="dididi">
    dididi 
    <a href="#dididi" class="anchor-link">#</a>
</h3><p><code>..-. .-.. .- --. ..-. -.. ....- .---- . .---- ..--- -.. ----- ...-- .---- -.-. ..--- . -.. -.... -.-. ..-. ---.. ---.. ---.. -.... ...-- ---.. . -.... -.... -... . ....- -.. .</code></p>
<p>摩斯密码</p>
<h3 id="caesar-cipher">
    Caesar cipher 
    <a href="#caesar-cipher" class="anchor-link">#</a>
</h3><p><code>kqfl{Hfjxfw_hnumjw_1x_xt_xnruqj}</code></p>
<p>凯撒加密</p>
<h3 id="rc4">
    rc4 
    <a href="#rc4" class="anchor-link">#</a>
</h3><pre><code class="language-txt">cipher:wRTwnbjEAf6T22dYzyKgtBzQ/ydMmNqmf3WeW9E=
key:eGF0dXNlYw==
</code></pre>
<p><a href="http://ctf.ssleye.com/rc4.html">rc4 加密</a>，唯一需要注意的是 key 可能需要经过一次 base64 解密。</p>
<h3 id="datababy">
    Datababy 
    <a href="#datababy" class="anchor-link">#</a>
</h3><p>数码宝贝中的字母表，对照即可。</p>
<p>（由此题可以知道出题人没再手动复现题，因为 datababy 并不能搜到数码宝贝。其官方英文名称为 <em>Digital monster</em> 。</p>
<h3 id="baby-rsa">
    baby RSA 
    <a href="#baby-rsa" class="anchor-link">#</a>
</h3><p>与下面的 esayRSA 相同，用现成的库就好</p>
<h3 id="110">
    110 
    <a href="#110" class="anchor-link">#</a>
</h3><p>ONE -&gt; 1
ZERO -&gt; 0
得到一长长长长长长长长长长长长长长长长长长长长长串 0 和 1。</p>
<p>每八位二进制转 ASCII 即可获得 flag。</p>
<h3 id="easy-rsa">
    easy RSA 
    <a href="#easy-rsa" class="anchor-link">#</a>
</h3><pre><code class="language-txt">n = 9637828843823500407917687664441327784714605952794831018467094508166140790258515855681653788687192363262499178812675284846293988948568322307302995971433129
e = 65537
c = 1736476276571471518318904802453151397043836796931780608028216447791913603812271065838523639504410549594365173220377575243217983329182149750696526310732151
</code></pre>
<p><a href="https://github.com/3summer/CTF-RSA-tool">https://github.com/3summer/CTF-RSA-tool</a></p>
<h2 id="misc">
    MISC 
    <a href="#misc" class="anchor-link">#</a>
</h2><h3 id="这个容易就是有点累">
    这个容易，就是有点累 
    <a href="#%e8%bf%99%e4%b8%aa%e5%ae%b9%e6%98%93%e5%b0%b1%e6%98%af%e6%9c%89%e7%82%b9%e7%b4%af" class="anchor-link">#</a>
</h3><p>一个压缩了几千层的 zip 包，可以直接上十六进制查看器(winhex, hxd, 010 editor 等)打开，Ctrl + F flag 即可得到。</p>
<p>据写脚本解压的小伙伴称他们跑了一个多小时（</p>
<p>压缩脚本如下</p>
<pre><code class="language-sh">#!/bin/bash

name1=`cat /dev/urandom | sed 's/[^a-zA-Z0-9]//g' | strings -n 6 | head -n 1`
name2=&quot;.zip&quot;
name=$name1$name2
#echo $name

zip -m $name flag

while true
do
 name1=`cat /dev/urandom | sed 's/[^a-zA-Z0-9]//g' | strings -n 6 | head -n 1`
 name=$name1$name2
 zip -m $name *.zip
done
</code></pre>
<h3 id="fibs">
    Fibs 
    <a href="#fibs" class="anchor-link">#</a>
</h3><p>求斐波那契数列第 1234 项，然后 md5(hex(Fibs(1234)))，（转小写后）即为 flag。</p>
<p>看到这个题……肯定不能自己现场写算法，否则会被跑炸内存的。直接谷歌斐波那契数列快速求第 N 项，得到 O(log N) 的算法后写脚本求项。</p>
<p>脚本如下</p>
<pre><code class="language-py">def Fibonacci_recursion_fast(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    k = (n + 1) / 2 if n % 2 else n / 2
    fib_k = Fibonacci_recursion_fast(k)
    fib_k_1 = Fibonacci_recursion_fast(k - 1)
    return fib_k**2 + fib_k_1**2 if n % 2 else (2 * fib_k_1 + fib_k) * fib_k

print(hex(Fibonacci_recursion_fast(1234)))
</code></pre>
<p>md5 一下，再转小写提交。</p>
<h2 id="reverse">
    REVERSE 
    <a href="#reverse" class="anchor-link">#</a>
</h2><h3 id="snake">
    Snake 
    <a href="#snake" class="anchor-link">#</a>
</h3><p>贪吃蛇，玩到 70 分就出 flag</p>
<h3 id="sstas-python-教室">
    ssta&rsquo;s Python 教室 
    <a href="#sstas-python-%e6%95%99%e5%ae%a4" class="anchor-link">#</a>
</h3><p>给的是一个 pyc 文件，在线反编译，得到的代码如下。</p>
<pre><code class="language-py"># encoding: utf-8

from base64 import b32encode
import codecs

def b32(s):
    return b32encode(s)

def rot13(s):
    return codecs.encode(s, 'rot13')
    # return s.encode('rot13')

def reverse(s):
    return s[::-1]

def reverseSomeByte(s):
    return s[-6:] + s[:-6]

def main():
    flag = '******************************'
    cipher = reverse(b32(rot13(reverseSomeByte(flag))))
    print(cipher)
    print('=== WELCOME TO XATUCTF2019 ===')
    return 'C336VYBGQB56FX5LGLM6FX5MFDNGGTZMGTP4D7MPUT3SXZVP6RP4TQQN'

if __name__ == '__main__':
    ffllaagg = main()
    print('FLAG is right here. Can you get it?', ffllaagg)
</code></pre>
<p>重点是 <code>cipher = reverse(b32(rot13(reverseSomeByte(flag))))</code>，与 phpencode 相似，自己写脚本一层一层解密即可。
自己写的不完善的脚本如下</p>
<pre><code class="language-py"># -*- encoding: utf-8 -*-
from base64 import b32decode
import codecs

def b32(s):
    return b32decode(s)

def rot13(s):
    return codecs.decode(s, 'rot13')

def reverse(s):
    return s[::-1]

cipher = 'C336VYBGQB56FX5LGLM6FX5MFDNGGTZMGTP4D7MPUT3SXZVP6RP4TQQN'

print(rot13(b32(reverse(cipher)).decode(&quot;ASCII&quot;)))
</code></pre>
<p>前六位移到最后即可。</p>
<hr>
<p>自己没做出来的题就没写 wp 23333</p>
]]></content><category scheme="https://blog.batkiz.com/tags/ctf" term="ctf" label="ctf"/></entry><entry><title type="html">初探 Scoop</title><link href="https://blog.batkiz.com/posts/2018/using-scoop/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2018/using-wsl/?utm_source=atom_feed" rel="related" type="text/html" title="wsl 使用指北"/><link href="https://blog.batkiz.com/posts/2018/solving-cmder-space/?utm_source=atom_feed" rel="related" type="text/html" title="解决 cmder 光标问题"/><link href="https://blog.batkiz.com/posts/2018/how-to-play-minecrafet-with-xbox-controller/?utm_source=atom_feed" rel="related" type="text/html" title="如何使用Xbox手柄玩Minecraft"/><link href="https://blog.batkiz.com/posts/2017/software-on-my-computer/?utm_source=atom_feed" rel="related" type="text/html" title="我的电脑软件"/><link href="https://blog.batkiz.com/posts/2018/where-vim-came-from/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | Vim 的诞生"/><id>https://blog.batkiz.com/posts/2018/using-scoop/</id><published>2018-12-31T00:23:27+00:00</published><updated>2018-12-31T00:23:27+00:00</updated><content type="html"><![CDATA[<h2 id="缘起">
    缘起 
    <a href="#%e7%bc%98%e8%b5%b7" class="anchor-link">#</a>
</h2><p>Linux 用的多了，不免会觉得有一个靠谱好用的包管理器是一件令人身心愉悦的事。许多人也便顺理成章地想要在 Windows 系统上来一个包管理器。</p>
<p>只是一方面微软已然在大力推介其 Microsoft Store，另一方面命令行形式的包管理器对于大多数人也是极为不友好的。如此这般，一个官方的包管理器自然无望。</p>
<p>好在开源社区里从来不缺人造轮子。于是我们现在有了两个选择：<a href="https://chocolatey.org">Chocolatey</a> 与 <a href="https://scoop.sh">Scoop</a>，一个 <em>package manager</em> ，一个 <em>command-line installer</em> 。</p>
<p>既然本文标题为 scoop，那么显然 choco 已不是我们主要要讨论的了，至于最初我为什么选择了 scoop 而非 Choco，原因早已不记得了。或许是因为 choco 分为开源版与商业版，抑或是我尚未真正想要使用 Windows 上的“包管理器”来管理我的所有软件——虽然我不必与各种流氓软件斗智斗勇，但我还是非常享受各种软件的安装过程中的自定义，<code>Add to PATH</code>, <code>添加到右键菜单</code>。当然，最主要的原因还是 Windows 并没有一个统一的命令行形式的安装软件接口，因此对于普通的软件，还是要无止境地 next——这又和不用包管理器又有什么区别呢？</p>
<p>让我们把视线转到 Linux 平台，apt 等包管理器自动进行了软件的依赖分析与解压、配置的过程。Windows 系统之上与之理念相似的便是所谓“绿色软件”——解压即可使用。这也正是 scoop 所做的，利用所写的 mainfest，将解压、配置环境变量等自动化处理。另一方面，Windows 之上大多数软件并无所谓依赖的东西，最多便是一个 VC runtime，这也使得 scoop 的工作量更少了。</p>
<h2 id="使用">
    使用 
    <a href="#%e4%bd%bf%e7%94%a8" class="anchor-link">#</a>
</h2><p>Scoop 默认是安装在你的用户文件夹下的，这样自然有着许多好处，例如不需要管理员权限。但如果你想要将其改变，可以在安装之前更改掉 scoop path</p>
<pre><code class="language-powershell">[environment]::setEnvironmentVariable('SCOOP','C:\soft\Scoop','User')
$env:SCOOP='C:\soft\Scoop'
</code></pre>
<p>其中的 <code>C:\soft\Scoop</code> 自然可以换成你想要的路径。
而后便是执行官网之上的那一行命令</p>
<pre><code class="language-powershell">iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
</code></pre>
<p>——若是报错，便将 execution policy 更改一下</p>
<pre><code class="language-powershell">Set-ExecutionPolicy RemoteSigned -scope CurrentUser
</code></pre>
<p>而后再添加上 extras, versions 之类的 bucket，便可愉快的使用了。</p>
<p>个人推荐先</p>
<pre><code class="language-ps">scoop install sudo 7zip aria2
</code></pre>
<p>来获得更好的体验。</p>
<p>其后的使用无非便是 <code>scoop help</code> 中所列举的东西了</p>
<h2 id="mainfest">
    mainfest 
    <a href="#mainfest" class="anchor-link">#</a>
</h2><p>经过一段时间的使用后，你可能会想要将自己在用的许多软件迁移到 scoop 中，但问题也随之而来。</p>
<p>Scoop 的用户群体并不算是很大，因此许多软件并不会官方提供 <code>scoop install</code> 这样的安装方式。</p>
<p>放弃自然也是不行的，那么不如自己动手丰衣足食，来自己写一个 mainfest 吧！</p>
<p>Scoop 的 mainfest 是一个 json 文件，好处很明显，这样一来其应用描述非常简洁。但坏处也肯定是有的，比如说，不支持注释。好在还有着官方的文档供我们查阅。</p>
<p>下面是一份我写的 mainfest，附上注释，希望能给人点方便。</p>
<pre><code class="language-json">{
  &quot;homepage&quot;: &quot;https://oldj.github.io/SwitchHosts/&quot;,
  // 此处为软件主页
  &quot;version&quot;: &quot;3.3.12.5349&quot;,
  // 版本号
  &quot;license&quot;: &quot;MIT&quot;,
  // 软件所使用的协议
  &quot;description&quot;: &quot;SwitchHosts! is an App for hosts management &amp; switching.&quot;,
  // 对软件的描述信息
  &quot;architecture&quot;: {
    // 对于分架构进行分发的软件，可以以 architecture 对其区分，如果并不分架构，可直接 url &amp; hash
    &quot;64bit&quot;: {
      &quot;url&quot;: &quot;https://github.com/oldj/SwitchHosts/releases/download/v3.3.12/SwitchHosts-win32-x64_v3.3.12.5349.zip&quot;,
      // 软件包下载链接
      &quot;hash&quot;: &quot;037fbc3b7bba4c9f43e105f00f68733397c1b3099e52eb57308a6659482d3fd0&quot;,
      // 文件的 hash 值，可通过 Get-FileHash/sha256sum 来获得
      &quot;extract_dir&quot;: &quot;SwitchHosts!-win32-x64&quot;
      // 解压的文件夹，指程序压缩包内的文件夹
    },
    &quot;32bit&quot;: {
      &quot;url&quot;: &quot;https://github.com/oldj/SwitchHosts/releases/download/v3.3.12/SwitchHosts-win32-ia32_v3.3.12.5349.zip&quot;,
      &quot;hash&quot;: &quot;41e7a2a0cf8261a3fcccfce4cd8d8efc893f3f472dcccd8c3e76623e19f5cf5d&quot;,
      &quot;extract_dir&quot;: &quot;SwitchHosts!-win32-ia32&quot;
    }
  },
  &quot;bin&quot;: &quot;SwitchHosts!.exe&quot;,
  // 可执行文件
  &quot;shortcuts&quot;: [[&quot;SwitchHosts!.exe&quot;, &quot;SwitchHosts!&quot;]],
  // 此处为将其快捷方式加入开始菜单的配置
  &quot;checkver&quot;: {
    &quot;url&quot;: &quot;https://github.com/oldj/SwitchHosts/releases&quot;,
    &quot;re&quot;: &quot;SwitchHosts-win32-x64_v([\\d.]+).zip&quot;
  },
  // 自动检查更新所用，不过我这里好像是有点小问题的
  &quot;autoupdate&quot;: {
    &quot;architecture&quot;: {
      &quot;64bit&quot;: {
        &quot;url&quot;: &quot;https://github.com/oldj/SwitchHosts/releases/download/v$majorVersion.$minorVersion.$patchVersion/SwitchHosts-win32-x64_v$version.zip&quot;
      },
      &quot;32bit&quot;: {
        &quot;url&quot;: &quot;https://github.com/oldj/SwitchHosts/releases/download/v$majorVersion.$minorVersion.$patchVersion/SwitchHosts-win32-ia32_v$version.zip&quot;
      }
    }
  }
}
</code></pre>
<p>上面的这份已被收入 <a href="https://github.com/lukesampson/scoop-extras/pull/1519">extras bucket</a> 中，不过上面的<a href="https://github.com/lukesampson/scoop-extras/pull/1519#issuecomment-447215864">检查更新的配置貌似还有点小问题</a>。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/></entry><entry><title type="html">翻译 | Vim 的诞生</title><link href="https://blog.batkiz.com/posts/2018/where-vim-came-from/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2018/using-wsl/?utm_source=atom_feed" rel="related" type="text/html" title="wsl 使用指北"/><link href="https://blog.batkiz.com/posts/2017/install-linux-in-upan/?utm_source=atom_feed" rel="related" type="text/html" title="将linux装入u盘之路"/><link href="https://blog.batkiz.com/posts/2018/oh-the-old-days/?utm_source=atom_feed" rel="related" type="text/html" title="考古 | 不知纸外几春秋"/><link href="https://blog.batkiz.com/posts/2018/translation-the-rise-and-demise-of-rss/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | RSS 的兴起与衰落"/><link href="https://blog.batkiz.com/posts/2018/useful-telegram-bots/?utm_source=atom_feed" rel="related" type="text/html" title="telegram bots 推荐"/><id>https://blog.batkiz.com/posts/2018/where-vim-came-from/</id><published>2018-10-23T12:55:18+00:00</published><updated>2018-10-23T12:55:18+00:00</updated><content type="html"><![CDATA[<blockquote>Vim 这奇怪的键位到底从何而来？</blockquote><p>原文：<a href="https://twobithistory.org/2018/08/05/where-vim-came-from.html">Where Vim Came From</a></p>
<p>另投稿于 <a href="http://jandan.net/2018/10/22/vim.html">煎蛋</a></p>
<blockquote>
<p>translated by <a href="https://batkiz.github.io/">batkiz</a> &amp; <a href="https://ruinsyi.github.io">RUInsYi</a> @ <a href="https://github.com/par-tuner">Par-Tuner</a></p>
</blockquote>
<p>我最近偶然发现了一个名为 Intel HEX 的文件格式。据我所了解，Intel HEX 文件（使用 <code>.hex</code> 扩展名），将二值图像编码为一行一行的十六进制数字，为了使它们更透明。显然它们被应用于单片机编程或将数据烧录进 ROM。无论如何，当我第一次在 Vim 中打开一个 HEX 文件时，我发现了一些令人震惊的事。这个文件格式——至少对我来说——非常难懂，但 Vim 已经知道了有关它的一切。HEX 文件的每一行都是一个被分为不同字段的记录——Vim 已经先我一步为每一字段着了色。我敬畏地问道，<code>set ft?</code>。<code>filetype=hex</code>，Vim 得意洋洋地回答。</p>
<p>Vim 无处不在。它被无数人使用，因此对 HEX 文件的支持并不令人意外。Vim 在 Mac OS 上被预装，且在 Linux 世界有着大批拥趸。甚至讨厌它的人也对其非常熟悉，大多数命令行工具会默认将用户扔向 Vim，以至于被困在 Vim 中的新手已经成为了<a href="https://stackoverflow.blog/wp-content/uploads/2017/05/meme.jpeg">一个梗</a>。很多的网站，包括 Facebook，会在你按 <code>j</code> 键时向下滚动，按 <code>k</code> 键时向上——Vim 在数字文化中奇迹般以高水准传播。</p>
<p>然而 Vim 还是一个谜。不像 React，每个人都知道它被 Facebook 开发与维护，Vim 并没有明显的赞助者。尽管它极为普遍和重要，仍没有任何形式的委员会或组织机构为 Vim 的事宜做决定。你可以花费几分钟在 <a href="https://www.vim.org/">Vim 官网</a> 上闲逛，却不会在谁创造了 Vim 或者为什么创造了 vim 上得到更好的结果。如果你径直打开 Vim，不加任何文件参数，你就会看到 Vim 的启动信息，称 Vim 被“Bram Moolenaar 等人”开发。但这也仅止于此。谁是 Bram Moolenaar，谁又是他暗中的合作伙伴？</p>
<p>可能更重要的是，当我们在问问题时，为什么退出 Vim 需要键入 <code>:wq</code>？当然，这是一个“写入”操作，其后是“退出”操作，但这并不是一个特别直观的约定。又是谁决定复制文本应被称为“yanking”？（译注：在 Emacs 中，&ldquo;yanking&rdquo; 代表的是粘贴（或者说，重新插入刚才删掉的内容），而并不是复制。）为什么 <code>:%s/foo/bar/gc</code> 是“查找并替换”的简称？Vim 的特质看起来太武断了，但它们又从何而来呢？</p>
<p>答案是，事实通常如此，这些开始于初始之计算机的火炉，贝尔实验室。某种意义上，Vim 仅仅是一个软件作品——被称为“wq 文本编辑器”——最新的迭代。这个软件自 Unix 纪元的黎明开始就不断地被开发和改进。</p>
<h2 id="ken-thompson-与一个行编辑器">
    Ken Thompson 与一个行编辑器 
    <a href="#ken-thompson-%e4%b8%8e%e4%b8%80%e4%b8%aa%e8%a1%8c%e7%bc%96%e8%be%91%e5%99%a8" class="anchor-link">#</a>
</h2><p>1966 年，贝尔实验室雇佣了 Ken Thompson。Thompson 刚在加州大学伯克利分校完成了电子工程与计算机科学方向的硕士学位。在那里，他用过一个名为 QED 的文本编辑器，这个编辑器在 1965 年与 1966 年之间为伯克利分时系统而写。<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Thompson 在到达贝尔实验室后的头等要事便是为 MIT 相容分时系统重写了 QED。后来他会为了 Multics 计划而编写另一个版本的 QED。期间，他扩展了程序以使得用户能够在一个文件中搜索行，并使用正则表达式进行替换。<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Multics 计划，与伯克利分时系统相似，寻求于创造一个商业上可行的分时操作系统，是 MIT，通用电气及贝尔实验室间的合作产物。AT&amp;T 最终认定这个计划没有进展并选择退出。Thompson 与他的同事——贝尔实验室研究员 Dennis Ritchie，现在没有了分时系统，失去了系统所提供的“交互式计算的感觉”，便开始着手制作他们自己的版本——最终会闻名为 Unix。<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> 1969 年八月，在他的妻子与儿子在加利福尼亚度假时，Thompson 将新系统的基本组件组合在了一起，分别分配了“一个星期给操作系统、shell、编辑器、及汇编器。”<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></p>
<p>这个编辑器会被叫做 <code>ed</code>。它基于 QED 但并不是一个确切的重实现。Thompson 决定抛弃一些 QED 功能。正则表达式的支持被削减，所以只有相对简单的正则表达式才会被理解。QED 通过打开多个缓冲区允许用户同时编辑几个文件，但 <code>ed</code> 一次只能对一个缓冲区工作。尽管 QED 能执行一个包含命令的缓冲区，<code>ed</code> 却不能这么做。这些简化也许是被要求的。Dennis Ritchie 曾说没有 QED 的高级正则表达式是“不大的损失”。<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></p>
<p><code>ed</code> 现在是 POSIX 标准的一部分，所以如果你有一个 POSIX 兼容的系统，它已经安装在你的电脑上了。它值得一玩，因为 <code>ed</code> 的许多命令现在是 Vim 的一部分。例如，为了将缓冲区写入磁盘，你需要使用 <code>w</code> 命令。为了退出编辑器，你需要使用 <code>q</code> 命令。这两个命令能在一行中同时被指定——也就是 <code>wq</code>。正如同 Vim，<code>ed</code> 是一个模式编辑器；为了从命令模式进入输入模式你需要使用插入命令(<code>i</code>)，附加命令(<code>a</code>)，或是更改命令(<code>c</code>)，这取决于你想对文本做些什么。<code>ed</code> 同样引进了 <code>s/foo/bar/g</code> 格式来查找与替换，或称“取代”文本。</p>
<p>鉴于这些相似之处，你可能会认为普通的 Vim 用户使用 <code>ed</code> 没有任何问题。但在另一个重要的方面，<code>ed</code> 与 Vim 不尽相同。<code>ed</code> 是一个真正的行编辑器。它在电传打字机时代被写下并被广泛使用。当 Ken Thompson 与 Dennis Ritchie 正忙碌于 Unix 时，他们看起来像是这样：</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="Ken_Thompson_(sitting)_and_Dennis_Ritchie_at_PDP-11_(2876612463).jpg" data-pswp-title="Ken_Thompson_(sitting)_and_Dennis_Ritchie_at_PDP-11_(2876612463).jpg" src="https://s1.ax1x.com/2018/10/17/idh2qI.jpg" sizes="auto">
    <figcaption>Ken_Thompson_(sitting)_and_Dennis_Ritchie_at_PDP-11_(2876612463).jpg</figcaption>
</figure></p>
<p><code>ed</code> 不允许你在打开的缓冲区里的其他行中编辑恰当的行，或者是移动光标，因为每当你改变了文件，<code>ed</code> 会必须重印整个文件。1969 年并没有让 <code>ed</code>“清除”屏幕上内容的机制，因为屏幕其实仅仅是一张纸，输出的所有东西都已经被墨水印到了纸上。如有必要，你可以使用列出命令(<code>l</code>)让 <code>ed</code> 为你打印出一行行内容，但大多数时间你都在操控着你不能看见的文本。因此使用 <code>ed</code> 就像是在一个昏暗的房子里用着一个几乎没电的手电筒，尝试着找对路。你一次能看到如此多东西，所以你必须尽你所能来记住一切都在哪里。</p>
<p>下面是一个 <code>ed</code> 会话的例子。我已经添加了注释（在 <code>#</code> 标记之后）来解释每行的用途，尽管 <code>ed</code> 并不会将输入的这些识别为注释且会报错：</p>
<pre><code class="language-bash">[sinclairtarget 09:49 ~]$ ed
i                           # 进入输入模式
Hello world!

Isn't it a nice day?
.                           # 结束输入
1,2l                        # 列出1、2行
Hello world!$
$
2d                          # 删除第 2 行
,l                          # 列出整个缓冲区
Hello world!$
Isn't it a nice day?$
s/nice/terrible/g           # 全局替换
,l
Hello world!$
Isn't it a terrible day?$
w foo.txt                   # 写入 foo.txt
38                          # (写入的字节数)
q                           # 退出
[sinclairtarget 10:50 ~]$ cat foo.txt
Hello world!
Isn't it a terrible day?
</code></pre>
<p>正如你所见到的，<code>ed</code> 并不是一个特别健谈的程序。</p>
<h2 id="bill-joy-与一个文本编辑器">
    Bill Joy 与一个文本编辑器 
    <a href="#bill-joy-%e4%b8%8e%e4%b8%80%e4%b8%aa%e6%96%87%e6%9c%ac%e7%bc%96%e8%be%91%e5%99%a8" class="anchor-link">#</a>
</h2><p><code>ed</code> 对 Thompson 和 Ritchie 来说完全够用。其他人则认为其难于使用，并且它成为了 Unix 对新手的敌意的一个臭名昭著的例子。<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> 1975 年，一个名叫 George Coulouris 的男子在伦敦玛丽王后大学的 Unix 系统上开发了 <code>ed</code> 的一个改进版本。Coulouris 写了他的编辑器是为了利用他在伦敦玛丽王后大学能获得的显示屏。不像 <code>ed</code>，Coulouris 的程序允许用户编辑屏幕上恰当的一行，通过一下下的击键来在行间移动（想象下你一次只在一行里使用 Vim）。Coulouris 称他的程序为 <code>em</code>，或称&quot;editor for mortals（模式编辑器）&quot;，这可能是在 Thompson 造访伦敦玛丽王后大学，见了 Coulouris 所写的程序并驳斥之，称他不需要在编辑一个文件时查看它的状态之后。</p>
<p>1976 年，Coulouris 带着 <code>em</code> 到了加州大学伯克利分校，他在那里作为计算机科学系的访问者待了一整个夏天。这刚好是在 Ken Thompson 离开伯克利前往贝尔实验室的十年之后。在伯克利，Coulouris 见到了 Bill Joy，一个正在工作于伯克利软件套件(BSD)的研究生。Coulouris 给 Joy 展示了 <code>em</code>，Joy 便在 Coulouris 的源代码上开始构建 <code>ed</code> 的一个改进版本，称之为 <code>ex</code>，即&quot;extended <code>ed</code>（扩展版 <code>ed</code>）&quot;。1978 年，<code>ex</code> 的 1.1 版本与 BSD 的首个发布版本捆绑释出。<code>ex</code> 很大程度上与 <code>ed</code> 兼容，但添加了两个模式：一个“打开”模式，启用与 <code>em</code> 上相似的单行编辑；一个“可视”模式，接管整个屏幕并允许我们像今天那样实时编辑整个文件。</p>
<p>在 1979 年 BSD 的第二个发布版本中，一个名为 <code>vi</code> 的可执行程序被引进，它能比可视模式的 <code>ex</code> 做的稍多一些。</p>
<p><code>ex</code>/<code>vi</code>(自此以后便是 <code>vi</code>)确立了很多不是 <code>ed</code> 一部分但我们现在在用的大部分约定。Joy 使用的视频终端是一台 Lear Siegler ADM-3A，其键盘上没有方向键。作为替代，箭头被印在 <code>h</code>, <code>j</code>, <code>k</code> 与 <code>l</code> 键上，这便是为何 Joy 使用这些按键作为 <code>vi</code> 中的光标移动。ADM-3A 键盘上的 ESC 键则位于如今的 Tab 键的位置上，这解释了为何一个极其难按到的按键会被分配为常用到的退出一个模式的操作。使用 <code>:</code> 字符作为命令前缀也是来自 <code>vi</code>，在正常模式（也就是运行 <code>ex</code> 进入的模式）中使用 <code>:</code> 作为提示。这解决了 <code>ed</code> 中存在已久的一个抱怨，即，一旦启动，用户只会得到彻底的沉默。在可视模式，保存并退出现在是键入经典的 <code>:wq</code>。&ldquo;Yanking&rdquo; 与 &ldquo;putting&rdquo;（译注：即复制与粘贴）出现了，且 <code>set</code> 命令打开设置选项都是最初的 <code>vi</code> 的一部分。我们现在在 Vim 中使用的基本的文本编辑功能大部分都是 <code>vi</code> 的功能。</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="LSI-ADM3A-full-keyboard.jpg" data-pswp-title="LSI-ADM3A-full-keyboard.jpg" src="https://s1.ax1x.com/2018/10/18/iwGW24.jpg" sizes="auto">
    <figcaption>LSI-ADM3A-full-keyboard.jpg</figcaption>
</figure></p>
<p><code>vi</code> 是 BSD 上除了 <code>ed</code> 唯一捆绑安装的文本编辑器。在那时，Emacs 需要花费数百美元（这是在 GNU Emacs 出现之前），所以 <code>vi</code> 变得极其流行。但 <code>vi</code> 是 <code>ed</code> 的直接后代，这意味着如果没有 AT&amp;T 的源代码许可，源代码不能被改动。这使几个人创造了 <code>vi</code> 的开源版本。1987 年 STEVIE (ST Editor for VI Enthusiasts)（为 vi 爱好者的 ST 编辑器）出现了，Elvis 出现在 1990 年，<code>nvi</code> 则在 1994 年出现。这些克隆中的某些添加了额外的功能，例如语法高亮显示与分割窗口。因为很多 Elvis 用户的推动，Elvis 的许多功能被合并进了 Vim。</p>
<h2 id="bram-moolenaar-与-vim">
    Bram Moolenaar 与 Vim 
    <a href="#bram-moolenaar-%e4%b8%8e-vim" class="anchor-link">#</a>
</h2><p>Vim，现在是&quot;Vi Improved&quot;的缩写，最初却意味着&quot;Vi Imitation&quot;（Vi 的模仿）。如同许多其他的 <code>vi</code> 克隆，Vim 最初是一个 <code>vi</code> 不能工作的平台上的移植。Bram Moolenaar，一个在荷兰芬洛的一个复印机公司工作的荷兰工程师，想要在他全新的 Amiga 2000 上拥有一个像 <code>vi</code> 一样的东西。Moolenaar 在大学时代已习惯于在 Unix 系统上使用 <code>vi</code>，且它现在“了如指掌”。<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup> 所以在 1988 年，以已存在的 <code>vi</code> 克隆 STEVIE 作为起点，Moolenaar 开始着手于 Vim。</p>
<p>Moolenaar 已经有了 STEVIE，因为 STEVIE 已在一个叫 Fred Fish disk 的东西上出现了。Fred Fish 是一个美国程序员，每个月都会寄出一个软盘，其中是 Amiga 平台上可用的最好的开源软件的辑选。每个人都能要一份，只需付出邮费而已。Moolenaar 使用的版本是在 Fred Fish disk 256 上发布的版本。<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup>（很遗憾，看起来 Fred Fish disk 与 <a href="https://en.wikipedia.org/wiki/Freddi_Fish">Freddi Fish</a> 并没有什么关系。）</p>
<p>Moolenaar 很喜欢 STEVIE 但很快就注意到很多 <code>vi</code> 命令缺失了。<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup> 所以，在 Vim 的首个发布版本中，Moolenaar 将与 <code>vi</code> 的兼容作为首要工作。有人曾写了一系列的 <code>vi</code> 宏，在一个与 <code>vi</code> 正确兼容的编辑器上运行时，能解决一个 <a href="https://github.com/isaacs/.vim/tree/master/macros/maze">随机生成的迷宫</a>。Moolenaar 能使这些宏在 Vim 上工作。1991 年，Vim 在 Fred Fish disk 591 上第一次以&quot;Vi Imitation&quot;发布。<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup> Moolenaar 已经添加了一些功能（包括多级撤销，与对编译错误的&quot;quickfix&quot;模式），这意味着 Vim 已经超越了 <code>vi</code>。但 Vim 会保持&quot;Vi Imitation&quot;直到 1993 年通过 FTP 发布的 Vim 2.0。</p>
<p>Moolenaar 在许多网上合作者的偶尔协助下，以稳健的步伐给 Vim 添加功能。Vim 2.0 引入了 <code>wrap</code> 选项与较长行内水平滚动的支持。Vim 3.0 添加了对分割窗口与缓冲区的支持，这些功能来自 <code>vi</code> 的克隆 <code>nvi</code>。Vim 现在也能将每个缓冲区存入一个交换文件，所以已更改的文本能在崩溃中幸免于难。Vimscript 在 Vim 5.0 中首次出现，一同出现的还有对语法高亮显示的支持。在这期间，Vim 的流行程度一直在增长。它被移植到 MS-DOS, Windows, Mac, 甚至 Unix，在其上 Vim 与最初的 <code>vi</code> 相竞争。</p>
<p>2006 年，在 <em>Linux Journal</em> 读者中，Vim 被投票为最流行的编辑器。<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup> 如今，根据 Stack Overflow 的 2018 年开发者调查，Vim 是最流行的文本模式（即终端模拟器）编辑器，被所有软件开发者中的 25.8% 所使用（以及 40% 的系统管理员/运维）。<sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup> 从 1980 年代末期，贯穿整个 90 年代的时间里，程序员们发起了“编辑器战争”，使 EMacs 与 <code>vi</code> （后来变成了 Vim）用户相斗争。尽管 Emacs 还有着一批追随者，一些人认为编辑器战争已经结束且 Vim 胜利了。<sup id="fnref:13"><a href="#fn:13" class="footnote-ref" role="doc-noteref">13</a></sup> 2018 年 Stack Overflow 开发者调查佐证了这一说法；只有 4.1% 的调查对象使用 Emacs。</p>
<p>Vim 是怎么变得这么成功的？很明显人们喜欢 Vim 提供的功能。但我认为 Vim 背后悠久的历史说明了它有着比之功能更多的好处。回溯 Vim 的代码库，只是到达 1988 年 Moolenaar 开始在其上工作。&ldquo;wq text editor&quot;在另一方面——一个类似 Unix 环境的文本编辑器该如何工作的宏大愿景——已走过半个世纪。&ldquo;wq text editor&rdquo; 有着几种不同的表达，但幸亏 Bill Joy 与 Bram Moolenaar 两人对兼容性不同寻常的注重，好的想法随着时间不断积累。某种意义上，&ldquo;wq text editor&rdquo; 是运行时间最长的、最成功的开源项目之一，享受着计算机世界最伟大思想的贡献。我并不认为“初创公司抛弃先例创造了制造混乱的软件”的开发方式一定很坏，但 Vim 证明了以合作与递增的方式也能创造奇迹。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Butler Lampson, “<a href="http://bwlampson.site/Systems.htm">Systems</a>,” Butler Lampson, accessed August 5, 2018. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Dennis Ritchie, “<a href="https://www.bell-labs.com/usr/dmr/www/qed.html">An Incomplete History of the QED Editor</a>,” accessed August 5, 2018. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Peter Salus, “<a href="http://www.groklaw.net/article.php?story=20050414215646742">The Daemon, the GNU, and the Penguin</a>,” Groklaw, April 14, 2005, accessed August 5, 2018. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>ibid.（译注：同上） <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>Dennis Ritchie, “<a href="https://www.bell-labs.com/usr/dmr/www/qed.html">An Incomplete History of the QED Editor</a>,” accessed August 5, 2018. <a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6" role="doc-endnote">
<p>Donald Norman, “<a href="http://www.ceri.memphis.edu/people/smalley/ESCI7205_misc_files/The_truth_about_Unix_cleaned.pdf">The Truth about Unix: The User Interface Is Horrid</a>,” Datamation, accessed August 5, 2018. <a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7" role="doc-endnote">
<p>Bram Moolenaar, “<a href="https://www.youtube.com/watch?v=ayc_qpB-93o&amp;t=4m58s">Vim 25</a>” (lecture, Zurich, November 2, 2016), December 13, 2016, accessed August 5, 2018. <a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8" role="doc-endnote">
<p>ibid（译注：同上）. (?t=6m15s) <a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9" role="doc-endnote">
<p>ibid（译注：同上）. (?t=7m6s) <a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10" role="doc-endnote">
<p>“<a href="http://www.amiga-stuff.com/pd/fish.html">Fish Disks 1 - 1120</a>,” Amiga Stuff, accessed August 5, 2018. <a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11" role="doc-endnote">
<p>“<a href="https://www.linuxjournal.com/article/8520#N0x850cd80.0x87983bc">2005 Linux Journal Reader’s Choice Awards</a>,” Linux Journal, September 28, 2005, accessed August 5, 2018. <a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:12" role="doc-endnote">
<p>“<a href="https://insights.stackoverflow.com/survey/2018/#development-environments-and-tools">Stack Overflow Developer Survey 2018</a>,” Stack Overflow, accessed August 5, 2018. <a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:13" role="doc-endnote">
<p>Bruce Byfield, “<a href="http://www.linux-magazine.com/Online/Blogs/Off-the-Beat-Bruce-Byfield-s-Blog/The-End-of-the-Editor-Wars">The End of the Editor Wars</a>,” Linux Magazine, May 11, 2015, accessed August 5, 2018. <a href="#fnref:13" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content><category scheme="https://blog.batkiz.com/tags/vim" term="vim" label="vim"/><category scheme="https://blog.batkiz.com/tags/linux" term="linux" label="linux"/></entry><entry><title type="html">考古 | 不知纸外几春秋</title><link href="https://blog.batkiz.com/posts/2018/oh-the-old-days/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2018/translation-the-rise-and-demise-of-rss/?utm_source=atom_feed" rel="related" type="text/html" title="翻译 | RSS 的兴起与衰落"/><link href="https://blog.batkiz.com/posts/2018/using-wsl/?utm_source=atom_feed" rel="related" type="text/html" title="wsl 使用指北"/><link href="https://blog.batkiz.com/posts/2018/useful-telegram-bots/?utm_source=atom_feed" rel="related" type="text/html" title="telegram bots 推荐"/><link href="https://blog.batkiz.com/posts/2018/solving-cmder-space/?utm_source=atom_feed" rel="related" type="text/html" title="解决 cmder 光标问题"/><link href="https://blog.batkiz.com/posts/2018/a-short-introduction-to-markdown/?utm_source=atom_feed" rel="related" type="text/html" title="a-short-introduction-to-markdown"/><id>https://blog.batkiz.com/posts/2018/oh-the-old-days/</id><published>2018-10-15T19:08:59+00:00</published><updated>2018-10-15T19:08:59+00:00</updated><content type="html"><![CDATA[<blockquote>梦里不知身是客，大梦一场几千秋。</blockquote><p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="C 语言测试习题" data-pswp-title="C 语言测试习题" src="https://s1.ax1x.com/2018/10/15/iapWOP.jpg" sizes="auto">
    <figcaption>C 语言测试习题</figcaption>
</figure></p>
<p>起码不是谭浩强对不对（</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="time" data-pswp-title="time" src="https://s1.ax1x.com/2018/10/15/iapRyt.jpg" sizes="auto">
    <figcaption>time</figcaption>
</figure></p>
<p>这书是 1995 年出版的，那时候 C99 都还没出。。</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="我来教你杀" data-pswp-title="我来教你杀" src="https://s1.ax1x.com/2018/10/15/ia90cn.jpg" sizes="auto">
    <figcaption>我来教你杀</figcaption>
</figure></p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="网址速查" data-pswp-title="网址速查" src="https://s1.ax1x.com/2018/10/15/ia9w1s.jpg" sizes="auto">
    <figcaption>网址速查</figcaption>
</figure></p>
<p>这个应该是 hao123 之类的「网址大全」出现之前的东西了</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="Email" data-pswp-title="Email" src="https://s1.ax1x.com/2018/10/15/ia9dpj.jpg" sizes="auto">
    <figcaption>Email</figcaption>
</figure></p>
<p>那时收发电子邮件还要学，而现在很多人几乎不知电子邮件是啥了。。</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="web-master" data-pswp-title="web-master" src="https://s1.ax1x.com/2018/10/15/ia9UhQ.jpg" sizes="auto">
    <figcaption>web-master</figcaption>
</figure></p>
<p>我晓得，这是递归！</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="教您老学上网" data-pswp-title="教您老学上网" src="https://s1.ax1x.com/2018/10/15/ia9Ntg.jpg" sizes="auto">
    <figcaption>教您老学上网</figcaption>
</figure></p>
<p>表情包.jpg</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="冲浪" data-pswp-title="冲浪" src="https://s1.ax1x.com/2018/10/15/ia9tAS.jpg" sizes="auto">
    <figcaption>冲浪</figcaption>
</figure></p>
<p>你能跟上我的斯必得么</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="标题" data-pswp-title="标题" src="https://s1.ax1x.com/2018/10/15/ia9J78.jpg" sizes="auto">
    <figcaption>标题</figcaption>
</figure></p>
<p>★ 是 ☆ 这 ✦ 样 ✧ 嘛 ♩</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="yahoo" data-pswp-title="yahoo" src="https://s1.ax1x.com/2018/10/15/ia9G0f.jpg" sizes="auto">
    <figcaption>yahoo</figcaption>
</figure></p>
<p>雅虎都死透了（</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="论坛、聊天室及 QQ" data-pswp-title="论坛、聊天室及 QQ" src="https://s1.ax1x.com/2018/10/15/ia98nP.jpg" sizes="auto">
    <figcaption>论坛、聊天室及 QQ</figcaption>
</figure></p>
<p>聊天室早已被 QQ 群等取代，国内论坛凋敝之势更是存在已久，QQ 倒是长青至此，不可思议。</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="全球 www 寻呼电话簿" data-pswp-title="全球 www 寻呼电话簿" src="https://s1.ax1x.com/2018/10/15/ia9Em6.jpg" sizes="auto">
    <figcaption>全球 www 寻呼电话簿</figcaption>
</figure></p>
<p>如今被 app 包围的大家甚至 url 都不怎么知道了。</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="冲浪-2" data-pswp-title="冲浪-2" src="https://s1.ax1x.com/2018/10/15/ia9nte.jpg" sizes="auto">
    <figcaption>冲浪-2</figcaption>
</figure></p>
<p>ibid</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="MSN" data-pswp-title="MSN" src="https://s1.ax1x.com/2018/10/15/ia99fJ.jpg" sizes="auto">
    <figcaption>MSN</figcaption>
</figure></p>
<p>MSN 也已经成为历史的尘埃了啊</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="大学网址" data-pswp-title="大学网址" src="https://s1.ax1x.com/2018/10/15/iapxTU.jpg" sizes="auto">
    <figcaption>大学网址</figcaption>
</figure></p>
<p>其实里边还有不少篇幅的学校介绍</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="use qq" data-pswp-title="use qq" src="https://s1.ax1x.com/2018/10/15/iapjmV.jpg" sizes="auto">
    <figcaption>use qq</figcaption>
</figure></p>
<p>聊天圣手（什么鬼</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="understand qq" data-pswp-title="understand qq" src="https://s1.ax1x.com/2018/10/15/iapTYQ.jpg" sizes="auto">
    <figcaption>understand qq</figcaption>
</figure></p>
<p>我确实不懂 qq 这玩意</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="Google earth" data-pswp-title="Google earth" src="https://s1.ax1x.com/2018/10/15/iapqln.jpg" sizes="auto">
    <figcaption>Google earth</figcaption>
</figure></p>
<p>说起来搞出 google earth 的 keyhole 是 Niantic Labs. 的猩猩王以前搞的</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="Google" data-pswp-title="Google" src="https://s1.ax1x.com/2018/10/15/iapoFg.jpg" sizes="auto">
    <figcaption>Google</figcaption>
</figure></p>
<p>Google 改变生活，Google 退华恍如昨日</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="c&#43;&#43;" data-pswp-title="c&#43;&#43;" src="https://s1.ax1x.com/2018/10/15/iap5TS.jpg" sizes="auto">
    <figcaption>c&#43;&#43;</figcaption>
</figure></p>
<p>21 天精通 C++（大雾</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="Java 2" data-pswp-title="Java 2" src="https://s1.ax1x.com/2018/10/15/iap2QI.jpg" sizes="auto">
    <figcaption>Java 2</figcaption>
</figure></p>
<p>你醒啦？Java 11 都出来啦。</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="DOS" data-pswp-title="DOS" src="https://s1.ax1x.com/2018/10/15/iap6Wd.jpg" sizes="auto">
    <figcaption>DOS</figcaption>
</figure></p>
<p>可真是个帅小伙（</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="win 95" data-pswp-title="win 95" src="https://s1.ax1x.com/2018/10/15/iapBdO.jpg" sizes="auto">
    <figcaption>win 95</figcaption>
</figure></p>
<p>你醒啦？Windows 又退到 10 啦</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="WP8" data-pswp-title="WP8" src="https://s1.ax1x.com/2018/10/15/iapyJH.jpg" sizes="auto">
    <figcaption>WP8</figcaption>
</figure></p>
<p>Windows phone 死的太憋屈了，唉</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="太🐂了" data-pswp-title="太🐂了" src="https://s1.ax1x.com/2018/10/15/iapDoD.jpg" sizes="auto">
    <figcaption>太🐂了</figcaption>
</figure></p>
<p>Android 4.0.4</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="android advanced" data-pswp-title="android advanced" src="https://s1.ax1x.com/2018/10/15/iapgSA.jpg" sizes="auto">
    <figcaption>android advanced</figcaption>
</figure></p>
<blockquote>
<p>愿你刷机半生，归来仍是 MIUI</p>
</blockquote>
<p>另，请各款在 8102 年还没见到人脸识别的旗舰机自行自尽</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="google play" data-pswp-title="google play" src="https://s1.ax1x.com/2018/10/15/iapsFe.jpg" sizes="auto">
    <figcaption>google play</figcaption>
</figure></p>
<p>现在倒好，连阉割的 Google play 都不能直接访问了。</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="hacker" data-pswp-title="hacker" src="https://s1.ax1x.com/2018/10/15/iap0eK.jpg" sizes="auto">
    <figcaption>hacker</figcaption>
</figure></p>
<p>再见，我去学黑客了！</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="红旗linux" data-pswp-title="红旗linux" src="https://s1.ax1x.com/2018/10/15/iapUQ1.jpg" sizes="auto">
    <figcaption>红旗linux</figcaption>
</figure></p>
<p>…………</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="Xteam Linux" data-pswp-title="Xteam Linux" src="https://s1.ax1x.com/2018/10/15/iapdL6.jpg" sizes="auto">
    <figcaption>Xteam Linux</figcaption>
</figure></p>
<p>小企鹅网上冲浪中（</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="vi" data-pswp-title="vi" src="https://s1.ax1x.com/2018/10/15/iapasx.jpg" sizes="auto">
    <figcaption>vi</figcaption>
</figure></p>
<p>其实后面有介绍 Vim，那个年代就开始对 Linux 有一定了解并开始使用的人，其实真的挺厉害的</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="详情" data-pswp-title="详情" src="https://s1.ax1x.com/2018/10/15/iapYW9.jpg" sizes="auto">
    <figcaption>详情</figcaption>
</figure></p>
<p>那时 25 块也算是巨款了吧（</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="xp" data-pswp-title="xp" src="https://s1.ax1x.com/2018/10/15/iaptzR.jpg" sizes="auto">
    <figcaption>xp</figcaption>
</figure></p>
<p>现在还有人在用 XP 哒！</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="886" data-pswp-title="886" src="https://s1.ax1x.com/2018/10/15/ia91Xt.jpg" sizes="auto">
    <figcaption>886</figcaption>
</figure></p>
<p>721, 596, 88</p>
]]></content><category scheme="https://blog.batkiz.com/tags/pics" term="pics" label="pics"/><category scheme="https://blog.batkiz.com/tags/%E8%80%83%E5%8F%A4" term="%E8%80%83%E5%8F%A4" label="考古"/></entry><entry><title type="html">翻译 | RSS 的兴起与衰落</title><link href="https://blog.batkiz.com/posts/2018/translation-the-rise-and-demise-of-rss/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2018/rss-is-best/?utm_source=atom_feed" rel="related" type="text/html" title="RSS，今日头条与信息爆炸"/><link href="https://blog.batkiz.com/posts/2018/using-wsl/?utm_source=atom_feed" rel="related" type="text/html" title="wsl 使用指北"/><link href="https://blog.batkiz.com/posts/2018/useful-telegram-bots/?utm_source=atom_feed" rel="related" type="text/html" title="telegram bots 推荐"/><link href="https://blog.batkiz.com/posts/2018/solving-cmder-space/?utm_source=atom_feed" rel="related" type="text/html" title="解决 cmder 光标问题"/><link href="https://blog.batkiz.com/posts/2018/a-short-introduction-to-markdown/?utm_source=atom_feed" rel="related" type="text/html" title="a-short-introduction-to-markdown"/><id>https://blog.batkiz.com/posts/2018/translation-the-rise-and-demise-of-rss/</id><published>2018-10-09T14:58:44+00:00</published><updated>2018-10-09T14:58:44+00:00</updated><content type="html"><![CDATA[<p>原文：<a href="https://twobithistory.org/2018/09/16/the-rise-and-demise-of-rss.html">The Rise and Demise of RSS</a></p>
<p>翻译：<a href="https://github.com/batkiz">batkiz</a>，校对：<a href="https://github.com/ruinsyi">RUInsYi</a></p>
<p>这有两个故事。第一个故事是关于一个从未完全实现的对互联网未来的愿景。第二个故事，则讲述了改善一个流行标准的合作是如何演变为开源软件发展史上最富争议的问题之一。</p>
<p>90 年代末，在那个网景公司 IPO 与互联网泡沫崩溃间的狂热年代，每个人都能预见到互联网行将变成更为庞大的产业，尽管没人确切知道它是如何如何做到的。一种观点认为 <strong>信息聚合</strong> 将席卷整个互联网产业。最初为了使两端——服务端，与从服务端抓取文档的客户端——间的简单交流成为可能而建立的互联网，将因一种在一系列频道中重新打包并分发所有网站的新标准而蜕变。Kevin Werbach，<em>Release 1.0</em>，90 年代一封在投资者中影响深远的通讯的作者，曾预测信息聚合“会演化为互联网生态的核心模式，在允许企业和个人享受大规模、大范围的益处同时，保留对他们网络形象的控制。”<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> 他邀请他的读者一同想象这样的未来，剑术迷能够直接在他们最爱的网站上通过嵌入其中的网购插件买一把新的重剑，而非直接去“在线运动品商店”或“击剑设备零售商”。<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> 就如同电视世界中，大的网络提供商能够将他们的节目聚合到一个较小的地方电视台，网络上的信息聚合能使销售商和出版商通过大量的中间站点接触到消费者。这意味着，作为结论，消费者会在与销售商和出版商互动上，拥有天时地利人和的选择权。</p>
<p>RSS 是承诺提供这样的聚合化未来的标准之一。对于 Werbach，RSS 是“轻量级聚合协议的领先范例。”<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> 另一篇同期文章将 RSS 称为第一个意识到 XML 的潜力的协议。<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> 它正成为使用户与内容整合者能够从必须提供一切信息的网站中创造个性化定制的频道的一种方式。而现在，二十年后，RSS <a href="https://trends.google.com/trends/explore?date=all&amp;geo=US&amp;q=rss">像是成为了一种将死的技术</a>，仅仅主要被播客与程序员们的科技博客使用。此外，在后来的群体中，比起实际效用，RSS 可能更主要因其政治上的象征意义而被使用。尽管有些人确实有 RSS 读者，并顽固地为博客加入 RSS 服务，这在 2018 年也是一种十分保守的表态。那个小小的橘子泡（译注：指 RSS 标志）已然成为一个象征着对与 Werbach 的想象中的聚合网络一点也不像的巨头垄断式中心化网络的反抗标志。</p>
<p>RSS 的未来曾是如此光明。那到底是发生了什么呢？难道它的衰落是不可避免的？还是它在一个单一 RSS 标准的发展中因内斗而落没？</p>
<h2 id="浑水">
    浑水 
    <a href="#%e6%b5%91%e6%b0%b4" class="anchor-link">#</a>
</h2><p>RSS 曾两度被发明。这意味着，它从未有过一个明白无误的拥有者，一系列的事务又催生了无止境的争吵与辩论。但这也同时表明，作为一个重要想法， RSS 的时代已经到来。</p>
<p>1998 年，网景正竭力想象自己的未来。它的旗舰产品，曾一度被 80% 的互联网用户所选择的网景浏览器，正在 IE 浏览器前迅速失去份额。所以网景决定在一个全新的领域竞争。五月份，一个小组被组建起来，开始了后来被内部称为“Project 60”的项目。<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> 两个月后，网景宣布了“My Netscape”，一个与其他互联网门户如雅虎，MSN 及 Excite 相竞争的互联网门户。</p>
<p>第二年三月，网景宣布了一个叫&quot;My Netscape Network&quot;的 My Netscape 门户扩展。My Netscape 用户现在可以自定义他们的 My Netscape 页面所以它包含了名为“channels&quot;的功能，汇集网络上最近的头条新闻。只要你最爱的网站发布了一个由网景规定格式的特殊文件，一般只需点击网站在其界面提供的“Add Channel”按键，你就能把这个网站添加到你的 My Netscape 页面。如此，一个包含着一列相关头条的小盒子就会出现。</p>
<p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="mnn-channel" data-pswp-title="mnn-channel" src="https://s1.ax1x.com/2018/09/22/iupTPJ.gif" sizes="auto">
    <figcaption>mnn-channel</figcaption>
</figure></p>
<p>这个参与网站必须发布的特殊文件就是一个 RSS 文件。在 My Netscape Network 的声明中，网景解释称 RSS 代表着”RDF Site Summary“。<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> 这多少有几分用词不当。RDF，全称 Resource Description Framework，主要是一个描述各种资源属性的语法（如果感兴趣的话，看 <a href="https://twobithistory.org/2018/05/27/semantic-web.html">我的关于语义网的这篇文章</a>。1999 年，W3C 组织开始考虑 RDF 的规范草案。尽管 RSS 应该是基于 RDF 的，网景释出的示例 RSS 文件却没有用任何 RDF 标签，即使它声明了 RDF XML 命名空间。在一份与网景 RSS 规范一同释出的文件中，规范作者之一的 Dan Libby 解释称“在 MNN 的发布中，网景曾有意的限制了 RSS 格式的复杂性”。<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup> 这份规范的版本号是 0.90，因为他们相信在 W3C 的 XML 规范与新的 RDF 标准下，RSS 接下来的版本会更加完善。</p>
<p>RSS 曾被 Libby 与 Ramanathan Guha，另一个网景雇员一同定义。Guha 之前在苹果公司工作，并在那里提出了 Meta Content Framework。MCF 是一个意图描述从网页到本地文件等一切的表示元数据格式。Guha 为证明其力量，开发了一个名为 <a href="http://web.archive.org/web/19970703020212/http://mcf.research.apple.com:80/hs/screen_shot.html">HotSauce</a> 的程序，能在 3D 空间中以节点网络的形式可视化显示文件间关系。在离开苹果加入网景后，Guha 与 Tim Bray，一个网景顾问，一同为制作一个基于 XML 版本的 MCF 而工作，而这成为了 W3C 的 RDF 草案的基础。<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup> 之后，不出意外的，Guha 与 Libby 急于将 RDF 合并进 RSS。但 Libby 后来写道，由于时间限制及 RDF “对于‘一般用户’太‘过于复杂’”，基于 RDF 的 RSS 比之最初的设想，削减了很多。<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup></p>
<p>正当网景努力在后来被称为“门户大战”的竞争中夺人眼球时，一种闻名为“博客”的现象正在互联网的其他地方悄然登场。<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup> Dave Winery 正是那些先驱者之一，他是一家叫 UserLand Software 的公司的 CEO，这家公司开发了早期的内容管理系统，能让非技术娴熟的人更容易地书写博客。Winer 经营着他名为 <a href="http://scripting.com/">Scripting News</a> 的个人博客，这也是网上现存的最古老的博客之一。在 1997 年的 12 月 15 日，网景宣布 My Netscape Network 一年多以前，Winer 发布了一篇文章宣布博客现在已能通过 XML 与 HTML 一同获得。<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup></p>
<p>Dave Winer 的 XML 格式闻名为 Scripting News 格式。它可能与微软的 Channel Definition 格式（一个在 1997 年 3 月提交给 W3C 的“推送技术”标准）相似，但我并不能找到一个原始格式的文件来验证这个说法。[^12] 如同网景的 RSS，它组织了 Winer 的博客内容以便于其他的软件应用理解。当网景发布 RSS 0.90 时，Winer 与 UserLand Software 开始同时支持两种格式。但 Winer 相信网景的格式“极其劣质”且“失去了网络作者与读者需要的关键”。<sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup> 它只能表现一列链接，反之，Scripting News 格式能够表现一系列的段落，每个都能包含一个或多个链接。</p>
<p>1999 年 6 月，网景宣布 My Netscape Network 两个月后，Winer 介绍了 Scripting News 格式的新版本，称为 ScriptingNews 2.0b1。Winer 声称曾尝试与网景获得联系以指出 RSS 0.90 的不足但失败了，只好决定继续完善他自己的格式。<sup id="fnref:13"><a href="#fn:13" class="footnote-ref" role="doc-noteref">13</a></sup> Scripting News 格式的新版本在 <code>&lt;header&gt;</code> 元素中加入了几个新项目以使 Scripting News 格式与 RSS 同等。但这两种格式继续与 Scripting News 格式—— Winer 昵称其为“胖”聚合格式，能够包含整个段落，而非仅仅是链接——不同。</p>
<p>网景在第二个月宣称 RSS 0.91 将会放出。这个更新的规范是一个大转变。 RSS 不再表示&quot;RDF Site Summary&quot;；它现在代表&quot;Rich Site Summary&quot;。所有的 RDF——已经几乎没有了的——被剥离。许多 Scripting News 标签被合并。在新规范的文本中，Libby 解释道：</p>
<blockquote>
<p>RDF 引用被移除了。RSS 最初被构思为一个提供网站摘要的元数据格式。两件事变得明了了：第一个是提供者更想要一个聚合格式而非元数据格式。RDF 文件的结构非常严格，而且符合 RDF 的数据模型为了使其有效。这并不能很容易地被人所理解，而且非常难以创建有用的 RDF 文件。第二个问题是只有很少的工具可用于 RDF 部署，验证与处理。因为上述原因，我们决定附属于一个标准的 XML 途径。<sup id="fnref:14"><a href="#fn:14" class="footnote-ref" role="doc-noteref">14</a></sup></p>
</blockquote>
<p>Winer 对 RSS 0.91 非常满意，称之“出乎意料的更好”<sup id="fnref:15"><a href="#fn:15" class="footnote-ref" role="doc-noteref">15</a></sup> UserLand Software 将其采用为已存在的 ScriptingNews 2.0b1 格式的替代。一下子，RSS 貌似终于有了一个单一的权威规范。</p>
<h2 id="大分叉">
    大分叉 
    <a href="#%e5%a4%a7%e5%88%86%e5%8f%89" class="anchor-link">#</a>
</h2><p>一年后，RSS 0.91 规范变得严重不充分。人们想用 RSS 处理种种标准未处理的事情。规范的另一些部分看起来则是毫无必要的约束——比如每个 RSS 频道最多只能包含 15 项。</p>
<p>在那时，RSS 已经被更多的几个组织所接受。与看起来在 RSS 0.91 后已失去兴趣的网景不同，大玩家分别是 Dave Winer 的 UserLand Software；经营着一个名为 Meerkat 的 RSS 聚合器的 OReilly Net；以及同样经营着一个专注于新闻的 RSS 聚合器的 Moreover.com。<sup id="fnref:16"><a href="#fn:16" class="footnote-ref" role="doc-noteref">16</a></sup> 通过邮件列表，这些组织的代表与其他人定期讨论如何改良 RSS 0.91。但关于如何改良的问题他们也有着深远的分歧。</p>
<p>发生最多讨论的邮件列表被称为信息聚合邮件列表（译注：the Syndication mailing list，暂译）。<a href="https://groups.yahoo.com/neo/groups/syndication/info">一份信息聚合邮件列表的存档</a> 现在仍可获得。这是一份令人惊异的历史资源。它给出了那些分歧是如何最终导致 RSS 社区的政治决裂的实时说明。</p>
<p>首当其冲的一方是 Winer。Winer 对于改善 RSS 非常急躁，但他想要以相对保守的方式来改变它。在 2000 年 6 月，他在 UserLand 网站上公布了他自己的 RSS 0.91 标准，意味着 RSS 更深一层发展的起点。它对网景公布的 RSS 0.91 标准没有任何的重大改变。Winer 在一篇博文中声称伴随着他的标准的仅仅是一份必要的 RSS 如何在真实环境被使用的“清理”文档，因为网景的标准已经不再维护。<sup id="fnref:17"><a href="#fn:17" class="footnote-ref" role="doc-noteref">17</a></sup> 同一篇文章中，他认为 RSS 之所以成功，是因为它足够简单，如果将命名空间或 RDF 再添加到这个格式中——在信息聚合邮件列表中的一些人已经建议做这些事——它“会极大地复杂化，恕我直言，在内容提供者层面，提升复杂性什么都给我们带来”。几乎同时，在一则被发到信息聚合邮件列表的信息中，Winer 建议，那些问题已经足够重要，这可能使他去创建一个分支：</p>
<blockquote>
<p>我仍在思考如何使 RSS 继续发展。我当然想要在 RSS2 中使用 冰一样的东西，发布与订阅在我的列表顶部，但我将竭力维护简单性。我喜欢可选的元素。我不想走命名空间与提要的老路，或者试着把它变成 RDF 的一种方言。我理解某些人想要这样，因此我猜我们走到了一个分岔点。我对另一条路将会走向何方有着自己的见解，但至少在现在我不会将这些公之于众。<sup id="fnref:18"><a href="#fn:18" class="footnote-ref" role="doc-noteref">18</a></sup></p>
</blockquote>
<p>一起反对 Winer 的是其他几个人，包括 O&rsquo;Reilly 的 Rael Dornfest，Ian Davis（一家名为 Calaba 的搜索初创企业的负责人），与一位早熟的 14 岁少年 Aaron Swartz，他们都认为 RSS 需要命名空间以容纳大家想要用它处理的许多不同事物。在另一个由 O&rsquo;Reilly 主办的邮件列表中，Davis 提出了一个基于命名空间的模块系统，写道这样一个系统会“使 RSS 比起往过复杂的规范中填充新功能，能像我们想要的那样可扩展”。<sup id="fnref:19"><a href="#fn:19" class="footnote-ref" role="doc-noteref">19</a></sup> “命名空间阵营”相信 RSS 很快会比起作为博客文章聚合，能被用的更多，所以命名空间不是成为并发症，而是保持 RSS 在处理越来越多的情况时保持可被管理的唯一办法。</p>
<p>关于命名空间的争论，其根源在于 RSS 究竟为何这一问题更深层面的意见不一。Winer 为了同步聚合他博客的博文而创造了他的 Scripting News 格式。Guha 与 Libby 在网景设计了 RSS 并称其为“RDF Site Summary”，因为在他们脑中这是一个在网景的在线门户中以缩略重写一个网站的方法。Davis 在写给 Syndication 邮件列表时解释称他认为 RSS “最初被构思为一个建立迷你站点地图的方法”，现在他和其他人想扩展 RSS “以比起简单的新闻标题包含更多种类的信息，及满足过去十二个月里出现的 RSS 的新应用”。<sup id="fnref:20"><a href="#fn:20" class="footnote-ref" role="doc-noteref">20</a></sup> Winer 写了一篇多刺的回复，陈述称他的 Scripting News 格式事实上是原本的 RSS，而且它已经有了不同的目的。鉴于参与 RSS 开发的大多数人在 RSS 为何被创造一事上意见不合，一个分支看起来是不可避免的。</p>
<p>分支发生在 Dornfest 宣布提出 RSS 1.0 标准并形成 RSS-DEV 工作团队——将会包括 Davis, Swartz 及其他几位但并没有 Winer——以对发表做好准备。在被提出的标准中，RSS 再一次代表“RDF Site Summary”，因为 RDF 已经又被加了回来以代表几个 RSS 元素的元数据属性。这份标准承认了 Winer 的名字，给了他通过他的“传道”推广 RSS 的声誉。<sup id="fnref:21"><a href="#fn:21" class="footnote-ref" role="doc-noteref">21</a></sup> 但它也指出仅仅给 RSS 添加更多的元素而没有通过一个模块系统提供可扩展性——这正是 Winer 所建议的——“牺牲了可扩展性”。这份标准继续为 RSS 定义一个基于 XML 命名空间的模块系统。</p>
<p>Winer 对于 RSS-DEV 工作团队自行霸占了“RSS 1.0”之名非常愤怒。<sup id="fnref:22"><a href="#fn:22" class="footnote-ref" role="doc-noteref">22</a></sup> 在另一个关于分散化的邮件列表中，他将 RSS-DEV 工作团队的作为描述为剽窃。<sup id="fnref:23"><a href="#fn:23" class="footnote-ref" role="doc-noteref">23</a></sup> 聚合邮件列表的其他成员也感觉 RSS-DEV 工作团队在社区就如何发展 RSS 这一问题上达成一致之前不该使用“RSS”的名字。但是工作团队坚持使用这个名字。Dan Brickley，RSS-DEV 工作团队的一个成员，为这个决定辩护称“提议中的 RSS 1.0 绝对是基于原始的 RSS 的愿景，其本身曾有相当的遗产影响了 MCF （一个 RDF 的前身）与相关的规格（CDF 等）”。<sup id="fnref:24"><a href="#fn:24" class="footnote-ref" role="doc-noteref">24</a></sup> 他基本上感觉比起 Winer，RSS 1.0 的努力对 RSS 之名有着更好的声明，因为 RDF 原来就是 RSS 的一部分。RSS-DEV 工作团队在 12 月发布了他们的标准的最终版本。同一个月，Winer 发布了他自己对于 RSS 0.91 的改进，他在 UserLand 网站上将其称为 RSS 0.92。RSS 0.92 对 RSS 做了一些小的可选改进，很快增加的 <code>&lt;enclosure&gt;</code> 标签被大范围用于播客。RSS 有了官方的分支。</p>
<p>我仍不清楚为何没能更好地让 Winer 进入 RSS-DEV 工作团队中。正如工作团队中的人们承认的，他是聚合邮件列表中的一名杰出贡献者，且对 RSS 的流行有着显著的贡献。但 Tim O&rsquo;Reilly，O&rsquo;Reilly 的创始人与 CEO，在一个 UserLand 讨论组中解释道 Winer 或多或少地拒绝了参与：</p>
<blockquote>
<p>一群参与了 RSS 的人聚在一起以思考其未来的演变。Dave 是团队的一部分。当团队的一致意见转向了他不喜欢的方向时，Dave 停止了参与，并将其表现得像是 O&rsquo;Reilly 图谋从他那接管 RSS ，罔顾 O&rsquo;Reilly 的 Rael Dornfest 只是被提议的 RSS 1.0 标准众多作者之一的事实，且作者中的很多人在开发中都有着与 Dave 同等的历史。<sup id="fnref:25"><a href="#fn:25" class="footnote-ref" role="doc-noteref">25</a></sup></p>
</blockquote>
<p>对此，Winer 曾言：</p>
<blockquote>
<p>我在那份声明的两周前碰到了 Dale [Dougherty]，他对于其将被称为 RSS 1.0 的事什么都没说。在其被宣布之前的周五，我与 Rael 通了电话，同样他也没说他们将称之为 RSS 1.0。在其公开宣布时我才知道。</p>
<p>让我问你一个直接的问题。如果证明了那份标准被命名为“RSS 1.0”的计划完全被秘密的完成，没有任何的预先通知或是商议，或者是一个让聚合邮件列表里的成员们同意与否的机会，而且不仅仅是我，你会做什么？</p>
<p>UserLand 为创造、普及与支持 RSS 做了大量的工作。我们离开了，让你们这些家伙拥有了这个名字。这就是高层。如果我想对网络聚合做任何进一步的工作，我必须用一个不同的名字。Tim 为什么又怎么会这样？<sup id="fnref:26"><a href="#fn:26" class="footnote-ref" role="doc-noteref">26</a></sup></p>
</blockquote>
<p>我不能在聚合邮件列表中找到任何在使用 RSS 1.0 名称声明的提议前的讨论。</p>
<p>RSS 在 2003 年将再度分支，当时几位开发者对于 RSS 社区中的争吵感到非常沮丧，于是寻求创造一个全新的格式。这些开发者创造了 Atom，一个废除了 RDF 而拥抱 XML 命名空间的格式。Atom 最终被 <a href="https://tools.ietf.org/html/rfc4287">一个提议的 IETF 标准</a> 所规定。在 Atom 的推行之后，有了三个相竞争的 RSS 版本：Winer 的 RSS 0.92（在 2002 年升级为 RSS 2.0 并被重命名为“Really Simple Syndication”），RSS-DEV 工作团队的 RSS 1.0，以及 Atom。</p>
<h2 id="衰落">
    衰落 
    <a href="#%e8%a1%b0%e8%90%bd" class="anchor-link">#</a>
</h2><p>相竞争的 RSS 标准的增加可能在我会简短讨论的其他方面阻碍了 RSS。但这并没有阻止 RSS 在 2000 年间变得极为流行。2004 年，纽约时报开始用 RSS 提供其新闻摘要并写了一篇文章对外行人解释何为 RSS 与如何使用。<sup id="fnref:27"><a href="#fn:27" class="footnote-ref" role="doc-noteref">27</a></sup> Google Reader，一个最终被数百万人使用的 RSS 聚合器，在 2005 年面世。2013 年，RSS 看起来已足够流行到纽约时报，在其对 Aaron Swartz 的讣告中，称之为“无所不在的”技术。<sup id="fnref:28"><a href="#fn:28" class="footnote-ref" role="doc-noteref">28</a></sup> 一时间，在整个世界三分之一的人都注册了 Facebook 前，RSS 一直是网络上很多人了解最新新闻的渠道。</p>
<p>纽约时报在 2013 年一月发行了 Swartz 的讣告。然而到了那个时候， RSS 事实上已经到了拐点，并在其成为一个鲜为人知的技术之路上渐行渐远。Google Reader 在 2013 年七月被关闭，表面上是因为“在过去几年间”用户数量一直在下降。<sup id="fnref:29"><a href="#fn:29" class="footnote-ref" role="doc-noteref">29</a></sup> 这引出了几篇不同途径的文章宣称 RSS 已死。但多年来人们一直宣称 RSS 已死，甚至在 Google Reader 关闭之前。Steve Gillmor，在 2009 年五月为 TechCrunch 的文章中，建议称“是时候完全离开 RSS 并转向 Twitter 了”因为“RSS 再也不能办成事了”。<sup id="fnref:30"><a href="#fn:30" class="footnote-ref" role="doc-noteref">30</a></sup> 他指出 Twitter 基本上是一个更好的 RSS 资讯，因为它在文章自身之外，能展示给你人们正在想什么。它允许你关注人而非只是频道。Gillmor 告诉他的读者，是时候让 RSS 撤回幕后了。他以鲍勃迪伦的“Forever Young”中的一节结束了文章。</p>
<p>现在，RSS 仍未死亡。但也不像过去那样那么流行了。很多人对 RSS 为何失去了其普及度做出了种种解释。最具说服力的解释可能是 Gillmor 在 2009 年给出的。社交网络，就像 RSS 一样，提供了一个能看到网络上所有最新信息的信息流。社交网络接替了 RSS 仅仅是因为它们是更好的信息流。它们也给所属公司带来了更多的利益。有些人曾指责谷歌，例如，关闭了 Google Reader 以使人们去用 Google+。Google 可能能在 Google+ 上以 Google Reader 无法提供的途径赚钱。Marco Arment，Instapaper 的创始人，于 2013 年在其博客中写道：</p>
<blockquote>
<p>Google Reader 仅仅是 Facebook 发起的战争中最新的伤亡，看起来非常偶然：决定谁来拥有一切的战争。当谷歌事实上“拥有” Google Reader 且能利用其中产生的巨量的新闻与关注度数据，这与他们更重要的 Google+ 策略相冲突：他们需要每个人都通过 Google+ 来阅读与分享一切信息这样他们才能够在广告定位数据，广告收入，增长及关联性上与 Facebook 竞争。<sup id="fnref:31"><a href="#fn:31" class="footnote-ref" role="doc-noteref">31</a></sup></p>
</blockquote>
<p>如此用户与科技公司两者都意识到比起使用 RSS，他们能在使用社交网络时获得更多。</p>
<p>另一个理论则是 RSS 对于普通用户来说一直都太极客了。就连曾急于接受 RSS 并向其读者推广的纽约时报，也在 2006 年抱怨道 RSS 是“电脑极客们”所创造的“对用户极为不友好”的首字母缩略词。<sup id="fnref:32"><a href="#fn:32" class="footnote-ref" role="doc-noteref">32</a></sup> 在 2004 年 RSS 的图标被设计出来之前，像纽约时报一样的网站将他们的 RSS 信息链接到一个标有“XML”的橘色小方块上，显然这只是令人生畏。<sup id="fnref:33"><a href="#fn:33" class="footnote-ref" role="doc-noteref">33</a></sup> 尽管这个标记非常准确，因为点击这个链接会将不幸的用户带到一整页的 XML 代码。<a href="https://twitter.com/mgsiegler/status/311992206716203008">这条非常好的推特</a> 捕获了 RSS 为何消亡的本质。普通人从未对使用 RSS 感到舒适；它从未真正被设计为一个面向消费者的技术且包含了太多的障碍；人们在更好的选择到来时便跳槽走了。</p>
<p>如果有着更长远的发展，RSS 可能能够克服种种局限性。可能 RSS 能以某种方法被扩展以使订阅了相同频道的朋友们能相互同步他们关于某篇文章的想法。但在 RSS 开发者社区被卡在试图达成一致的时候，反之，像 Facebook 一样的公司能够“快速行动”。RSS 大分叉仅仅说明了那样做有多么难。所以如果我们扪心自问 RSS 为什么再也不流行，一个非常好的解释是社交网络取代了它。如果我们扪心自问社交网络为何能够取代它，答案可能是试图使 RSS 成功的人们面临着远比如建立 Facebook 更难的问题。如 Dornfest 在某个时刻给聚合邮件列表写的，“现在它比起序列化更像是政治，远不简单。”<sup id="fnref:34"><a href="#fn:34" class="footnote-ref" role="doc-noteref">34</a></sup></p>
<p>所以现在我们只剩下集中的大量信息。某种程度上，我们 <strong>确实</strong> 有了 Kevin Werbach 在 1999 年预见的聚合互联网。毕竟，《洋葱》是一个依赖通过 Facebook 与推特的出版物，正如《宋飞正传》在其最初的运行后依赖于聚合赚取了数十亿的利润。但是网络上的聚合只出现在极少数频道中，意味着我们中没人能“控制我们的网络形象”，如同 Werbach 描述的那样。发生这种情况的一个原因是企业普遍的贪婪——RSS 作为一个开放格式，不能使科技公司控制数据及他们所需要的广告观看者，所以他们不支持它。但更为普通的原因是集中存储比起共同标准更易设计。共识非常难以达到，这也需要时间，但没有共识被拒绝的开发者将会离开并创造相竞争的标准。这给我们的教训可能是如果我们想要看见一个更好、更开放的网络，我们必须在不强迫对方之上做的更好。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Kevin Werbach, “The Web Goes into Syndication,” Release 1.0, July 22, 1999, 1, accessed September 14, 2018, <a href="http://cdn.oreillystatic.com/radar/r1/07-99.pdf">http://cdn.oreillystatic.com/radar/r1/07-99.pdf</a>. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>ibid.（同上） <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Werbach, 8. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>Peter Wiggin, “RSS Delivers the XML Promise,” Web Review, October 29, 1999, accessed September 14, 2018, <a href="https://people.apache.org/~jim/NewArchitect/webrevu/1999/10_29/webauthors/10_29_99_2a.html">https://people.apache.org/~jim/NewArchitect/webrevu/1999/10_29/webauthors/10_29_99_2a.html</a>. <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>Ben Hammersley, RSS and Atom (O’Reilly), 8, accessed September 14, 2018, <a href="https://books.google.com/books?id=kwJVAgAAQBAJ">https://books.google.com/books?id=kwJVAgAAQBAJ</a>. <a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6" role="doc-endnote">
<p>“RSS 0.90 Specification,” RSS Advisory Board, accessed September 14, 2018, <a href="http://www.rssboard.org/rss-0-9-0">http://www.rssboard.org/rss-0-9-0</a>. <a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7" role="doc-endnote">
<p>“My Netscape Network Future Directions,” RSS Advisory Board, accessed September 14, 2018, <a href="http://www.rssboard.org/mnn-futures">http://www.rssboard.org/mnn-futures</a>. <a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8" role="doc-endnote">
<p>Tim Bray, “The RDF.net Challenge,” Ongoing by Tim Bray, May 21, 2003, accessed September 14, 2018, <a href="https://www.tbray.org/ongoing/When/200x/2003/05/21/RDFNet">https://www.tbray.org/ongoing/When/200x/2003/05/21/RDFNet</a>. <a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9" role="doc-endnote">
<p>Dan Libby, “RSS: Introducing Myself,” August 24, 2000, RSS-DEV Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/rss-dev/conversations/topics/239">https://groups.yahoo.com/neo/groups/rss-dev/conversations/topics/239</a>. <a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10" role="doc-endnote">
<p>Alexandra Krasne, “Browser Wars May Become Portal Wars,” CNN, accessed September 14, 2018, <a href="http://www.cnn.com/TECH/computing/9910/04/portal.war.idg/index.html">http://www.cnn.com/TECH/computing/9910/04/portal.war.idg/index.html</a>. <a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11" role="doc-endnote">
<p>Dave Winer, “Scripting News in XML,” Scripting News, December 15, 1997, accessed September 14, 2018, <a href="http://scripting.com/davenet/1997/12/15/scriptingNewsInXML.html">http://scripting.com/davenet/1997/12/15/scriptingNewsInXML.html</a>. <a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:12" role="doc-endnote">
<p>Dave Winer, “A Faceoff with Netscape,” Scripting News, June 16, 1999, accessed September 14, 2018, <a href="http://scripting.com/davenet/1999/06/16/aFaceOffWithNetscape.html">http://scripting.com/davenet/1999/06/16/aFaceOffWithNetscape.html</a>. <a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:13" role="doc-endnote">
<p>ibid. <a href="#fnref:13" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:14" role="doc-endnote">
<p>Dan Libby, “RSS 0.91 Specification (Netscape),” RSS Advisory Board, accessed September 14, 2018, <a href="http://www.rssboard.org/rss-0-9-1-netscape">http://www.rssboard.org/rss-0-9-1-netscape</a>. <a href="#fnref:14" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:15" role="doc-endnote">
<p>Dave Winer, “Scripting News: 7/28/1999,” Scripting News, July 28, 1999, accessed September 14, 2018, <a href="http://scripting.com/1999/07/28.html">http://scripting.com/1999/07/28.html</a>. <a href="#fnref:15" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:16" role="doc-endnote">
<p>Oliver Willis, “RSS Aggregators?” June 19, 2000, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/syndication/conversations/topics/173">https://groups.yahoo.com/neo/groups/syndication/conversations/topics/173</a>. <a href="#fnref:16" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:17" role="doc-endnote">
<p>Dave Winer, “Scripting News: 07/07/2000,” Scripting News, July 07, 2000, accessed September 14, 2018, <a href="http://essaysfromexodus.scripting.com/backissues/2000/06/07/#rss">http://essaysfromexodus.scripting.com/backissues/2000/06/07/#rss</a>. <a href="#fnref:17" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:18" role="doc-endnote">
<p>Dave Winer, “Re: RSS 0.91 Restarted,” June 9, 2000, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/syndication/conversations/topics/132">https://groups.yahoo.com/neo/groups/syndication/conversations/topics/132</a>. <a href="#fnref:18" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:19" role="doc-endnote">
<p>Leigh Dodds, “RSS Modularization,” XML.com, July 5, 2000, accessed September 14, 2018, <a href="http://www.xml.com/pub/a/2000/07/05/deviant/rss.html">http://www.xml.com/pub/a/2000/07/05/deviant/rss.html</a>. <a href="#fnref:19" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:20" role="doc-endnote">
<p>Ian Davis, “Re: [syndication] RSS Modularization Demonstration,” June 28, 2000, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/syndication/conversations/topics/188">https://groups.yahoo.com/neo/groups/syndication/conversations/topics/188</a>. <a href="#fnref:20" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:21" role="doc-endnote">
<p>“RDF Site Summary (RSS) 1.0,” December 09, 2000, accessed September 14, 2018, <a href="http://web.resource.org/rss/1.0/spec">http://web.resource.org/rss/1.0/spec</a>. <a href="#fnref:21" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:22" role="doc-endnote">
<p>Dave Winer, “Re: [syndication] Re: Thoughts, Questions, and Issues,” August 16, 2000, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/syndication/conversations/topics/410">https://groups.yahoo.com/neo/groups/syndication/conversations/topics/410</a>. <a href="#fnref:22" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:23" role="doc-endnote">
<p>Mark Pilgrim, “History of the RSS Fork,” Dive into Mark, September 5, 2002, accessed September 14, 2018, <a href="http://www.diveintomark.link/2002/history-of-the-rss-fork">http://www.diveintomark.link/2002/history-of-the-rss-fork</a>. <a href="#fnref:23" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:24" role="doc-endnote">
<p>Dan Brickley, “RSS-Classic, RSS 1.0 and a Historical Debt,” November 7, 2000, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/rss-dev/conversations/topics/1136">https://groups.yahoo.com/neo/groups/rss-dev/conversations/topics/1136</a>. <a href="#fnref:24" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:25" role="doc-endnote">
<p>Tim O’Reilly, “Re: Asking Tim,” UserLand, September 20, 2000, accessed September 14, 2018, <a href="http://static.userland.com/userLandDiscussArchive/msg021537.html">http://static.userland.com/userLandDiscussArchive/msg021537.html</a>. <a href="#fnref:25" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:26" role="doc-endnote">
<p>Dave Winer, “Re: Asking Tim,” UserLand, September 20, 2000, accessed September 14, 2018, <a href="http://static.userland.com/userLandDiscussArchive/msg021560.html">http://static.userland.com/userLandDiscussArchive/msg021560.html</a>. <a href="#fnref:26" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:27" role="doc-endnote">
<p>John Quain, “BASICS; Fine-Tuning Your Filter for Online Information,” The New York Times, 2004, accessed September 14, 2018, <a href="https://www.nytimes.com/2004/06/03/technology/basics-fine-tuning-your-filter-for-online-information.html">https://www.nytimes.com/2004/06/03/technology/basics-fine-tuning-your-filter-for-online-information.html</a>. <a href="#fnref:27" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:28" role="doc-endnote">
<p>John Schwartz, “Aaron Swartz, Internet Activist, Dies at 26,” The New York Times, January 12, 2013, accessed September 14, 2018, <a href="https://www.nytimes.com/2013/01/13/technology/aaron-swartz-internet-activist-dies-at-26.html">https://www.nytimes.com/2013/01/13/technology/aaron-swartz-internet-activist-dies-at-26.html</a>. <a href="#fnref:28" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:29" role="doc-endnote">
<p>“A Second Spring of Cleaning,” Official Google Blog, March 13, 2013, accessed September 14, 2018, <a href="https://googleblog.blogspot.com/2013/03/a-second-spring-of-cleaning.html">https://googleblog.blogspot.com/2013/03/a-second-spring-of-cleaning.html</a>. <a href="#fnref:29" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:30" role="doc-endnote">
<p>Steve Gillmor, “Rest in Peace, RSS,” TechCrunch, May 5, 2009, accessed September 14, 2018, <a href="https://techcrunch.com/2009/05/05/rest-in-peace-rss/">https://techcrunch.com/2009/05/05/rest-in-peace-rss/</a>. <a href="#fnref:30" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:31" role="doc-endnote">
<p>Marco Arment, “Lockdown,” Marco.org, July 3, 2013, accessed September 14, 2018, <a href="https://marco.org/2013/07/03/lockdown">https://marco.org/2013/07/03/lockdown</a>. <a href="#fnref:31" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:32" role="doc-endnote">
<p>Bob Tedeschi, “There’s a Popular New Code for Deals: RSS,” The New York Times, January 29, 2006, accessed September 14, 2018, <a href="https://www.nytimes.com/2006/01/29/travel/theres-a-popular-new-code-for-deals-rss.html">https://www.nytimes.com/2006/01/29/travel/theres-a-popular-new-code-for-deals-rss.html</a>. <a href="#fnref:32" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:33" role="doc-endnote">
<p>“NYTimes.com RSS Feeds,” The New York Times, accessed September 14, 2018, <a href="https://web.archive.org/web/20050326065348/www.nytimes.com/services/xml/rss/index.html">https://web.archive.org/web/20050326065348/www.nytimes.com/services/xml/rss/index.html</a>. <a href="#fnref:33" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:34" role="doc-endnote">
<p>Rael Dornfest, “RE: Re: [syndication] RE: RFC: Clearing Confusion for RSS, Agreement for Forward Motion,” May 31, 2001, Syndication Mailing List, accessed September 14, 2018, <a href="https://groups.yahoo.com/neo/groups/syndication/conversations/messages/1717">https://groups.yahoo.com/neo/groups/syndication/conversations/messages/1717</a>. <a href="#fnref:34" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content><category scheme="https://blog.batkiz.com/tags/%E7%BF%BB%E8%AF%91" term="%E7%BF%BB%E8%AF%91" label="翻译"/><category scheme="https://blog.batkiz.com/tags/rss" term="rss" label="RSS"/></entry><entry><title type="html">wsl 使用指北</title><link href="https://blog.batkiz.com/posts/2018/using-wsl/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2018/solving-cmder-space/?utm_source=atom_feed" rel="related" type="text/html" title="解决 cmder 光标问题"/><link href="https://blog.batkiz.com/posts/2018/how-to-play-minecrafet-with-xbox-controller/?utm_source=atom_feed" rel="related" type="text/html" title="如何使用Xbox手柄玩Minecraft"/><link href="https://blog.batkiz.com/posts/2017/install-linux-in-upan/?utm_source=atom_feed" rel="related" type="text/html" title="将linux装入u盘之路"/><link href="https://blog.batkiz.com/posts/2017/software-on-my-computer/?utm_source=atom_feed" rel="related" type="text/html" title="我的电脑软件"/><link href="https://blog.batkiz.com/posts/2018/useful-telegram-bots/?utm_source=atom_feed" rel="related" type="text/html" title="telegram bots 推荐"/><id>https://blog.batkiz.com/posts/2018/using-wsl/</id><published>2018-10-06T16:59:37+00:00</published><updated>2018-10-06T16:59:37+00:00</updated><content type="html"><![CDATA[<blockquote>MICROSOFT 已成最大 Linux 发行版（</blockquote><p>经由多个版本更新，现在 wsl 对于普通开发工作已基本没啥问题了，已可基本抛弃虚拟机（</p>
<blockquote>
<p>注：由于 wsl 实现方式是自己实现了一遍 Linux Kernel<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>，因此涉及 Linux 底层（内核、hack 等）的东西基本还是不行的。。</p>
</blockquote>
<h2 id="简明入坑教程">
    简明入坑教程 
    <a href="#%e7%ae%80%e6%98%8e%e5%85%a5%e5%9d%91%e6%95%99%e7%a8%8b" class="anchor-link">#</a>
</h2><h3 id="安装">
    安装 
    <a href="#%e5%ae%89%e8%a3%85" class="anchor-link">#</a>
</h3><ol>
<li>进入设置，在 <strong>更新与安全 -&gt; 开发者选项</strong> 中打开开发人员模式</li>
<li>直接使用 Cortana 搜索 <strong>Windows 功能</strong>，在 <strong>启用或关闭 Window 功能</strong> 中勾选打开 <em>适用于 Linux 的 Windows 子系统</em></li>
<li>进入 microsoft store，搜索 <em>Linux</em>，挑一个顺眼的发行版安装<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></li>
<li>待安装完成后打开该发行版的 shell，然后设置用户名与密码</li>
</ol>
<h3 id="提升体验">
    提升体验 
    <a href="#%e6%8f%90%e5%8d%87%e4%bd%93%e9%aa%8c" class="anchor-link">#</a>
</h3><ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu//">换源</a> 是必须的</li>
<li>安装 build-essential, zsh, vim 等并配置</li>
</ul>
<h3 id="wsl-terminal">
    wsl-terminal 
    <a href="#wsl-terminal" class="anchor-link">#</a>
</h3><p>wsl-terminal 是 「用于 Windows Subsystem for Linux (WSL) 的终端模拟器，基于 <a href="http://mintty.github.io/">mintty</a>、<a href="https://github.com/paolo-sz/fatty">fatty</a> 和 <a href="https://github.com/rprichard/wslbridge">wslbridge</a>。」，解决了很多默认终端里存在的问题，建议 wsl 用户都来下载使用这个。</p>
<p>基本配置其实看看文档都能理解，不过我还是想推荐几个功能：</p>
<ul>
<li>运行 <code>tools/1-add-open-wsl-terminal-here-menu.js</code> (<a href="https://github.com/goreliu/wsl-terminal/blob/master/README.zh_CN.md#%E5%B7%A5%E5%85%B7">帮助</a>) 来添加一个 <code>Open wsl-terminal Here</code> 右键菜单到资源管理器上。</li>
<li>配置文件 <code>etc/wsl-terminal.conf</code> 中可将默认 shell 改为 zsh。</li>
</ul>
<h2 id="tips">
    tips 
    <a href="#tips" class="anchor-link">#</a>
</h2><h3 id="关于-wsl-terminal">
    关于 wsl-terminal 
    <a href="#%e5%85%b3%e4%ba%8e-wsl-terminal" class="anchor-link">#</a>
</h3><ul>
<li>推荐背景色 <code>40, 44, 52</code>（我从 vscode 的 one dark pro 主题那偷来的）</li>
<li>建议在 <code>windows</code> 上安装 <a href="https://github.com/powerline/fonts">powerline fonts</a> 以提升使用体验</li>
</ul>
<h3 id="关于-linux">
    关于 linux 
    <a href="#%e5%85%b3%e4%ba%8e-linux" class="anchor-link">#</a>
</h3><ul>
<li>人生苦短，来用 zsh</li>
<li>zsh 主题强烈推荐 ys</li>
<li>人生苦短，尽量别碰 vim</li>
<li>真想碰的话来试试<a href="https://github.com/batkiz/k-vim">我的配置</a></li>
</ul>
<h3 id="关于-wsl">
    关于 wsl 
    <a href="#%e5%85%b3%e4%ba%8e-wsl" class="anchor-link">#</a>
</h3><ul>
<li>当终端用就好，别再整些什么 X-server 之类的搞 GUI</li>
<li>功能仍然有限，该用虚拟机就早点上虚拟机</li>
<li>推荐 <a href="https://system76.com/pop">Pop!_os</a>，自带中文输入法已经贼好看的主题与壁纸，你还在等什么！</li>
<li>记得有个 GitHub repo 是有不少软件的可用性测试的，不过我懒得找了，有需要的可以找找看。</li>
</ul>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://www.zhihu.com/question/54896787">https://www.zhihu.com/question/54896787</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>我选择 <code>Ubuntu</code>，不带版本号的那个。 <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content><category scheme="https://blog.batkiz.com/tags/linux" term="linux" label="linux"/><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/></entry><entry><title type="html">telegram bots 推荐</title><link href="https://blog.batkiz.com/posts/2018/useful-telegram-bots/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2018/solving-cmder-space/?utm_source=atom_feed" rel="related" type="text/html" title="解决 cmder 光标问题"/><link href="https://blog.batkiz.com/posts/2018/a-short-introduction-to-markdown/?utm_source=atom_feed" rel="related" type="text/html" title="a-short-introduction-to-markdown"/><link href="https://blog.batkiz.com/posts/2018/how-to-play-minecrafet-with-xbox-controller/?utm_source=atom_feed" rel="related" type="text/html" title="如何使用Xbox手柄玩Minecraft"/><link href="https://blog.batkiz.com/posts/2018/rss-is-best/?utm_source=atom_feed" rel="related" type="text/html" title="RSS，今日头条与信息爆炸"/><link href="https://blog.batkiz.com/posts/2018/hexo-blog/?utm_source=atom_feed" rel="related" type="text/html" title="hexo blog"/><id>https://blog.batkiz.com/posts/2018/useful-telegram-bots/</id><published>2018-07-30T14:46:56+00:00</published><updated>2018-07-30T14:46:56+00:00</updated><content type="html"><![CDATA[<p>telegram 作为一个新兴的 IM 软件，开源、安全等诸多特性都在吸引着人们来使用 telegram。
同样，bots 也是 telegram 不可或缺的一部分（误，下面我会推荐一些好用的 bot。
注：inline bot 即为在聊天框可直接敲入 <code>@username</code> 来调用的 bot。</p>
<h2 id="图片相关">
    图片相关 
    <a href="#%e5%9b%be%e7%89%87%e7%9b%b8%e5%85%b3" class="anchor-link">#</a>
</h2><ol>
<li><code>@bing</code> 与 <code>@pic</code> 作为 inline bot 均可用于搜索图片，直接在聊天框发出。</li>
<li>你可以给 <code>@asciiart_bot</code> 发送一张图片，然后其会返回给你该图片的字符画版本。</li>
<li><code>@youqianbot</code> 与 <code>@wangjingze_bot</code> 分别为“为所欲为”与“王境泽”表情包的生成器，用于生成 gif 表情。</li>
<li><code>@LatexBot</code> 可以输入 <code>LaTeX</code> 公式生成公式的图，亦可 inline 调用。</li>
<li>可以给 <code>@WhatAnimeBot</code> 发送任意动漫的截图，以获得该图片详细信息（如番名，哪一集的什么时间）。</li>
<li>telegram 中的表情包非常多，但是默认却是 webp 格式，如果想要在其他 IM 软件中使用就困难了，所以有了 <code>@Stickerdownloadbot</code>，你可以将某个 sticker 或整个 sticker pack 的链接发送给该 bot，以获取表情包的 jpg/png 图片。</li>
</ol>
<h2 id="视频音乐">
    视频音乐 
    <a href="#%e8%a7%86%e9%a2%91%e9%9f%b3%e4%b9%90" class="anchor-link">#</a>
</h2><ol>
<li><code>@utubebot</code> 可用来下载 YouTube 的视频，并有多种格式分辨率选择。</li>
<li><code>@vid</code> 则可 inline 调用搜索 YouTube 视频。</li>
<li><code>@vkm_bot</code> 使用俄罗斯网站 VK 的源，可 inline 调用发送歌曲文件。</li>
</ol>
<h2 id="杂项">
    杂项 
    <a href="#%e6%9d%82%e9%a1%b9" class="anchor-link">#</a>
</h2><ol>
<li><code>@TheFeedReaderBot</code> 是一个可用于订阅 RSS 的 bot，不过貌似会比较慢。</li>
<li><code>@MyTeleCloudBot</code> 则是一个什么都不会做的 bot，你可以向它发送任何东西，将其变成你的云盘。</li>
<li><code>to_kindle_bot</code> 是一个可用于给 kindle 推送的 bot，给 kindle 推送书变得更方便了，值得一提的是它能自动把 epub 文件转码。</li>
<li><code>GmailBot</code> 可用于给自己收发 Gmail。</li>
<li><code>@googletranslate_bot</code> 用来翻译，不过步骤挺繁琐的。</li>
<li><code>@bennyblog_bot</code> 可以用来查快递查美剧。</li>
<li><code>@wiki</code> 可以 inline 调用，发送 wikipedia 页面，更可指定语言。</li>
<li><code>@letmebot</code>: let me google it for you.</li>
<li><code>@codercalbot</code> 没事来算个命。</li>
</ol>
<hr>
<h2 id="后记">
    后记 
    <a href="#%e5%90%8e%e8%ae%b0" class="anchor-link">#</a>
</h2><p>不得不吐槽 telegram 上的用户真是容易跑路。。一跑路有些 bot 就用不了了。。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/telegram" term="telegram" label="telegram"/></entry><entry><title type="html">解决 cmder 光标问题</title><link href="https://blog.batkiz.com/posts/2018/solving-cmder-space/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2018/how-to-play-minecrafet-with-xbox-controller/?utm_source=atom_feed" rel="related" type="text/html" title="如何使用Xbox手柄玩Minecraft"/><link href="https://blog.batkiz.com/posts/2017/software-on-my-computer/?utm_source=atom_feed" rel="related" type="text/html" title="我的电脑软件"/><link href="https://blog.batkiz.com/posts/2018/a-short-introduction-to-markdown/?utm_source=atom_feed" rel="related" type="text/html" title="a-short-introduction-to-markdown"/><link href="https://blog.batkiz.com/posts/2018/rss-is-best/?utm_source=atom_feed" rel="related" type="text/html" title="RSS，今日头条与信息爆炸"/><link href="https://blog.batkiz.com/posts/2018/hexo-blog/?utm_source=atom_feed" rel="related" type="text/html" title="hexo blog"/><id>https://blog.batkiz.com/posts/2018/solving-cmder-space/</id><published>2018-06-16T22:07:53+00:00</published><updated>2018-06-16T22:07:53+00:00</updated><content type="html"><![CDATA[<h2 id="问题">
    问题 
    <a href="#%e9%97%ae%e9%a2%98" class="anchor-link">#</a>
</h2><p>由于 powershell 配置有些麻烦，所以最近在使用 cmder，然而在使用中有一个问题非常难受：
在 cmder 中，无论英文还是中文，输入的光标变宽或者多一个字符。</p>
<h2 id="解决方法">
    解决方法 
    <a href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95" class="anchor-link">#</a>
</h2><p>进入 <code>%CMDER_ROOT%\vendor</code> 文件夹，编辑 <code>profile.ps1</code>，寻找下列信息(<code>Ctrl + F</code>)</p>
<pre><code class="language-ps">Microsoft.PowerShell.Utility\Write-Host &quot;`nλ &quot; -NoNewLine -ForegroundColor &quot;DarkGray&quot;
</code></pre>
<p>将其中的 <code>λ</code> 改为 <code>#</code> 或其它字符即可。</p>
<hr>
<p>如果使用的是 cmd，则编辑 <code>clink.lua</code>，寻找</p>
<pre><code class="language-lua">if env == nil then
    lambda = &quot;λ&quot;
else
    lambda = &quot;(&quot;..env..&quot;) λ&quot;
end
</code></pre>
<p>将其中的 <code>λ</code> 改为 <code>#</code> 或其它字符即可。</p>
]]></content><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/></entry><entry><title type="html">a-short-introduction-to-markdown</title><link href="https://blog.batkiz.com/posts/2018/a-short-introduction-to-markdown/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2018/how-to-play-minecrafet-with-xbox-controller/?utm_source=atom_feed" rel="related" type="text/html" title="如何使用Xbox手柄玩Minecraft"/><link href="https://blog.batkiz.com/posts/2018/rss-is-best/?utm_source=atom_feed" rel="related" type="text/html" title="RSS，今日头条与信息爆炸"/><link href="https://blog.batkiz.com/posts/2018/hexo-blog/?utm_source=atom_feed" rel="related" type="text/html" title="hexo blog"/><link href="https://blog.batkiz.com/posts/2017/install-linux-in-upan/?utm_source=atom_feed" rel="related" type="text/html" title="将linux装入u盘之路"/><link href="https://blog.batkiz.com/posts/2017/software-on-my-computer/?utm_source=atom_feed" rel="related" type="text/html" title="我的电脑软件"/><id>https://blog.batkiz.com/posts/2018/a-short-introduction-to-markdown/</id><published>2018-03-29T21:14:10+00:00</published><updated>2018-03-29T21:14:10+00:00</updated><content type="html"><![CDATA[<h2 id="markdown-是什么">
    markdown 是什么 
    <a href="#markdown-%e6%98%af%e4%bb%80%e4%b9%88" class="anchor-link">#</a>
</h2><blockquote>
<p><strong>Markdown</strong> 是一种 <a href="https://zh.wikipedia.org/wiki/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80" title="轻量级标记语言">轻量级标记语言</a>，创始人为 <a href="https://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E6%A0%BC%E9%AD%AF%E4%BC%AF" title="约翰·格鲁伯">约翰·格鲁伯</a>（英语：John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的 <a href="https://zh.wikipedia.org/wiki/XHTML" title="XHTML">XHTML</a>（或者 <a href="https://zh.wikipedia.org/wiki/HTML" title="HTML">HTML</a>）文档”。<a href="https://zh.wikipedia.org/wiki/Markdown#cite_note-md-4">[4]</a> 这种语言吸收了很多在 <a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6" title="电子邮件">电子邮件</a> 中已有的纯文本标记的特性。</p>
</blockquote>
<p>以上内容引自维基百科。</p>
<h2 id="基本语法">
    基本语法 
    <a href="#%e5%9f%ba%e6%9c%ac%e8%af%ad%e6%b3%95" class="anchor-link">#</a>
</h2><p>Google it and try yourself.</p>
<p>需要注意的是 markdown 的 “方言” 十分之多，可谓十里不同俗。
除知名的 GitHub Flavored Markdown 外，几乎每个编辑器都有着自己的 “方言”，望各位自行斟酌。</p>
<h2 id="mathjax">
    MathJax 
    <a href="#mathjax" class="anchor-link">#</a>
</h2><p>MathJax 便是一个在浏览器上显示 $\LaTeX$ 数学公式的 JavaScript 引擎，同样，有些编辑器支持，有些不支持，还有些是部分支持。</p>
<p>关于如何输入种种符号，如 $\int$，请自行寻找 $\LaTeX$ 相关知识。</p>
<p>下面是一些基本语法，请以 MathJax 的 <a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">官方手册</a> 为准。</p>
<p><code>$</code> 表示行内公式：</p>
<p>质能守恒方程 $E=mc^2$ 可以写作 <code>$E=mc^2$</code>。</p>
<p><code>$$</code> 表示整行公式，如</p>
<pre><code class="language-latex">$$\sum_{i=1}^n a_i=0$$
$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$
</code></pre>
<p>会被渲染为</p>
<p>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<h2 id="与-word-的不同">
    与 Word 的不同 
    <a href="#%e4%b8%8e-word-%e7%9a%84%e4%b8%8d%e5%90%8c" class="anchor-link">#</a>
</h2><p>markdown 固然好用，但不要<strong>神化</strong>它 ——— 一个轻量的标记语言，与动辄几个 G 的 office 相比，还是极其羸弱的</p>
<h2 id="编辑器">
    编辑器 
    <a href="#%e7%bc%96%e8%be%91%e5%99%a8" class="anchor-link">#</a>
</h2><p>请自行尝试并决定</p>
<h2 id="更多的扩展">
    更多的扩展 
    <a href="#%e6%9b%b4%e5%a4%9a%e7%9a%84%e6%89%a9%e5%b1%95" class="anchor-link">#</a>
</h2><p>诸如</p>
<ul>
<li>转 docx/pdf/html/etc.</li>
<li>做 ppt</li>
</ul>
<p>还望各位自行发掘。</p>
<hr>
<h2 id="refer">
    refer 
    <a href="#refer" class="anchor-link">#</a>
</h2><ul>
<li><a href="https://www.zybuluo.com/mdeditor">Cmd Markdown</a></li>
<li><a href="https://github.com/guodongxiaren/README">Github Flavored Markdown 语法介绍</a></li>
<li><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax basic tutorial and quick reference</a></li>
</ul>
]]></content></entry><entry><title type="html">如何使用Xbox手柄玩Minecraft</title><link href="https://blog.batkiz.com/posts/2018/how-to-play-minecrafet-with-xbox-controller/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2017/software-on-my-computer/?utm_source=atom_feed" rel="related" type="text/html" title="我的电脑软件"/><link href="https://blog.batkiz.com/posts/2018/rss-is-best/?utm_source=atom_feed" rel="related" type="text/html" title="RSS，今日头条与信息爆炸"/><link href="https://blog.batkiz.com/posts/2018/hexo-blog/?utm_source=atom_feed" rel="related" type="text/html" title="hexo blog"/><link href="https://blog.batkiz.com/posts/2017/install-linux-in-upan/?utm_source=atom_feed" rel="related" type="text/html" title="将linux装入u盘之路"/><id>https://blog.batkiz.com/posts/2018/how-to-play-minecrafet-with-xbox-controller/</id><published>2018-03-06T15:23:26+00:00</published><updated>2018-03-06T15:23:26+00:00</updated><content type="html"><![CDATA[<p>前几天入手了一个 Xbox one 手柄，拿来 van ♂ 游戏，育碧的刺客信条原生滋瓷手柄，感觉不错。
<strong>但</strong> Java 版 Minecraft 却并未支持手柄，虽然 Minecraft for Windows 10 对手柄原生支持，但可惜我要玩的是我们自行搭建的 mod 服。因此只好寻求其他方法。</p>
<h2 id="被枪毙的方案">
    被枪毙的方案 
    <a href="#%e8%a2%ab%e6%9e%aa%e6%af%99%e7%9a%84%e6%96%b9%e6%a1%88" class="anchor-link">#</a>
</h2><ul>
<li>mod
在搜寻过程中，有人称该 mod 已不再更新，且 bug 较多，因此不予考虑。</li>
<li>Xpadder 等映射软件
需要使用第三方软件，稳定性堪忧，且需自行调整键位。</li>
</ul>
<h2 id="最终方案">
    最终方案 
    <a href="#%e6%9c%80%e7%bb%88%e6%96%b9%e6%a1%88" class="anchor-link">#</a>
</h2><p>好在一位朋友找到了油管上一位小哥上传的<a href="https://www.youtube.com/watch?v=IGVLNBWMmyU">视频</a>，问题终于得以解决。
为方便各位不想看或不能看的，我将方法写在下面。</p>
<h3 id="步骤">
    步骤 
    <a href="#%e6%ad%a5%e9%aa%a4" class="anchor-link">#</a>
</h3><ol>
<li>打开 steam，进入库中添加本地游戏，快捷方式或自行寻找文件请随意。</li>
<li>点击右上角 🎮 图标，进入大屏幕模式。</li>
<li>而后对 Minecraft 进行单独设置为模拟键鼠模式。</li>
<li>在 steam 中打开 Minecraft。</li>
</ol>
<p>enjoy it! :)</p>
<hr>
<p>既然是模拟键鼠，那体验肯定是比不上 Windows 10 版原生支持的体验的。但总比没有强= =</p>
<hr>
<p>2018 年八月更新：
买了个基岩版 MC，手柄体验完美！</p>
]]></content><category scheme="https://blog.batkiz.com/tags/game" term="game" label="game"/><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/></entry><entry><title type="html">RSS，今日头条与信息爆炸</title><link href="https://blog.batkiz.com/posts/2018/rss-is-best/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2018/hexo-blog/?utm_source=atom_feed" rel="related" type="text/html" title="hexo blog"/><link href="https://blog.batkiz.com/posts/2017/install-linux-in-upan/?utm_source=atom_feed" rel="related" type="text/html" title="将linux装入u盘之路"/><link href="https://blog.batkiz.com/posts/2017/software-on-my-computer/?utm_source=atom_feed" rel="related" type="text/html" title="我的电脑软件"/><id>https://blog.batkiz.com/posts/2018/rss-is-best/</id><published>2018-03-04T19:31:44+00:00</published><updated>2018-03-04T19:31:44+00:00</updated><content type="html"><![CDATA[<blockquote>
<p>献给 Aaron Swartz
本文具有极其严重的个人主观性</p>
</blockquote>
<p>在知乎上一个关于 RSS 的<a href="https://www.zhihu.com/question/19580096/answer/20490041">回答</a>上，回答者写道：“支持 RSS 是一种美德”。
RSS 是什么在此不再赘述。那么，为何支持 RSS 是一种美德呢？
<del>吹 RSS 警告</del></p>
<h2 id="背景">
    背景 
    <a href="#%e8%83%8c%e6%99%af" class="anchor-link">#</a>
</h2><p>毋庸置疑，现在是一个<strong>信息爆炸</strong>的时代，各种我们需要的不需要的信息充斥每个人。同时，人们对于新闻也越来越不信任——反转，辟谣，阴谋论。
互联网及自媒体的崛起也对新闻行业产生了冲击：</p>
<ul>
<li>社交网络能在时间发生后的极短时间内将新闻通过网络传及全球，时效性惊人，遑论专用于此的 bot 已经出现。</li>
<li>大部分自媒体则以流量为导向，一方面造成了“震惊体”这种哗众取宠之物，另一方面则使事件愈发扑朔迷离，诸如汤兰兰案、比利·海灵顿之死。媒体的公信力不断降低。</li>
</ul>
<p>在 1948 年，<a href="https://zh.wikipedia.org/wiki/%E5%85%8B%E5%8A%B3%E5%BE%B7%C2%B7%E8%89%BE%E5%B0%94%E4%BC%8D%E5%BE%B7%C2%B7%E9%A6%99%E5%86%9C">香农</a>将热力学的熵，引入到信息论，即“<strong>信息熵</strong>”。</p>
<p><strong>一条信息消除的不确定性越大（即熵减越大），它蕴含的信息量越大。<strong>显然，虽然我们每天都摄入着很多信息，但大部分都是对</strong>消除不确定性</strong>毫无益处，我们所得到的有用的信息极少。</p>
<p>因此，RSS 变得愈发必要。</p>
<h2 id="为什么是-rss">
    为什么是 RSS 
    <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e6%98%af-rss" class="anchor-link">#</a>
</h2><h3 id="rss-的优点">
    RSS 的优点 
    <a href="#rss-%e7%9a%84%e4%bc%98%e7%82%b9" class="anchor-link">#</a>
</h3><ol>
<li>聚合：将所有信息聚集在一处，不必打开浏览器检查一个个网站。</li>
<li>高效：维护好一份 RSS 配置，能使自己获取信息更为高效。</li>
<li>干净：你不会被绑架，你不会看到广告，不会看到如今被烂梗、撕*以及其他卖片儿的所占领的评论。</li>
<li>克制：一旦你看完列表中的文章，就能关掉 RSS 阅读器，避免了沉迷刷新闻导致的时间被浪费。</li>
<li>能获得更广阔的信息源：很多技术博客实际上是没有 app 承载内容的，但是却支持 RSS。</li>
</ol>
<h3 id="为什么不用今日头条">
    为什么不用今日头条 
    <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%b8%8d%e7%94%a8%e4%bb%8a%e6%97%a5%e5%a4%b4%e6%9d%a1" class="anchor-link">#</a>
</h3><p>原因大概如下：</p>
<ol>
<li>容易被平台所绑架。</li>
<li>劣质的新闻源，以及洗稿、抄袭严重。</li>
<li>丧失了“看点不一样的东西”的权利。（仅就 timeline 而言）</li>
<li>极易浪费时间。</li>
</ol>
<h2 id="rss-已死">
    “RSS 已死” 
    <a href="#rss-%e5%b7%b2%e6%ad%bb" class="anchor-link">#</a>
</h2><p>Google reader 业已关闭，抓虾、鲜果也都早已停止服务，各个新闻网站也都在搞着自己的 app，对 RSS 也都早已停止了支持。难道说 RSS 就这样死了么？</p>
<p><strong>不。</strong></p>
<p>仍有大量的网站在支持着 RSS，RSS 阅读器也并未萎靡不振。而 RSS 作为一种完全开放的协议，是与互联网开放、互联的大势一致的。大势不变，此路不死。当然会与时俱进，也许要改头换面，但不会死亡。</p>
<h2 id="rss-reader">
    RSS reader 
    <a href="#rss-reader" class="anchor-link">#</a>
</h2><h3 id="windows-10">
    Windows 10 
    <a href="#windows-10" class="anchor-link">#</a>
</h3><p>对 Windows 10 用户，个人推荐<a href="https://www.microsoft.com/zh-cn/store/p/newsflow/9nblggh58s5r">Newsflow</a>。
尽管其有诸多缺点，如刷新时间过长，对引用、代码区块不支持，偶尔图片加载不出来，但其仍是一款足够优秀的 UWP RSS 阅读器。</p>
<h3 id="android">
    Android 
    <a href="#android" class="anchor-link">#</a>
</h3><p>虽然即刻并没有把自己当作 RSS 阅读器来宣传，但个人认为其足以作为一款优秀的 RSS 阅读器。</p>
<p>最重要的是，其能用来关注一些传统的 RSS 所无能为力的源——比如微信公众号。</p>
<p><em>早期即刻曾开放过 RSS 机器人，但后来因某些原因下线了。不过很多源早已在功能下线前被用户设立。</em></p>
]]></content><category scheme="https://blog.batkiz.com/tags/rss" term="rss" label="RSS"/></entry><entry><title type="html">hexo blog</title><link href="https://blog.batkiz.com/posts/2018/hexo-blog/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2017/install-linux-in-upan/?utm_source=atom_feed" rel="related" type="text/html" title="将linux装入u盘之路"/><link href="https://blog.batkiz.com/posts/2017/software-on-my-computer/?utm_source=atom_feed" rel="related" type="text/html" title="我的电脑软件"/><id>https://blog.batkiz.com/posts/2018/hexo-blog/</id><published>2018-02-10T20:46:23+00:00</published><updated>2018-02-10T20:46:23+00:00</updated><content type="html"><![CDATA[<p>本文为在 Manjaro 系统下对 hexo 博客搭建的复现。
另，由于文章存在时效性，本文只作为参考，实际应以<a href="https://hexo.io/zh-cn/docs/index.html">Hexo 官方文档</a>为准。<del>这也正是我写这篇文章的原因=。=</del></p>
<h2 id="准备工作">
    准备工作 
    <a href="#%e5%87%86%e5%a4%87%e5%b7%a5%e4%bd%9c" class="anchor-link">#</a>
</h2><h3 id="git">
    Git 
    <a href="#git" class="anchor-link">#</a>
</h3><blockquote>
<p><strong>git</strong> 是一个<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E6%95%A3%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" title="分布式版本控制">分布式版本控制</a>软件，最初由<a href="https://zh.wikipedia.org/wiki/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9" title="林纳斯·托瓦兹">林纳斯·托瓦兹</a>（Linus Torvalds）创作，于 2005 年以<a href="https://zh.wikipedia.org/wiki/GPL" title="GPL">GPL</a>发布。最初目的是为更好地管理<a href="https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8" title="Linux内核">Linux 内核</a>开发而设计。</p>
</blockquote>
<p>这里是<a href="http://git-scm.com/">Git 官网</a>，你可以在其中获取安装文件。当然你也可以用<code>apt</code>，<code>yum</code>或<code>pacman</code>等包管理工具来安装。
推荐顺带配置一下用户信息（及 ssh），以避免过程中频繁输入用户名与密码。</p>
<h3 id="nodejs">
    nodejs 
    <a href="#nodejs" class="anchor-link">#</a>
</h3><blockquote>
<p><strong>Node.js</strong>是一个能够在服务器端运行<a href="https://zh.wikipedia.org/wiki/JavaScript" title="JavaScript">JavaScript</a>的<a href="https://zh.wikipedia.org/wiki/%E9%96%8B%E6%94%BE%E5%8E%9F%E5%A7%8B%E7%A2%BC" title="开放源代码">开放源代码</a>、<a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E5%B9%B3%E5%8F%B0" title="跨平台">跨平台</a>JavaScript<a href="https://zh.wikipedia.org/wiki/%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83" title="执行环境">运行环境</a>。Node.js 由 Node.js 基金会持有和维护<a href="https://zh.wikipedia.org/wiki/Node.js#cite_note-3">[3]</a>，并与<a href="https://zh.wikipedia.org/wiki/Linux%E5%9F%BA%E9%87%91%E6%9C%83" title="Linux基金会">Linux 基金会</a>有合作关系<a href="https://zh.wikipedia.org/wiki/Node.js#cite_note-4">[4]</a>。</p>
</blockquote>
<p>同上，你可以在<a href="https://nodejs.org/">nodejs 官网</a>或包管理工具中安装 nodejs。值得一提的是，apt 仓库中的 nodejs 版本过老，不推荐通过 apt 安装。</p>
<h3 id="github-账号">
    Github 账号 
    <a href="#github-%e8%b4%a6%e5%8f%b7" class="anchor-link">#</a>
</h3><p><del>全球最大的同性交友网站上线啦，性感开发者在线发源码</del>
<figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="没毛病" data-pswp-title="没毛病" src="http://pic4.zhimg.com/80/7c9d3403bf922b1663f56975869c829b_hd.jpg" sizes="auto">
    <figcaption>没毛病</figcaption>
</figure></p>
<p>hexo 博客使用的是 Github 提供的 GitHub pages 服务，因此一个 GitHub 账号必不可少<del>当然你也可以选择 gitee 或者 coding.net</del></p>
<h2 id="开始">
    开始 
    <a href="#%e5%bc%80%e5%a7%8b" class="anchor-link">#</a>
</h2><p>打开 terminal(*nux 下)或者 cmd(Windows 下，记得使用管理员权限打开)。
接着一路<code>cd</code>到你想要存放本地博客文件的目录。
下面按照 hexo 官方文档执行<code>npm install -g hexo-cli</code>。
<strong>*unix 下请使用<code>root</code>权限执行，否则会出现错误。</strong>
而后执行</p>
<pre><code class="language-bash">hexo init &lt;folder&gt;
cd &lt;folder&gt;
npm install
</code></pre>
<p><code>&lt;folder&gt;</code>为文件夹的名字，可以随意。
接下来请<code>npm install hexo-deployer-git --save</code>，这是用于向 Github 部署用的插件。</p>
<h2 id="配置">
    配置 
    <a href="#%e9%85%8d%e7%bd%ae" class="anchor-link">#</a>
</h2><p>这里主要是对<code>_config.yml</code>的更改</p>
<p>诸如 title、description 等看描述自己填就行了，这里只说些需要注意的。</p>
<ul>
<li><code>language</code>项，如非主题要求尽量留空，否则会发生一些奇奇怪怪的 bug，另外简体中文也有<code>zh-CN</code>与<code>zh-Hans</code>两种描述，请按主题提供的文档来填写。</li>
<li><code>timezone</code>项同上，建议留空。</li>
<li>由于我们使用的是 GitHub 的服务，因此<code>url</code>项应该是<code>https://username.github.io</code>，<code>username</code>是你自己的 GitHub 用户名，需要注意的是**<code>https</code>**。</li>
<li><code>deploy</code>项应形如</li>
</ul>
<pre><code class="language-yml">deploy:
  type: git
  repo: &lt;git-source&gt;
  branch: master
</code></pre>
<ul>
<li><code>repo</code>项可以用 ssh 或者 https，视个人情况而定</li>
</ul>
<h2 id="更多">
    更多 
    <a href="#%e6%9b%b4%e5%a4%9a" class="anchor-link">#</a>
</h2><h3 id="主题">
    主题 
    <a href="#%e4%b8%bb%e9%a2%98" class="anchor-link">#</a>
</h3><p>首选参考<a href="https://hexo.io/themes/">官方主题页面</a>
个人推荐下面几个</p>
<ul>
<li><a href="https://www.haomwei.com/technology/maupassant-hexo.html">maupassant</a></li>
<li><a href="https://www.haomwei.com/technology/maupassant-hexo.html">material</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next">next</a></li>
</ul>
<p>更多的可以自己找~</p>
<p>主题中也有<code>_config.yml</code>文件用于配置，可以参考注释或者官方文档来填写，不一而足。在此不作探讨</p>
<h3 id="更多玩法">
    更多玩法 
    <a href="#%e6%9b%b4%e5%a4%9a%e7%8e%a9%e6%b3%95" class="anchor-link">#</a>
</h3><ul>
<li>独立域名</li>
<li><a href="https://github.com/hexojs/hexo-generator-feed">RSS</a></li>
<li>…………</li>
</ul>
<h2 id="hexo-的命令">
    hexo 的命令 
    <a href="#hexo-%e7%9a%84%e5%91%bd%e4%bb%a4" class="anchor-link">#</a>
</h2><p>同样的，应以<a href="https://hexo.io/zh-cn/docs/">官方文档</a>为准，这里说几个常用的。</p>
<ul>
<li><code>hexo new [layout] &lt;title&gt;</code>，<code>[layout]</code>可不写，<code>&lt;title&gt;</code>即为文章名称。</li>
<li><code>hexo clean</code>，清除已生成的静态文件，推荐在每次更新时执行一次。</li>
<li><code>hexo g</code>，即<code>generate</code>，将写出的 markdown 文档渲染为博客中的文件。</li>
<li><code>hexo s</code>，生成本地预览，用以检查。默认地址为<code>http://localhost:4000</code>，如果发生错误可以检查一下<code>4000</code>端口是不是被占用了。</li>
<li><code>hexo d</code>，部署到远程仓库。</li>
</ul>
<h2 id="写在最后">
    写在最后 
    <a href="#%e5%86%99%e5%9c%a8%e6%9c%80%e5%90%8e" class="anchor-link">#</a>
</h2><p>既然这玩意是搞的博客，就要记住博客最重要的还是内容，而非花里胡哨的东西，适度折腾。
希望大家都能持续输出优质内容~</p>
]]></content><category scheme="https://blog.batkiz.com/tags/hexo" term="hexo" label="hexo"/></entry><entry><title type="html">将linux装入u盘之路</title><link href="https://blog.batkiz.com/posts/2017/install-linux-in-upan/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://blog.batkiz.com/posts/2017/software-on-my-computer/?utm_source=atom_feed" rel="related" type="text/html" title="我的电脑软件"/><id>https://blog.batkiz.com/posts/2017/install-linux-in-upan/</id><published>2017-12-21T20:11:01+00:00</published><updated>2017-12-21T20:11:01+00:00</updated><content type="html"><![CDATA[<p><del>别名：a day wasted</del></p>
<p>因为这事浪费了我一天时间，我觉得还是有必要写篇文章警醒后来人的（</p>
<h2 id="起因">
    起因 
    <a href="#%e8%b5%b7%e5%9b%a0" class="anchor-link">#</a>
</h2><p><del>一时兴起啊</del>
前几天有个群里有人想把 Windows 装入 u 盘，加之起了一个“做个系统随身带着岂不是美滋滋”的想法，今天早上着手制作。</p>
<h2 id="过程">
    过程 
    <a href="#%e8%bf%87%e7%a8%8b" class="anchor-link">#</a>
</h2><h3 id="linuxlive-usb-creater">
    LinuxLive USB Creater 
    <a href="#linuxlive-usb-creater" class="anchor-link">#</a>
</h3><p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="LiLi" data-pswp-title="LiLi" src="http://www.linuxliveusb.com/images/stories/logos/LogoText.png" sizes="auto">
    <figcaption>LiLi</figcaption>
</figure>
这么一个不好做的事，当然是事先找了很多资料的~
于是在一个知乎回答里看到推荐了<a href="http://www.linuxliveusb.com/">LinuxLive USB Creater</a>，便去试了试，打开官网，按捺住吐槽这炫目的 Logo、古老的界面的冲动，先试了试。
过程不外乎选择镜像文件、u 盘之类。值得一提的是如果你勾选的话，其会自动下载一个 vbox portable 到你的 u 盘中。
安装后，根据官方文档，启动<code>Virtualize_This_Key.exe</code>，然而不行；重启也是不行。
<strong>方案枪毙</strong></p>
<h3 id="rufus">
    Rufus 
    <a href="#rufus" class="anchor-link">#</a>
</h3><p><a href="https://rufus.akeo.ie/?locale=zh_CN">Rufus</a>是一个非常好用的创建 usb 启动盘的工具。其作者对于捐赠的态度也极其令人敬佩</p>
<blockquote>
<p>这个问题老是有人问我，不过这个页面上真的 <strong>没有</strong> 捐助按钮。
主要原因是我认为捐助模式不能真正帮助软件发展，相反的，会对没有捐助的用户产生一种无意的诱导性的愧疚歧视感。
当然，如果你非要坚持，你可以捐给 <a href="http://www.fsf.org/">Free Software Foundation（自由软件基金会）</a>，他们才是无数类似 Rufus 的软件得以存在的原因。
不管如何，我都要在此对你们说 <em>谢谢你们</em> 对这个小程序持续的支持和热情：非常非常感谢。
但是无论怎样也请你随意使用 Rufus ，无需介怀对此项目没有付出任何经济上的贡献 – 因为你本来就不需要嘛。</p>
</blockquote>
<p><del>但这不是我们的重点</del>照例把<code>iso</code>镜像烧录进 u 盘，而后设置电脑从 u 盘启动。
显然这是无济于事的（，在再次尝试了一番 elementary os 并再次认为其好看后，便开始寻找下一个解决方案
<del>如果我还有一个 u 盘的话应该是可以把系统安装进 u 盘的，可惜我没有</del></p>
<h3 id="deepin-boot-maker--universal-usb-installer">
    deepin boot maker &amp; universal USB installer 
    <a href="#deepin-boot-maker--universal-usb-installer" class="anchor-link">#</a>
</h3><p>和 Rufus 基本是一类软件，不作赘述：<strong>没卵用</strong></p>
<h3 id="deepin-system-installer">
    deepin system installer 
    <a href="#deepin-system-installer" class="anchor-link">#</a>
</h3><p>在下载<em>deepin boot maker</em>时看到了这个，本着“装个 deepin 也不是不可以”的心态下载了它。
然后发现…………这货只能把系统装进 C 盘！<del>玩蛋去吧！</del></p>
<h3 id="arch-anywhere">
    arch-anywhere 
    <a href="#arch-anywhere" class="anchor-link">#</a>
</h3><p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="anarchy linux" data-pswp-title="anarchy linux" src="https://arch-anywhere.org//images/anarchy-linux-icon.png" sizes="auto">
    <figcaption>anarchy linux</figcaption>
</figure>
又名<code>anarchy linux</code>，logo 还挺好看。
<a href="https://arch-anywhere.org/">这个玩意</a>，arch 也是一个我非常想尝试的发行版，因此寻思着装个 arch 也不是不可以，除了有点担心太久不用 u 盘的系统更新会滚挂之外，我还是持乐观态度的。
然而…………烧录进 u 盘后设置电脑从 u 盘启动</p>
<ul>
<li>在用的这台电脑显示挂载失败</li>
<li>旧电脑一直连不上网</li>
</ul>
<p>不得已，只能把这个也放弃了。</p>
<h3 id="vmware">
    vmware 
    <a href="#vmware" class="anchor-link">#</a>
</h3><p>最开始时就看到<a href="https://zhuanlan.zhihu.com/p/23094344">这篇文章</a>了，一直不想用。
最开始我是打算用 vbox 的，可是操作完全不同=。=又下载安装了 VMware。
教程倒是不复杂，可是在更改硬盘为 u 盘后一直显示无操作系统= =
无奈之下又一个方案宣告破产</p>
<h3 id="puppy-linux">
    puppy linux 
    <a href="#puppy-linux" class="anchor-link">#</a>
</h3><p>网址就不贴了，界面有上古遗风，论坛之类的看起来也很久没人维护了。
简易尝试之后果断放弃。</p>
<h3 id="slax-linux">
    Slax linux 
    <a href="#slax-linux" class="anchor-link">#</a>
</h3><p><figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="Slax linux" data-pswp-title="Slax linux" src="http://www.slax.org/en/images/clover.png" sizes="auto">
    <figcaption>Slax linux</figcaption>
</figure>
界面和 win8 有点像，安装方式与众不同（直接从 iso 文件解压然后运行批处理文件）。
目测好像不能在 efi 下启动，改天在旧电脑上试试。</p>
<h2 id="结语">
    结语 
    <a href="#%e7%bb%93%e8%af%ad" class="anchor-link">#</a>
</h2><p><del>别 xjb 心血来潮</del>
作死有风险~也希望对后来者有些帮助。</p>
<hr>
<h2 id="2018-年最新进展">
    2018 年最新进展 
    <a href="#2018-%e5%b9%b4%e6%9c%80%e6%96%b0%e8%bf%9b%e5%b1%95" class="anchor-link">#</a>
</h2><p>最近要准备期末，蓦然发现还有个课没看，奈何只能用 android 手机，便寻思找个模拟器。
然后顺藤摸瓜又看了看<a href="http://www.phoenixos.com"><code>phoenix os</code></a>，发现能装到 u 盘里，试了试竟然真的成了（
<del>不过以我 U 盘羸弱的性能估计是凉了</del>
还没试验，就这样吧。</p>
<p>以上</p>
]]></content><category scheme="https://blog.batkiz.com/tags/linux" term="linux" label="linux"/></entry><entry><title type="html">我的电脑软件</title><link href="https://blog.batkiz.com/posts/2017/software-on-my-computer/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.batkiz.com/posts/2017/software-on-my-computer/</id><published>2017-11-01T07:40:44+00:00</published><updated>2017-11-01T07:40:44+00:00</updated><content type="html"><![CDATA[<p>时隔多时，我终于要从 Linux 平台回归 Windows，回想一番，把自己将要用的软件于此汇总一下。</p>
<p>也算是给自己一个备份归档。</p>
<h2 id="浏览器">
    浏览器 
    <a href="#%e6%b5%8f%e8%a7%88%e5%99%a8" class="anchor-link">#</a>
</h2><h3 id="vivaldihttpsvivaldicom">
    <a href="https://vivaldi.com">Vivaldi</a> 
    <a href="#vivaldihttpsvivaldicom" class="anchor-link">#</a>
</h3><p>一款来自 opera 浏览器创始人的浏览器
我一直在使用的浏览器，美观简洁，十分好用，标签组功能非常赞
chromium 内核，支持扩展~~(没用过就是了)~~
2018-3-2 update: 添加了云同步的功能，完美！
<figure data-type="image" data-pswp="true" itemscope="itemscope" itemprop="associatedMedia"
    itemtype="http://schema.org/ImageObject">
    <img alt="qolUe.png" data-pswp-title="qolUe.png" src="https://s1.ax1x.com/2017/12/14/qolUe.png" sizes="auto">
    <figcaption>qolUe.png</figcaption>
</figure></p>
<h3 id="chrome">
    Chrome 
    <a href="#chrome" class="anchor-link">#</a>
</h3><p>Google 出品，掌握特殊上网姿势后云同步十分好用</p>
<h3 id="edge">
    Edge 
    <a href="#edge" class="anchor-link">#</a>
</h3><p>🚀UWP
Windows 10 预置浏览器
渲染内核反人类，为什么非要等到载入完成才渲染啊喂！</p>
<h3 id="firefox">
    Firefox 
    <a href="#firefox" class="anchor-link">#</a>
</h3><p><del>（三大神兽集齐了</del>
主要用来做题用（CTF)。</p>
<h2 id="下载">
    下载 
    <a href="#%e4%b8%8b%e8%bd%bd" class="anchor-link">#</a>
</h2><h3 id="fdm">
    FDM 
    <a href="#fdm" class="anchor-link">#</a>
</h3><p>简洁美观的下载工具，还不限速，可惜不滋磁 ed2k 链接。</p>
<h3 id="迅雷极速版">
    迅雷极速版 
    <a href="#%e8%bf%85%e9%9b%b7%e6%9e%81%e9%80%9f%e7%89%88" class="anchor-link">#</a>
</h3><p>修改版的，完全绿色，可以用来下载磁力。（FDM 的磁力功能有够差的</p>
<h3 id="dpdownload">
    <del>dpdownload</del> 
    <a href="#dpdownload" class="anchor-link">#</a>
</h3><h3 id="baidupcs-go">
    baidupcs-go 
    <a href="#baidupcs-go" class="anchor-link">#</a>
</h3><p>一个借由命令行操作的百度云工具</p>
<h3 id="netspeedmonitor">
    NetSpeedMonitor 
    <a href="#netspeedmonitor" class="anchor-link">#</a>
</h3><p>实时查看当前网速的，直接作为任务栏插件显示，美观了不少
不能自动切换网线和 WiFi 就很难受</p>
<h2 id="播放器">
    播放器 
    <a href="#%e6%92%ad%e6%94%be%e5%99%a8" class="anchor-link">#</a>
</h2><h3 id="zplayer-uwp">
    zPlayer UWP 
    <a href="#zplayer-uwp" class="anchor-link">#</a>
</h3><p>🚀UWP
采用 vlc 的解码器，Fluent Design 界面，颜值爆表
<em>现在需要付费了（</em><del>好像不定时有限免活动</del></p>
<h3 id="网易云音乐">
    网易云音乐 
    <a href="#%e7%bd%91%e6%98%93%e4%ba%91%e9%9f%b3%e4%b9%90" class="anchor-link">#</a>
</h3><p>🚀UWP
良心的音乐软件，虽然最近以来因为版权饱受诟病，但还是能用的
私人 FM 的推荐还可以
<del>满级遥遥无期</del></p>
<h3 id="spotify">
    Spotify 
    <a href="#spotify" class="anchor-link">#</a>
</h3><p>辣鸡网易云曲库</p>
<h3 id="灵音播放器">
    灵音播放器 
    <a href="#%e7%81%b5%e9%9f%b3%e6%92%ad%e6%94%be%e5%99%a8" class="anchor-link">#</a>
</h3><p>与网易云搭配使用
不多解释，非常好用，能用来下载些歌曲
字体渲染有问题= =，桌面歌词看着好糊</p>
<h3 id="哔哩哔哩动画-uwp">
    哔哩哔哩动画 UWP 
    <a href="#%e5%93%94%e5%93%a9%e5%93%94%e5%93%a9%e5%8a%a8%e7%94%bb-uwp" class="anchor-link">#</a>
</h3><p>🚀UWP
逍遥橙子版的，偶尔看看动漫还有视频，比官方版体验好得多
与网页版各有千秋吧（</p>
<h3 id="groove-音乐">
    Groove 音乐 
    <a href="#groove-%e9%9f%b3%e4%b9%90" class="anchor-link">#</a>
</h3><p>🚀UWP
Fluent Design，界面是真的好看！！！
当个本地播放器完全够用了=。=</p>
<h3 id="grover-podcast">
    Grover Podcast 
    <a href="#grover-podcast" class="anchor-link">#</a>
</h3><p>🚀UWP
播客应用，用来听播客（
界面美观，堪称 Windows 下坠吼的播客应用，不过 Windows 10 mobile 下只有付费版就很难受（</p>
<h3 id="gleehttpsgithubcomnondaneeglee">
    <a href="https://github.com/nondanee/Glee">Glee</a> 
    <a href="#gleehttpsgithubcomnondaneeglee" class="anchor-link">#</a>
</h3><p>&ldquo;最好的网易云音乐客户端&quot;之一
用的 Groove 的界面，持续关注中</p>
<h2 id="电脑优化与安全">
    电脑优化与安全 
    <a href="#%e7%94%b5%e8%84%91%e4%bc%98%e5%8c%96%e4%b8%8e%e5%ae%89%e5%85%a8" class="anchor-link">#</a>
</h2><h3 id="火绒">
    火绒 
    <a href="#%e7%81%ab%e7%bb%92" class="anchor-link">#</a>
</h3><p>&ldquo;麻雀虽小，五脏俱全。&rdquo;
一款来自国内的安全软件，小巧不流氓
<del>甚至已经代替了我的垃圾清理软件</del></p>
<h3 id="ccleaner">
    CCleaner 
    <a href="#ccleaner" class="anchor-link">#</a>
</h3><p>清理垃圾用
梨子家的软件都不错，免费版的也都够用</p>
<h3 id="wise-care-365">
    <del>wise care 365</del> 
    <a href="#wise-care-365" class="anchor-link">#</a>
</h3><p><del>清理垃圾之类的，可以认为是……国外良心版 360</del></p>
<h2 id="美化">
    美化 
    <a href="#%e7%be%8e%e5%8c%96" class="anchor-link">#</a>
</h2><h3 id="任务栏透明插件">
    <del>任务栏透明插件</del> 
    <a href="#%e4%bb%bb%e5%8a%a1%e6%a0%8f%e9%80%8f%e6%98%8e%e6%8f%92%e4%bb%b6" class="anchor-link">#</a>
</h3><p>如有需要请左转 TranslucentTB</p>
<h3 id="splash">
    Splash 
    <a href="#splash" class="anchor-link">#</a>
</h3><p>🚀UWP
一个应用，有广告但不影响使用
图片来自全球第二的壁纸提供网站<a href="https://unsplash.com">splash</a>，<del>每天</del> 过一个小时就换一张壁纸还不是美滋滋？</p>
<h2 id="沟通交流">
    沟通交流 
    <a href="#%e6%b2%9f%e9%80%9a%e4%ba%a4%e6%b5%81" class="anchor-link">#</a>
</h2><h3 id="tim">
    Tim 
    <a href="#tim" class="anchor-link">#</a>
</h3><p>一个只能说比 QQ 好用的客户端</p>
<h3 id="qq">
    QQ 
    <a href="#qq" class="anchor-link">#</a>
</h3><p>🚀UWP
不想打开 tim 时用这个，功能缺失极其严重</p>
<h3 id="ssr">
    <del>ssr</del> 
    <a href="#ssr" class="anchor-link">#</a>
</h3><p>这个也能认为是用来沟通……的吧？</p>
<h3 id="telegram-desktop">
    Telegram Desktop 
    <a href="#telegram-desktop" class="anchor-link">#</a>
</h3><p>🚀UWP
我游特色（</p>
<h3 id="unigram">
    Unigram 
    <a href="#unigram" class="anchor-link">#</a>
</h3><p>🚀UWP
telegram 的第三方客户端，1520 上在用，电脑上没怎么用</p>
<h3 id="知乎-uwp--zhihunew">
    知乎 UWP &amp; zhihu.new 
    <a href="#%e7%9f%a5%e4%b9%8e-uwp--zhihunew" class="anchor-link">#</a>
</h3><p>🚀UWP
第三方 uwp 客户端，没事时可以看看段子啥的
<del>虽然现在都是用网页版</del></p>
<h2 id="解压">
    解压 
    <a href="#%e8%a7%a3%e5%8e%8b" class="anchor-link">#</a>
</h2><h3 id="bandzip">
    Bandzip 
    <a href="#bandzip" class="anchor-link">#</a>
</h3><p>比之 360 之类好用的多</p>
<h2 id="编辑器">
    编辑器 
    <a href="#%e7%bc%96%e8%be%91%e5%99%a8" class="anchor-link">#</a>
</h2><h3 id="notepad">
    Notepad++ 
    <a href="#notepad" class="anchor-link">#</a>
</h3><p>文本编辑器，处理些文件时用(eg. <code>_config.yml</code>)</p>
<h3 id="visual-studio-code">
    Visual Studio Code 
    <a href="#visual-studio-code" class="anchor-link">#</a>
</h3><p>&ldquo;重新定义编辑&rdquo;
微软出品，跨平台，极其好用
<del>配合扩展甚至能干翻某些 IDE</del></p>
<h3 id="yu-writer">
    Yu Writer 
    <a href="#yu-writer" class="anchor-link">#</a>
</h3><p>写 markdown 用，十分舒心</p>
<h3 id="vim">
    vim 
    <a href="#vim" class="anchor-link">#</a>
</h3><p>装在 ubuntu 子系统上的，还行</p>
<h3 id="simplenote">
    Simplenote 
    <a href="#simplenote" class="anchor-link">#</a>
</h3><p>背靠 wordpress，云同步强大，支持 markdown。
拿来局部替代 OneNote 做些笔记</p>
<h2 id="ide">
    IDE 
    <a href="#ide" class="anchor-link">#</a>
</h2><h3 id="visual-studio">
    Visual Studio 
    <a href="#visual-studio" class="anchor-link">#</a>
</h3><p>宇宙第一 IDE！乌拉！</p>
<h3 id="intellij-idea">
    Intellij IDEA 
    <a href="#intellij-idea" class="anchor-link">#</a>
</h3><p>写 Java 用，JetBrains 家的 IDE 都还不错的
<del>可乱码又是什么鬼啊！</del></p>
<h2 id="编程相关">
    编程相关 
    <a href="#%e7%bc%96%e7%a8%8b%e7%9b%b8%e5%85%b3" class="anchor-link">#</a>
</h2><h3 id="open-wsl">
    open-wsl 
    <a href="#open-wsl" class="anchor-link">#</a>
</h3><p>用来代替自带的 ubuntu 终端~</p>
<pre><code class="language-bash">                           ./+o+-
                   yyyyy- -yyyyyy+
                ://+//////-yyyyyyo
            .++ .:/++++++/-.+sss/`
          .:++o:  /++++++++/:--:/-
         o:+o+:++.`..```.-/oo+++++/
        .:+o:+o/.          `+sssoo+/
   .++/+:+oo+o:`             /sssooo.
  /+++//+:`oo+o               /::--:.
  \+/+o+++`o++o               ++////.
   .++.o+++oo+:`             /dddhhh.
        .+.o+oo:.          `oddhhhh+
         \+.++o+o``-````.:ohdhhhhh+
          `:o+++ `ohhhhhhhhyo++os:
            .o:`.syhhhhhhh/.oo++o`
                /osyyyyyyo++ooo+++/
                    ````` +oo+++o\
                           `oo++.
</code></pre>
<h3 id="git">
    Git 
    <a href="#git" class="anchor-link">#</a>
</h3><p>版本控制~</p>
<h3 id="sourcetree">
    SourceTree 
    <a href="#sourcetree" class="anchor-link">#</a>
</h3><p>一个 Git 的 GUI 客户端，比 GitHub Desktop 功能更加强大</p>
<h3 id="nodejs">
    Node.js 
    <a href="#nodejs" class="anchor-link">#</a>
</h3><p>配置 Hexo 环境必须要用= =</p>
<h3 id="cmder">
    cmder 
    <a href="#cmder" class="anchor-link">#</a>
</h3><p>起码比默认 cmd 好看= =</p>
<h3 id="vboxvmware">
    <del>vbox</del>VMware 
    <a href="#vboxvmware" class="anchor-link">#</a>
</h3><p>虚拟机，不过基本没啥用</p>
<h3 id="pentest-box">
    Pentest Box 
    <a href="#pentest-box" class="anchor-link">#</a>
</h3><p>渗透环境咯</p>
<h2 id="文档图片">
    文档&amp;图片 
    <a href="#%e6%96%87%e6%a1%a3%e5%9b%be%e7%89%87" class="anchor-link">#</a>
</h2><h3 id="office-全家桶">
    office 全家桶 
    <a href="#office-%e5%85%a8%e5%ae%b6%e6%a1%b6" class="anchor-link">#</a>
</h3><p><del>用的 kms 激活</del>
教育邮箱美滋滋</p>
<h3 id="office-三件套-mobile-版">
    office 三件套 mobile 版 
    <a href="#office-%e4%b8%89%e4%bb%b6%e5%a5%97-mobile-%e7%89%88" class="anchor-link">#</a>
</h3><p>Microsoft store 获取，需 office365 订阅（教育邮箱美滋滋）
功能较 office 2016 少了不少，但能满足普通需求了</p>
<h3 id="photoshop">
    Photoshop 
    <a href="#photoshop" class="anchor-link">#</a>
</h3><p>业界最强，<del>没怎么用过就是了</del></p>
<h3 id="font-candy黄油相机">
    <del>Font Candy</del>黄油相机 
    <a href="#font-candy%e9%bb%84%e6%b2%b9%e7%9b%b8%e6%9c%ba" class="anchor-link">#</a>
</h3><p>🚀UWP
给图片加字，岂不美哉？</p>
<h3 id="screentogif">
    ScreenToGif 
    <a href="#screentogif" class="anchor-link">#</a>
</h3><p>录屏并将其转为 gif 图片，赞！</p>
<h3 id="sumatrapdf">
    SumatraPDF 
    <a href="#sumatrapdf" class="anchor-link">#</a>
</h3><p>支持多种电子书格式，开源，小巧</p>
<h3 id="onenote">
    OneNote 
    <a href="#onenote" class="anchor-link">#</a>
</h3><p>🚀UWP
笔记神器！同步起来还是不错的。</p>
<h3 id="simplenote-1">
    simplenote 
    <a href="#simplenote-1" class="anchor-link">#</a>
</h3><p><del>搜狗浏览器乱入</del>图标值得吐槽
但本身很好用，多端同步、版本历史、无限存储、Markdown 支持。</p>
<h2 id="效率软件">
    效率软件 
    <a href="#%e6%95%88%e7%8e%87%e8%bd%af%e4%bb%b6" class="anchor-link">#</a>
</h2><h3 id="listary">
    listary 
    <a href="#listary" class="anchor-link">#</a>
</h3><p>双击<code>ctrl</code>键极为好用</p>
<h3 id="capslock">
    CapsLock+ 
    <a href="#capslock" class="anchor-link">#</a>
</h3><p>将 Capslock 键变为修饰键，对文字处理（包括写代码）极为好用</p>
<h3 id="snipaste">
    Snipaste 
    <a href="#snipaste" class="anchor-link">#</a>
</h3><p>🚀UWP
截图&amp;贴图软件，满足了很大的需求</p>
<h3 id="quicklook">
    QuickLook 
    <a href="#quicklook" class="anchor-link">#</a>
</h3><p>🚀UWP
按空格键预览，在某些环境下非常方便</p>
<h2 id="引申">
    引申 
    <a href="#%e5%bc%95%e7%94%b3" class="anchor-link">#</a>
</h2><p><a href="https://sspai.com/post/41411">少数派的这篇文章</a></p>
<h2 id="一些网站">
    一些网站 
    <a href="#%e4%b8%80%e4%ba%9b%e7%bd%91%e7%ab%99" class="anchor-link">#</a>
</h2><ul>
<li><a href="https://windowsapp.org">Windows 绝赞应用</a></li>
<li><a href="https://github.com/Awesome-Windows/Awesome/blob/master/README-cn.md">awesome windows</a></li>
<li><a href="https://github.com/stackia/best-windows-apps">best windows app</a></li>
<li><a href="http://ilxdh.com">龙轩导航</a></li>
</ul>
<h2 id="结语">
    结语 
    <a href="#%e7%bb%93%e8%af%ad" class="anchor-link">#</a>
</h2><p><del>此外，由于很长时间都未使用 Windows 系统，软件列表有所疏漏，还望海涵。</del>
适合自己的才是最好的，因此在这里列出的也就仅仅是对<strong>我</strong>非常好用的软件。</p>
<hr>
<p>以上</p>
<p>本文将持续更新=。=（大概</p>
]]></content><category scheme="https://blog.batkiz.com/tags/windows" term="windows" label="windows"/></entry></feed>