<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hosts-tool-go on My New Hugo Site</title><link>https://example.org/categories/hosts-tool-go/</link><description>Recent content in hosts-tool-go on My New Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 24 Oct 2019 23:59:34 +0800</lastBuildDate><atom:link href="https://example.org/categories/hosts-tool-go/index.xml" rel="self" type="application/rss+xml"/><item><title>写在 hosts-tool-go 0.1.0 之际</title><link>https://example.org/posts/sth-about-hosts-tool-2/</link><pubDate>Thu, 24 Oct 2019 23:59:34 +0800</pubDate><guid>https://example.org/posts/sth-about-hosts-tool-2/</guid><description>不知不觉，自 第一个 commit 算起，时间已经过去了四个多月。实际的开始开发时间自然要更早一些。host-tool-go 也慢慢变得更加可用，版本号也刷到了 0.1.0。
到现在，在 上一篇文章 中所计划的三个功能也已一一实现：
local hosts 功能，暂定是搞个 local 文件和 config 文件放一块 home 功能，hosts-tool-go home NAME 来直接浏览器打开这个 hosts 源 无任何命令行参数附加打开时搞出一个交互式的命令行 开发过程 这里记录一些写 go 语言时的小技巧
// TODO // （其实大家都知道 TODO 列表里的事情永远都不会办的对吧 事实上这个在闲暇之余写的小软件已经完全地满足了我自己的需求，我甚至有点就此封存、甩手不干的冲动。
但说实话，这个小软件还有很多缺点：
丑陋的实现 毫无错误处理 没有用上的 API 一团糟的代码管理 词不达意的变量名 etc. 所以我还会继续写下去，一步步重构、重写，慢慢完善。
ROADMAP 按照惯例，文章最后我会列出目前所规划的一些东西，具体如下：
启动时自动请求 admin/root 权限，省的每次都 sudo 了 使用 goroutine 并行进行各个源的更新 组织代码存放目录与 package 信息 重构代码 添加单元测试 完善错误处理（Go 2 释出之后） by batkiz ，2019 年 10 月 24 日夜。</description></item><item><title>关于 hosts-tool 的一些事</title><link>https://example.org/posts/sth-about-hosts-tool/</link><pubDate>Mon, 17 Jun 2019 19:10:57 +0000</pubDate><guid>https://example.org/posts/sth-about-hosts-tool/</guid><description>前置 由于平时有些修改 hosts 文件的需求（屏蔽广告啦），所以之前一直在用 SwitchHosts! 来自动下载远程 hosts 文件。
但 SwitchHosts! 还是有几点不尽如人意的地方：
由 Electron 与 JavaScript 开发 每次开启均会使用一个一个名为 SnoreToast 的软件 不能做到随用随开，用完就关，需要手动在托盘处关闭后台 上面这些其实都在能忍受的范围内，毕竟 又不是不能用 ，而且也没有其他合适的轮子，将就着也还能用。 但是！近期（也都两三个月了）直接不能用了。直接不能从远端下载更新 hosts 文件了，加上我瞅着作者也不活跃开发了，迫不得已，只好自己造轮子。
最开始时是用的 dotnet core C# 来写的，名为 hosts-tool，代码已基本可用，奈何我对 OO 不甚了解，后面的功能无法继续增加，也就未开源。加上种种原因，一直勉强用着。
后来，我学了 golang，由于其编译出来的可执行程序是单文件，所以使用 go 来重写 hosts-tool 势在必行。
重写 刚开始重写实际上是简单的把 C# 的函数写成 go 语言版本的。后来开始使用各种库、考虑跨平台。
下面是一些写代码过程中得到的经验与吐槽。
为什么 args 里第一个是 c.Args().First() 第二个却是 c.Args().Get(1)) 。都用 c.Args().Get()) 之后从零数也不至于让人这么迷惑。 将 aurora 以 . &amp;quot;github.com/logrusorgru/aurora&amp;quot; 方式引入经常会打印出来一些奇怪的字符。 错误处理太烦人了。 写入配置文件记得用 os.O_TRUNC 截断。 ROADMAP 下面是一些想起来了但暂时没动力写的功能
local hosts 功能，暂定是搞个 local 文件和 config 文件放一块 home 功能，hosts-tool-go home NAME 来直接浏览器打开这个 hosts 源 无任何命令行参数附加打开时搞出一个交互式的命令行 慢慢摸咯，想起来时再写 23333</description></item></channel></rss>