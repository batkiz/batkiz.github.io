<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>My New Hugo Site</title><link>https://example.org/</link><description>Recent content on My New Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 13 Jan 2024 11:56:02 +0000</lastBuildDate><atom:link href="https://example.org/index.xml" rel="self" type="application/rss+xml"/><item><title>关于地下交通站的一些闲言碎语</title><link>https://example.org/posts/dixiajiaotongzhan/</link><pubDate>Sat, 13 Jan 2024 11:56:02 +0000</pubDate><guid>https://example.org/posts/dixiajiaotongzhan/</guid><description>原本是计划写一篇关于地下交通站的考据的，不过考虑到一则本人的水平属于半瓶子晃荡，就不出来丢人了；二则有些内容也不能算是考据。因此就想到哪写到哪算哪吧。
大家都知道地下交通站存在着 30 集与 28 集两个版本，两个版本的主要区别是 28 集版较 30 集版合并了整装待发、初战告捷两集为初战告捷一集，并删除了原本第一集中大量的人物介绍片段；同时删去了尹相杰出演的弃暗投明一集。
其中弃暗投明一集删去的原因网上有些人推测为尹相杰吸毒一事导致。但地下交通站首播于 2007 年，尹相杰吸毒暴露于大众视野发生在 2015 年；同时网上流传的弃暗投明一集（或者可以放大到整个 30 集版本）的资源画面质量均较差。因此我认为 30 集删减为 28 集应是制作团队较早便决定的事。B 站上有些评论也与我的观点相合。
更新：在上面链接的评论中找到了本剧编剧在抖音上的发言：
@短视频幽默 白志龙：那两集是因为山东台为了自己的播出周期强行删掉的。第一集整装待发，第二集初战告捷，被合成一集，还有就是这一集（被删），所以大家看到的是二十八集
下面给出两个版本的具体剧集安排：
集数 30 集版 28 集版 1 整装待发 初战告捷 2 初战告捷 虎口脱险 3 虎口脱险 一条麻袋 4 一条麻袋 寻枪 5 神机妙算（上） 神机妙算（上） 6 神机妙算（下） 神机妙算（下） 7 一箭双雕（上） 一箭双雕（上） 8 一箭双雕（下） 一箭双雕（下） 9 药到病除 药到病除 10 插翅难逃 火眼金睛 11 寻枪 第二战场（上） 12 火眼金睛 第二战场（下） 13 第二战场（上） 将计就计（上） 14 第二战场（下） 将计就计（下） 15 弃暗投明 插翅难逃 16 狗咬狗 抗日英雄 17 将计就计（上） 金蝉脱壳（上） 18 将计就计（下） 金蝉脱壳（下） 19 金蝉脱壳（上） 巧入敌阵（上） 20 金蝉脱壳（下） 巧入敌阵（下） 21 巧入敌阵（上） 走向光明（上） 22 巧入敌阵（下） 走向光明（下） 23 走向光明（上） 从天而降（上） 24 走向光明（下） 从天而降（下） 25 从天而降（上） 狗咬狗 26 从天而降（下） 夜袭 27 抗日英雄 罪有应得（上） 28 夜袭 罪有应得（下） 29 罪有应得（上） 30 罪有应得（下） 地下交通站作为情景喜剧，虽然各集内容类似于单元剧，但部分剧集间是有着明确的前后关系的。如从天而降、罪有应得应在走向光明之后，因为剧情上白翻译为我方提供了助力。</description></item><item><title>Bye 2021</title><link>https://example.org/posts/bye-2021/</link><pubDate>Fri, 31 Dec 2021 19:38:07 +0800</pubDate><guid>https://example.org/posts/bye-2021/</guid><description>Hi 亲爱的朋友们，新年快乐！
今年从三月后没有再更新过文章，先在这里道一声歉。
2021 年对我来说是非常特殊的一年。
年初的考研，成绩不出我所料没有考上；上半年时花了点时间，面试了许多家公司，最终选择了腾讯；之后顺利从大学毕业，来到了广州。
接下来就是被社会暴打的半年，工作繁忙，完全没有时间读书、写代码、写文章了。下一次发文章，可能就是到我跳槽的那天了吧。
除了这些外，似乎就没什么可说的了。不过还是写点东西出来吧。
学习 年初时学了 rust，有点搞不懂所有权模型，但其他的语法特性蛮喜欢的（特指函数式编程方面），写了点代码玩了玩，不过当时的电脑性能太差，跑不动编译，也就没再往下深入了。期待什么时候可以把 rust 学会。
上半年时学了点 F#，蛮喜欢的，不过学了点后就毕业开始工作了，没啥时间继续看，挺可惜的。
在读刘新宇老师的 算法新解，其实大学时就借过这本书，不过当时没怎么看。里边关于红黑树的函数式解法真的是醍醐灌顶。
在读 DDIA 和 数据密集型应用系统设计，还没读太多。其他的一些零碎阅读就不说了。
工具 以前用了下 tabnine，感觉不太行，copilot 非常惊艳。
logseq 很好用，完美符合我对笔记软件的期待，只可惜不能当一个纯粹的 md 编辑器来用。
tectonic 作为 $\LaTeX$ 发行版很不错。
原计划自己写个 homebrew/scoop 的替代的，但是工作太忙了，完全没有时间。
电子产品 有了工资后买了不少电子产品。
新的笔记本电脑。AMD R7 5800U 的 U，性能很棒，编译 rust 程序不卡了。
iPad Pro 2021 11寸，with Apple Pencil。看 PDF 和视频很舒服，Pencil 也不错，不过我手残，不太会写写画画，一般都是用来当电子白板时用一下。
投影仪。流明数不高，不过晚上拉上窗帘的话体验还是不错的，可惜买的早，没有自动对焦和梯形校正功能，不过又不是不能用。
计划买个 HPE Microserver Gen 10 Plus，感觉有点贵，还在纠结。
米家骑记电助力折叠自行车。（大概也能算电子产品？）收的一代二手，成色很新，通勤幸福感极大提升。
降噪耳机。非常有用，不过由于上班不挤地铁，用的不多。
其他 加班挺厉害的，想跑，唉。
其他似乎没什么写的了，那就在此祝大家新年快乐吧。</description></item><item><title>翻译|REST API 设计最佳实践</title><link>https://example.org/posts/best-practices-for-rest-api-design/</link><pubDate>Thu, 18 Mar 2021 18:51:25 +0800</pubDate><guid>https://example.org/posts/best-practices-for-rest-api-design/</guid><description>原文链接：Best practices for REST API design
译者按：关于 REST API 的介绍与最佳实践，亦可参见微软 Web API 设计。
声明：本文的完成亦有 DeepL 的帮助。
REST API 是现今最常见的网络服务之一。它允许包括浏览器在内的多种客户端通过 REST API 与服务器进行通信。
因此，正确地设计 REST API 非常重要，这样我们就不会在后续的道路上出现问题。我们必须考虑到 API 用户的账号安全性、性能和易用性。
否则，我们就会给使用我们 API 的客户们带来问题，这并不令人愉快，也会影响人们使用我们的 API。如果我们不遵循普遍接受的惯例，那么我们就会给 API 的维护者和使用它们的客户带来困扰，因为它与大家所期望的不同。
在这篇文章中，我们将探讨如何设计 REST API，使其对任何使用它们的人来说都是容易理解的，是不会过时的，并且是安全和快速的，因为它们向客户提供的数据可能是保密的。
由于网络应用可能会被多种问题破坏，我们应该确保任何 REST API 都应使用标准的 HTTP 状态码，以优雅地处理错误，帮助用户处理问题。
用 JSON 接收与响应 REST API 应该接收 JSON 作为请求的有效载荷（payload），同时也应以 JSON 发送响应。JSON 是传输数据的标准。几乎所有的网络技术都可以使用它：JavaScript 有内置的方法，可以通过 Fetch API 或其他 HTTP 客户端对 JSON 进行编码和解码。服务器端的技术也有一些库可以解码 JSON，不需要做太多工作。
当然，还有其他传输数据的方式。XML 并没有得到框架的广泛支持，其常用替代通常是 JSON。我们在客户端——尤其是在浏览器中——不能特别容易地操作这些数据。光是做正常的数据传输就会有很多额外的工作。
表单数据（form data）很适合用于发送数据，特别是当我们要发送文件时。但是对于文本和数字，我们不需要表单数据来传输这些，因为——对大多数框架来说——我们只需要在客户端直接从中获取数据就可以传输 JSON。这是到目前为止最直接的做法。
为了确保当我们的 REST API 应用以 JSON 响应时，客户端会将其解释为 JSON，我们应该在请求发出后，将响应头（header）中的 Content-Type 设置为 application/json。很多服务器端应用框架都会自动设置响应头。一些 HTTP 客户端会根据 Content-Type 响应头来解析数据。</description></item><item><title>Links</title><link>https://example.org/links/</link><pubDate>Mon, 01 Mar 2021 20:15:02 +0800</pubDate><guid>https://example.org/links/</guid><description>presented by batkiz batkiz&amp;rsquo;s wiki
privacy 隐私政策见此。
friends 下面是一些朋友的站点（按 siteName.Length 由小到大排序，长度相同的以首字母排序）。
lay Tnze Azad_ Makira xuegao sp4rta cugxuan ruinsyi Dr.Thril 1A23 Studio yihanwu1024 MiaoTony’s Blog Reliena&amp;rsquo;s Garage Sharzy&amp;rsquo;s Random Blog</description></item><item><title>隐私政策</title><link>https://example.org/privacy/</link><pubDate>Thu, 04 Feb 2021 15:57:21 +0800</pubDate><guid>https://example.org/privacy/</guid><description>本隐私权政策旨在阐明本博客会收集哪些信息、为什么收集这些信息。
理论上讲，本博客符合 GDPR 及其他相关政策要求（视乎本博客所依赖的第三方服务）。
本博客直接收集的信息 无
本博客依赖的第三方服务 托管 本博客托管于 GitHub Pages，遵循其 隐私政策，收集到的信息以 GitHub 官方为准。
本人无法获得其收集到的任何信息。
域名 本域名（batkiz.com）托管于 Cloudflare，遵循其 隐私政策，收集到的信息以 Cloudflare 官方为准。
本人可以获得的信息：
通过 Cloudflare 的 web 请求数 通过 Cloudflare 传输的带宽总量 独立访问者个数 Web 流量请求来自哪些国家或地区 以上信息均无法定位特定的访客信息。
Web Analytics 本项同样是来自 Cloudflare 的服务。
本人可以获得的信息：
本博客总访问量 按国家/地区的访问量 引用方信息 按具体页面（路径）的访问量 浏览器信息 操作系统信息 设备类型信息 同样，以上信息均无法定位特定的访客信息。
特别的，如果访客对此项服务感到不适，可以手动屏蔽发往 cloudflareinsights.com 的 web 请求，不会对本博客造成任何影响。
CDN 本博客通过 jsdelivr 加载了部分静态资源，遵循其 隐私政策，收集到的信息以 jsdelivr 官方为准。
同样，本人无法获得其收集到的任何信息。</description></item><item><title>博客主题新功能：repl 代码集成</title><link>https://example.org/posts/theme-new-feat-repl-embed/</link><pubDate>Sun, 06 Sep 2020 13:30:29 +0800</pubDate><guid>https://example.org/posts/theme-new-feat-repl-embed/</guid><description>由于 hugo 自 v0.60 之后默认忽略 raw html，所以为了便捷地使用 repl 的 embed code share 功能，我就写了个 shortcode。
效果测试 使用方法 {{&amp;lt; repl &amp;#34;batkiz/hello-repl&amp;#34; &amp;gt;}} /* batkiz -&amp;gt; username(不带 `@`) hello-repl -&amp;gt; repl name */ 具体的代码则可以去我主题的代码仓库瞅一眼（毕竟非常简单）
2021/05 更新：
repl 已不提供 iframe 嵌入形式的分享选项，不过所幸还没被 ban 掉，官方提供的 iframe 嵌入代码如下所示：
&amp;lt;div class=&amp;#34;embed repl&amp;#34;&amp;gt; &amp;lt;iframe class=&amp;#34;repl&amp;#34; height=&amp;#34;400px&amp;#34; width=&amp;#34;100%&amp;#34; src=&amp;#34;https://repl.it/@batkiz/hello-repl?lite=true&amp;#34; scrolling=&amp;#34;no&amp;#34; frameborder=&amp;#34;no&amp;#34; allowtransparency=&amp;#34;true&amp;#34; allowfullscreen=&amp;#34;true&amp;#34; sandbox=&amp;#34;allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals&amp;#34; &amp;gt; &amp;lt;/iframe&amp;gt; &amp;lt;/div&amp;gt; 只需将 @batkiz/hello-repl 换成你想要的用户名/repl 名。</description></item><item><title>一些 powershell 脚本 | 其二</title><link>https://example.org/posts/some-pwsh-scripts-2/</link><pubDate>Mon, 31 Aug 2020 12:57:22 +0800</pubDate><guid>https://example.org/posts/some-pwsh-scripts-2/</guid><description>承接前文，这里是另一些可能有点用的 pwsh 脚本。
命令行代理 让命令行应用走代理，用法是 socks app command。也可以把 Set-CliProxy 与 Clear-CliProxy 单独拿出来用。
function socks { $Command = &amp;#34;$args&amp;#34; Set-CliProxy Invoke-Expression $Command 2&amp;gt;&amp;amp;1 | out-default Clear-CliProxy } function Set-CliProxy { $proxy = &amp;#39;http://127.0.0.1:43333&amp;#39; $env:HTTP_PROXY = $proxy $env:HTTPS_PROXY = $proxy } function Clear-CliProxy { Remove-Item env:HTTP_PROXY Remove-Item env:HTTPS_PROXY } time 为命令行应用计时，大概类似于 *nix 中的 time。用法是 time app command。
仅仅计时的话可以用 Measure-Command 命令，但它没有输出，只有时间信息，所以写了个 function 封装一下。
function time { $Command = &amp;#34;$args&amp;#34; $time = Measure-Command { Invoke-Expression $Command 2&amp;gt;&amp;amp;1 | out-default } $info = &amp;#34;{0:d2}:{1:d2}:{2:d2}.</description></item><item><title>无服务器实现 301 跳转（with Cloudflare）</title><link>https://example.org/posts/301-redirect-with-cloudflare/</link><pubDate>Thu, 16 Jul 2020 22:26:33 +0800</pubDate><guid>https://example.org/posts/301-redirect-with-cloudflare/</guid><description>原因 我想通过 git.batkiz.com 访问我的 Azure DevOps 主页，但其不支持 CNAME，同时我又不想通过服务器来 301 跳转，所以我就寻思着能不能找个方法白嫖。
下面是通过 Cloudflare 白嫖的教程。
完整步骤 新建 workers workers 即 Cloudflare 推出的 serverless 云函数。在 主页 直接点击 workers 新建一个，名字随意，代码如下：
async function handleRequest() { return Response.redirect(someURLToRedirectTo, code); } addEventListener(&amp;#34;fetch&amp;#34;, async (event) =&amp;gt; { event.respondWith(handleRequest()); }); /** * @param {Request} url where to redirect the response * @param {number?=301|302} type permanent or temporary redirect */ const someURLToRedirectTo = &amp;#34;https://batkiz.visualstudio.com/&amp;#34;; const code = 301; 部署好之后即可通过其 workers.dev 域名访问了，其会在访问时 301 跳转到指定页。</description></item><item><title>powershell, headers 与乱码</title><link>https://example.org/posts/pwsh-headers-and-messy-code/</link><pubDate>Sat, 27 Jun 2020 20:58:36 +0800</pubDate><guid>https://example.org/posts/pwsh-headers-and-messy-code/</guid><description>问题起源 在几天之前，我的命令行翻译程序挂掉了，不过由于平时用的也少，所以就没太管，昨天才想起来再找个 API 用。
正如前文所述，我极少用到这个，所以我就懒得去申请腾讯、彩云或是 bing 的 API，毕竟太麻烦了。因此我决定找一个直接提供公用接口的 API，次数限制啥的只要不是太离谱就行。功夫不负有心人，在 Google 上翻了两页之后，我找到了由 厦门大学自然语言处理实验室 提供的 云译 CloudTranslation 的公开 API。
解决过程 就当我读完短短的 API Doc 后准备开始写段小脚本时，悲剧发生了：它竟然乱码了！
然后我也很不能相信，于是又回去读了读文档，看到其中清楚地写着：
返回格式： UTF-8 编码纯文本
WHAT THE F@XK? 我的 Windows 系统一直都是默认 unicode 的，而当前 pwsh 的活动代码页也是 65001。换言之，这个接口的返回值乱码绝对不是本地是 gbk/gb2312 这种低级错误。那问题出在哪呢？
为了确定它返回的编码确实是 utf-8，我看了看它的 headers，以防出现他本身发送的是 gbk/gb2312 这种乌龙。
通过 乱码恢复 确定了乱码文字现在的编码是 iso-8859-1，其本身确实是 utf-8 的。
打眼一看确实没啥问题，但我注意到了其中并没有指定 charset/encoding 信息。
以防万一，我又在 wsl 中用 curl 对比执行了一下：
此时我已经基本确定，乱码是因为 headers 中缺了东西导致的，但为什么会导致这种问题呢？我想让他不乱码难道就只能通过 wsl 来调用 API 了么？
然后通过我西安市 top3 的信息检索能力的 Google 技术，找到了这个 StackOverflow 回答：</description></item><item><title>在 winget 到来之际，再谈谈 scoop</title><link>https://example.org/posts/talk-about-scoop/</link><pubDate>Thu, 21 May 2020 15:56:06 +0800</pubDate><guid>https://example.org/posts/talk-about-scoop/</guid><description>Microsoft Build 2020 开发者大会在几天前召开了，除了 .NET, C# 等的常规更新之外，微软也发布了全新的、官方支持的命令行安装工具 winget。winget 出现的意义不用多说：Windows 终于迎来了受官方支持的命令行安装工具。此前虽然有 choco, scoop 等，但都只是第三方工具而已，如今微软第一方下场，无疑给开发者们带来了极大的鼓舞。
winget 的使用体验我一直有在 Telegram 频道 里更新，在这里不再多谈——winget 目前还没到 1.0 版本，现在只是 preview 而已，某些点今天谈完可能第二天就给更新了。或许到了 1.0 版本释出时我会再更一篇文章吧。
谈谈 scoop 现有的问题 我在这里更想谈一谈 scoop 这个第三方的 cli installer。我一直一来都是一个 scoop 吹，本博客之前也曾介绍过 scoop1，但经过了这一年多的使用，我也逐渐意识到了许多问题，这些问题或许不是“痛点”，但却总让人有股隔靴搔痒的无力感。
重名问题 当多个 bucket 内有同名 manifest 时，会按照 bucket 的顺序，自动安装最靠前的 manifest。比如我的 backit 与 main bucket 里都存在 ffsend，执行 scoop install ffsend 时，scoop 会安装 backit/ffsend，而非有一个询问。虽然可以用 scoop install main/ffsend 来指定安装，但 scoop 官方是应该注意到这一点的，而非让用户每次都 search 一下。
不受关注的软件 scoop 的 bucket 是靠社区维护的，通常情况下这意味着 bug 更容易被发现——最先发现问题的人通常都会去开 issue 或 pull request。</description></item><item><title>一些 powershell 脚本</title><link>https://example.org/posts/some-pwsh-scripts/</link><pubDate>Wed, 13 May 2020 21:34:09 +0800</pubDate><guid>https://example.org/posts/some-pwsh-scripts/</guid><description>近期写的、收集的一些 pwsh 脚本，我完整的 pwsh 配置可看 batkiz/dotfiles。
由于主要是为了满足个人使用，所以没怎么做错误处理之类的。
在 pwsh 中使用 wsl 中的 nvim dos2nix 是将 windows 风格的路径转换为 wsl 中的路径。
function dos2nix { param($dosPath) $path = $dosPath.Replace(&amp;#39;\&amp;#39;, &amp;#39;/&amp;#39;) if ($path -match &amp;#39;[a-zA-Z]:.*&amp;#39;) { $drive = $path.split(&amp;#39;:&amp;#39;)[0].ToLower() $filePath = $path.split(&amp;#39;:&amp;#39;)[1] $nixPath = &amp;#39;/mnt/&amp;#39; + $drive + $filePath } else { $nixPath = $path } $nixPath } function vim { param ( $Path = &amp;#39;.&amp;#39; ) if ($Path -eq &amp;#39;.&amp;#39;) { $Path = &amp;#39;.</description></item><item><title>Conway's Game of Life</title><link>https://example.org/posts/conways-game-of-life/</link><pubDate>Fri, 17 Apr 2020 20:55:58 +0800</pubDate><guid>https://example.org/posts/conways-game-of-life/</guid><description>R.I.P John Conway.
由于近期席卷全球的新冠肺炎，John Conway 不幸染病离世。生命游戏 (Game of Life) 是其最为著名的成果。几天前我在 Codewars 上刷到了相关的题目，花了一段时间做了出来，在此写一篇文章，就当是为了纪念 Conway 吧。
题目 Given a 2D array and a number of generations, compute n timesteps of Conway&amp;rsquo;s Game of Life.
The rules of the game are:
Any live cell with fewer than two live neighbours dies, as if caused by underpopulation. Any live cell with more than three live neighbours dies, as if by overcrowding. Any live cell with two or three live neighbours lives on to the next generation.</description></item><item><title>Hugo 自动化 CI V2</title><link>https://example.org/posts/hugo-ci-v2/</link><pubDate>Mon, 13 Apr 2020 11:19:09 +0800</pubDate><guid>https://example.org/posts/hugo-ci-v2/</guid><description>改进了一下自动化发布博客的 CI，代码在下面。
如果想拿去用的话只需要修改 env 下的值就行了。
name: blog on: [push] # 各种信息在此处设置 env: # config.toml 里 theme 的值 THEME_NAME: left # 主题的 github 链接 THEME_REPO: https://github.com/batkiz/left.git # github username USER_NAME: batkiz # github email EMAIL: batkiz@outlook.com # GitHub token GH_TOKEN: ${{ secrets.GH_TOKEN }} jobs: build: name: Build runs-on: ubuntu-latest steps: # 获取 repo 内文件 - uses: actions/checkout@v2 # 使用预编译的 Hugo 二进制文件 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#34;latest&amp;#34; extended: true # 新建站点 - name: new site run: | hugo new site $HOME/blog # 获取主题 - name: get theme run: | git clone --depth=1 $THEME_REPO $HOME/blog/themes/$THEME_NAME # 获取 $user.</description></item><item><title>翻译 | SEO 是如何毁掉互联网的</title><link>https://example.org/posts/how-seo-ruined-the-internet/</link><pubDate>Thu, 09 Apr 2020 22:49:16 +0800</pubDate><guid>https://example.org/posts/how-seo-ruined-the-internet/</guid><description>原文： How SEO Ruined the Internet
翻译：batkiz
译者按：SEO，即搜索引擎优化（search engine optimization），指通过了解搜索引擎的运作规则来调整网站，以提高网站在有关搜索引擎内排名的方式。
在 1998 年到 2003 年的那段时间，在 Google 上搜索是非常神奇的。我还记得输入像是“oil mother&amp;rsquo;s milk,”这样一个模糊的概念，然后就被导航到了 Thomas Gold 的一篇访谈。（Thomas Gold 是一位天文物理学家，提出了石油会因为地壳压力重新沉积的理论。）
现如今，如果你在寻找技术性的、具体的、学术性的或是一般非商业的信息，那么你拥有了该死的好运气。世界上最好的信息检索系统像是变成了 2006 年代的 Digg 一样：由一小部分商业玩家控制的流行流行指数。他们称自己为“SEO”。
拥有着卓越技术的 SEO 专家们通常使网站更快、更安全、更易访问。“黑帽” SEO 则显然是坏蛋。他们以破坏规则的方式来提升自己网站的排名（例如侵入一个网站，在其中添加到自己网站的链接）。然而，黑帽们只是 SEO 世界中的小小罪犯。还存在着看似是好家伙，实际上却是披着羊皮的狼的 “白帽” SEO。
这些网络营销者的策略十分简单：以集权压制竞争。他们躲藏在合理与伪善的大旗之下，如同极权政体一般，他们为了达到目的不择手段。下面是他们使用的一些手段：
编辑历史 你重新读一篇文章时，你可能会发现其标题或是链接被改动过，这是一个非常普遍的行为。SEO 专家会“优化”旧文章来使它们更为市场化（并为读者推荐更新、更商业化的内容）。当我回看十年前我写的文章时，文章已经变得面目全非：夹杂着我从未写过的内容，承载着我从未表达的含义。
删除过去 在大型知名网站上，“内容修剪”是一个非常有效的 SEO 策略。相比于将具有历史意义的内容归档，许多网站会选择将它们删除，返回 410 状态码。永久性的丢失。这样做是为了优化“抓取配额”，使 Google 关注当下更为流行的内容。结果便是互联网上不再有制度记忆（institutional memory或是可信度了。
导演叙事 给我一个现代新闻编辑室，我会给你展示一个指导写手们的内容策略专家。但是，当记者们因必须写自己感到不舒服的专题而感到压力，或是被强迫以特定的角度解读问题，“SEO 最佳实践”就像是一个宣传机构了。这是有线新闻效应，黑幕背后的人可以随意修改台本，将所有的事都推送为“爆炸新闻”！
提供“有选择的”错觉 一少部分出版公司手握着上百家的年浏览量以数十亿计的媒体网站。当你搜索“最好的手机”时，你可能会看到来自 TechRadar, Android Central, T3, Tom&amp;rsquo;s Guide, Anandtech, iMore 或是 Top Ten Reviews 的搜索结果。不论你点击了哪个结果，你其实都毫无选择：上述的所有都隶属于一下公司之下。
囤积财富 链接就是网络中的货币。没有链接的话，搜索引擎将无法分辨哪个页面更为有价值。不幸的是，许多网站不允许其他网站引用他们的内容，或是为每一个链接都加上 ref=&amp;quot;nofollow&amp;quot; 属性（即告诉搜索引擎不要抓取这条链接）。这使得整个网络世界都变的更为贫瘠了。</description></item><item><title>用 C# 设置 Hugo Aliases</title><link>https://example.org/posts/set-hugo-aliases-with-csharp/</link><pubDate>Sun, 05 Jan 2020 00:53:07 +0800</pubDate><guid>https://example.org/posts/set-hugo-aliases-with-csharp/</guid><description>2020 年新年好！
相信细心的读者已经注意到了，本博客的文章链接已经全部从 blog.batkiz.com/:year/:month/:day/:filename/ 调整为了 blog.batkiz.com/posts/:year/:filename/ 的 url 格式。主要的原因是 url 的可读性：一则我个人认为让完整的日期出现在文章的 url 中对“人”非常之不友好。比如我曾想直接输入文章链接访问文章时，日期极大地为我原本就不太好的记忆力增加了负担。另一方面，具体而完整的时间对于读者也是不必要的，几乎没有人会关注文章是在几月几号几点写的，作为读者，更关注的点在于内容，在 url 中隐藏掉具体的时间，只给出一个年份，在我看来是某种程度上的平衡。
其实这个想法早在将博客生成器由 hexo 切换到 hugo 时就有了，但是由于兼容性的问题（我在煎蛋等平台上的投稿有到我文章的链接），我不能让原本的文章给 404 掉，所以当时只能忍辱负重，继续使用含有完整日期的 url。（见此文）
而在某天晚上我刷牙洗漱时，我突然想到，能否将 url 更改的同时，设置以带有完整日期链接的访问跳转到新的链接。经过一番搜索，我找到了名为 Aliases 的功能，这正是我要找的！
但是，在打算用这个功能时，我犯了难：博客经过三年多的积累，文章的量并不是我能够手动一篇一篇的修改的了的。当然啦，作为一个程序员，第一时间想到的，当然就是通过写代码来自动化啦。
通过观察，所添加的 Aliases 项应被添加在 frontmatter 中，其主要依赖了文章的日期即 date 项。我最开始的想法是，将每篇文章的 frontmatter （在我的文章中用的是 yaml）序列化，对序列化后的项进行修改，最后再反序列化，保存至文章。
但是由于我并没有找到一个可用性较高的解析 markdown 文件 yaml frontmatter 的库，此想法只好作罢。
经过我的进一步观察，每篇文章的 date 项均处在第三行，且格式为
date: yyyy-mm-dd time 事情就好办了起来。
核心思想即：读入文本，将位于第三行的日期解析出来-&amp;gt;生成 Aliases 项-&amp;gt;写入文本。
下面是代码（C# 8, dotnet core 3.1），由于时间匆忙，且需求简单，因此未做过多的处理。
using System.Linq; using System.IO; using System; namespace AddAliasToBlogPosts { class Program { static void Main(string[] args) { string dir = @&amp;#34;C:\code\blog-contents\content\posts&amp;#34;; var posts = GetPosts(dir); foreach (var item in posts) { AppendAlias(GetAlias(item), item, 3); //System.</description></item><item><title>在 powershell 中无缝调用 wsl 中的 neovim</title><link>https://example.org/posts/using-wsl-nvim-in-powershell/</link><pubDate>Sat, 30 Nov 2019 16:04:34 +0800</pubDate><guid>https://example.org/posts/using-wsl-nvim-in-powershell/</guid><description>注 1：neovim 亦可换为 vim
注 2：最新版本的 pwsh 脚本请点此获取
在如今的 Windows 中，wsl 无疑能够极大提升我的开发体验。vim 则是任何人都绕不开的 TUI 编辑器。
不可否认，zsh/bash/fish 等 Linux 下的终端非常便捷好用，但我也是非常喜欢 powershell 的。在 之前的文章 中，我对 powershell 进行了很多自定义配置，我也越来越离不开 powershell 了。
既然在我的 wsl 中我已经配好了 neovim，如果我再在 Windows 之上配置一份，无疑是多此一举。
那么该如何无缝调用呢？
主要问题 使用 wsl nvim filename 的话过于啰嗦 Windows 中如果使用自动补全路径，文件路径使用的 \，neovim 会将其识别为文件名的一部分 解决方案 话不多说，来看代码：
function vim { param($fileName = &amp;#39;.&amp;#39;) wsl -e nvim $filename.Replace(&amp;#39;\&amp;#39;,&amp;#39;/&amp;#39;).Replace(&amp;#39;C:&amp;#39;,&amp;#39;/mnt/c&amp;#39;) } 将上面的代码写入 powershell 的配置文件保存（notepad.exe $PROFILE），之后新开一个 powershell 终端，就能无缝体验啦。
对代码的解释 下面是解释。
第一行的 function vim 可以视为 Linux 之中的 alias，让我们每次在 powershell 中输入 vim 时，自动转换为下面的命令。</description></item><item><title>滚进 wsl2</title><link>https://example.org/posts/lets-roll-to-wsl2/</link><pubDate>Wed, 06 Nov 2019 23:23:42 +0800</pubDate><guid>https://example.org/posts/lets-roll-to-wsl2/</guid><description>本文已于 2020/05/26 更新，过时的信息已用删除线标注。
我是真没想到这都快过半年了 20H1 还没释出稳定版
早在今年上半年的 Build 2019 上，微软宣布了 wsl2，使得 wsl 不再只是 system call 的翻译，而是切切实实跑在一个真正的 Linux 内核之上。这样一来，wsl 将不再受内核的局限，能够运行 docker 等与 Linux kernel 密切相关的软件。
自宣布以来，wsl2 的开发很快提上日程，并将在 Windows 10 20H1 版本中可用。但想要升级至此版本，目前还需进入预览体验计划，而 Windows 10 目前的 bug 数量使我对 insider fast ring 望而却步。 最近在经过了很长时间的心理斗争之后，我最终还是进入了快速预览版，开始体验 wsl2，下面是途中遇到的一些坑，留存至此，以备后来者避坑。
首先需要说明的是，wsl1 与 wsl2 各有优劣，两者之间并非常规意义上的「升级」，更像是一种并行。如果并非是涉及内核等问题，仅仅是执行一些上层程序，我个人建议继续使用 wsl1，这样更加节省内存等资源。（当然可以 wsl1 与 wsl2 各安装一个/多个，按需启动）
安装 安装过程参考官方的 WSL 2 的安装说明 即可。
首先滚入 20H1 的预览版，升级系统，而后开启 hyper-v 平台，跑一个命令将原本的 wsl1 转为 wsl2 即可。更改的过程可能要花几分钟时间，等待就好。
之后就能开始使用 wsl2 啦！
各种坑 ……当然，路途不总是一帆风顺的，而是伴随着艰难险阻。</description></item><item><title>写在 hosts-tool-go 0.1.0 之际</title><link>https://example.org/posts/sth-about-hosts-tool-2/</link><pubDate>Thu, 24 Oct 2019 23:59:34 +0800</pubDate><guid>https://example.org/posts/sth-about-hosts-tool-2/</guid><description>不知不觉，自 第一个 commit 算起，时间已经过去了四个多月。实际的开始开发时间自然要更早一些。host-tool-go 也慢慢变得更加可用，版本号也刷到了 0.1.0。
到现在，在 上一篇文章 中所计划的三个功能也已一一实现：
local hosts 功能，暂定是搞个 local 文件和 config 文件放一块 home 功能，hosts-tool-go home NAME 来直接浏览器打开这个 hosts 源 无任何命令行参数附加打开时搞出一个交互式的命令行 开发过程 这里记录一些写 go 语言时的小技巧
// TODO // （其实大家都知道 TODO 列表里的事情永远都不会办的对吧 事实上这个在闲暇之余写的小软件已经完全地满足了我自己的需求，我甚至有点就此封存、甩手不干的冲动。
但说实话，这个小软件还有很多缺点：
丑陋的实现 毫无错误处理 没有用上的 API 一团糟的代码管理 词不达意的变量名 etc. 所以我还会继续写下去，一步步重构、重写，慢慢完善。
ROADMAP 按照惯例，文章最后我会列出目前所规划的一些东西，具体如下：
启动时自动请求 admin/root 权限，省的每次都 sudo 了 使用 goroutine 并行进行各个源的更新 组织代码存放目录与 package 信息 重构代码 添加单元测试 完善错误处理（Go 2 释出之后） by batkiz ，2019 年 10 月 24 日夜。</description></item><item><title>博客迁移至 Hugo 并实现自动化</title><link>https://example.org/posts/migrate-to-hugo-and-automation/</link><pubDate>Sun, 20 Oct 2019 22:01:44 +0800</pubDate><guid>https://example.org/posts/migrate-to-hugo-and-automation/</guid><description>好久不见！
自 6 月以来，本人虽然没什么产出，但怎奈没动力写博客，至今只写了两篇不疼不痒的综述文章。但今天（2019/10/20）偶然在 v2ex 上看到了 hexo 释出 4.0 版本 的消息，而后想到自己曾数次想要脱离贵前端生态圈，摆脱令人脑壳痛的依赖问题，实现博客自动化等等等等事情。
于是，我趁着今天是闲暇的周日，把一切事情办好了。
下面是过程复现与总结。
Hugo 其实最早我并不是太想换到 Hugo 的，但奈何自己想要写一个静态博客生成器的计划一直提不上日程…… 便选择了这个解决方案。
之后是主题的选择。由于 Hugo 的主题生态圈较之 Hexo 仍较为匮乏，因此选择并不多。经过我在各种网站上的搜罗与比较，下面列出我较为偏向的选择：
Maupassant，这个是我在 Hexo 上一直使用的主题，但 Hugo 上的移植版我不太满意，pass。 https://linw1995.com/，这个主题我十分喜欢，但由于没有提供主题的 repo，只能作罢。 LeaveIt，这个主题看着还行，但太久没维护，都没办法用…… KeepIt，这个是上面 LeaveIt 的 fork，也是我最终的选择。 但由于 KeepIt 的功能还是不太能满足我的需求，因此我又 fork 了一份，作为自用。地址 batkiz/left
开始迁移 整个迁移过程中，我最在意的是该死的 兼容性 ，即，我新生成的博客要与之前的博客在整体行为上没有太大变化，下面就是在保证兼容性前提下的迁移过程。
链接 之前的链接不能直接 404，让读者找不到文章（虽然原来就没啥读者），不能造成割裂行为。
Hexo 默认的链接生成方法为 /:year/:month/:day/:filename/，而 Hugo 的则为 /:year/:filename/。
解决很简单，修改为相同的即可。
RSS 之前在 hexo 之上构建时，我采用的 hexo 插件是生成出 atom.xml 文件的，而在新的主题下生成的则是 index.xml。
解决方法：在 config.toml 中加入下列内容
[outputs] home = [&amp;#34;Atom&amp;#34;, &amp;#34;HTML&amp;#34;] [outputFormats.</description></item><item><title>关于</title><link>https://example.org/about/</link><pubDate>Sun, 20 Oct 2019 15:47:30 +0800</pubDate><guid>https://example.org/about/</guid><description>一帘新语随风去，半山明月踏江来。
about me 我的 id 叫做 batkiz，今年 17 岁（去年和明年也都是 17 岁），没有女朋友。生活健康而规律，饮食清淡，从不抽烟，偶尔会喝些啤酒。晚上熬夜不会超过凌晨一点半，每天要睡八到九个小时。偶尔会心情低落，但很快会调整回来。
喜欢写代码但技术非常差，对很多技术都止于吹比，Google 和 StackOverflow 是我最喜欢的两个网站。文章则会偶尔水一篇出来。
如果你想要关注我无趣的生活，可以关注 telegram channel @batkizc 。
contact 由于对目前 GitHub pages 的几种评论系统都不太满意，故即日起（2019/10/7）关闭博客的评论系统，择日再开。
关于评论的补充：我将在 GitHub Discussions 对所有项目可用且 utterances 提供对 GitHub Discussions 的支持后，开启本站的评论系统。详情见此
由于 GitHub Discussions 暂未提供 API，utterances 尚无法提供支持，关于本博客的评论可在 https://github.com/batkiz/batkiz.github.io/discussions 下发送。
giscus 是一个基于 GitHub Discussions 的评论系统。重开评论啦！
如有需要，请通过下列方式与我取得联系：
email: batkiz [at] outlook [dot] com github: batkiz telegram: @batkiz telegram: @batkizc 的附属群组 about this blog 使用了 Hugo 作为静态博客生成器，主题则是 自己改过的 left 自己写的 fs hugo-tania。</description></item><item><title>使用 VS Code 与 TinyCC 学习 C 语言</title><link>https://example.org/posts/c-using-vscode-and-tcc/</link><pubDate>Sun, 06 Oct 2019 15:56:43 +0000</pubDate><guid>https://example.org/posts/c-using-vscode-and-tcc/</guid><description>本文不对其他 C 语言的 (editor || IDE || compiler) 作评价，仅分享一个方案。
VS Code 下载安装 VS Code。
安装下列扩展
C/C++ ms-vscode.cpptools TCC Compiler lihram.vscode-tcc-compiler 使用 于任意路径新建 tmp 文件夹，使用 VS Code 打开。
新建 hello.c 文件，并写入下列内容
#include &amp;lt;stdio.h&amp;gt; int main(void) { printf(&amp;#34;Hello World.\n&amp;#34;); printf(&amp;#34;你好世界。&amp;#34;); return 0; } 保存后按下 F1 键，输入 tcc，找到 TCC: Run 项，回车，可看到下面的 terminal 被唤起，并输出下列信息
Hello World. 你好世界。 如此，基本的开发环境便配置完成，enjoy!
疑难解答 why TCC?
在 Windows 平台上，gcc, clang 的安装过于复杂，且所占空间较大，而 TCC 仅几百余 k，安装扩展后即可使用。而且 TCC 完全支持 ANSI C，且对 C99 的特性大部分都支持，仅对学习来说，完全够用。</description></item><item><title>oh my powershell</title><link>https://example.org/posts/oh-my-powershell/</link><pubDate>Tue, 24 Sep 2019 22:43:46 +0000</pubDate><guid>https://example.org/posts/oh-my-powershell/</guid><description>对 *nix 平台上的 oh-my-zsh 的绝赞复刻！
备受好评的 shell 配置，来到了 powershell 之上~
requirements set-executionpolicy remotesigned 执行策略更改，以执行脚本、安装应用 scoop installation Install-Module posh-git -Scope CurrentUser Install-Module oh-my-posh -Scope CurrentUser scoop install scoop-completion 亦可均由 scoop 安装，即
scoop install scoop-completion scoop install oh-my-posh scoop install posh-git 配置 配置文件为 ~\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1，若不存在请自行创建。
写入下列内容并保存：
Import-Module posh-git Import-Module oh-my-posh Set-Theme PowerLine more things 我的 profile 文件与自己写的主题 dotfiles/powershell 最好用 Windows Terminal 作为终端</description></item><item><title>关于 hosts-tool 的一些事</title><link>https://example.org/posts/sth-about-hosts-tool/</link><pubDate>Mon, 17 Jun 2019 19:10:57 +0000</pubDate><guid>https://example.org/posts/sth-about-hosts-tool/</guid><description>前置 由于平时有些修改 hosts 文件的需求（屏蔽广告啦），所以之前一直在用 SwitchHosts! 来自动下载远程 hosts 文件。
但 SwitchHosts! 还是有几点不尽如人意的地方：
由 Electron 与 JavaScript 开发 每次开启均会使用一个一个名为 SnoreToast 的软件 不能做到随用随开，用完就关，需要手动在托盘处关闭后台 上面这些其实都在能忍受的范围内，毕竟 又不是不能用 ，而且也没有其他合适的轮子，将就着也还能用。 但是！近期（也都两三个月了）直接不能用了。直接不能从远端下载更新 hosts 文件了，加上我瞅着作者也不活跃开发了，迫不得已，只好自己造轮子。
最开始时是用的 dotnet core C# 来写的，名为 hosts-tool，代码已基本可用，奈何我对 OO 不甚了解，后面的功能无法继续增加，也就未开源。加上种种原因，一直勉强用着。
后来，我学了 golang，由于其编译出来的可执行程序是单文件，所以使用 go 来重写 hosts-tool 势在必行。
重写 刚开始重写实际上是简单的把 C# 的函数写成 go 语言版本的。后来开始使用各种库、考虑跨平台。
下面是一些写代码过程中得到的经验与吐槽。
为什么 args 里第一个是 c.Args().First() 第二个却是 c.Args().Get(1)) 。都用 c.Args().Get()) 之后从零数也不至于让人这么迷惑。 将 aurora 以 . &amp;quot;github.com/logrusorgru/aurora&amp;quot; 方式引入经常会打印出来一些奇怪的字符。 错误处理太烦人了。 写入配置文件记得用 os.O_TRUNC 截断。 ROADMAP 下面是一些想起来了但暂时没动力写的功能
local hosts 功能，暂定是搞个 local 文件和 config 文件放一块 home 功能，hosts-tool-go home NAME 来直接浏览器打开这个 hosts 源 无任何命令行参数附加打开时搞出一个交互式的命令行 慢慢摸咯，想起来时再写 23333</description></item><item><title>为 Git 配置代理</title><link>https://example.org/posts/git-behind-proxy/</link><pubDate>Sun, 26 May 2019 16:39:16 +0000</pubDate><guid>https://example.org/posts/git-behind-proxy/</guid><description>加速境外 git 服务托管网站速度。
操作 首先确保本地已开启 ss 或 ssr。 而后命令行执行如下命令。
git config --global http.proxy &amp;#39;http://127.0.0.1:1080&amp;#39; git config --global https.proxy &amp;#39;http://127.0.0.1:1080&amp;#39; 原理 在大多数 git 代理相关文章中，均配置的是 socks5://127.0.0.1:1080 进行代理。这样虽然速度确实增加了，但由于 协议并不支持 socks5 协议，每次 git push 操作时还需要手动输入账户密码，不能通过 ssh key 来登录，非常影响体验。
ss/ssr 使用的是 socks5 协议，为使 http 协议也经过代理，均自带了 privoxy 将 socks5 协议 转换为 http 协议。因此我们可以直接设置为 http://127.0.0.1:1080，问题得以解决。
注意事项 此处配置代理只配置了 http 与 https 的，因此一定不要使用 ssh 协议。</description></item><item><title>翻译 | 给新手程序员们的建议</title><link>https://example.org/posts/advice-to-new-programmers/</link><pubDate>Sun, 28 Apr 2019 21:17:56 +0000</pubDate><guid>https://example.org/posts/advice-to-new-programmers/</guid><description>这篇都是过年前翻译的了，但一直懒得放上来=。=
原文：Advice to new Programmers
并不是每天都有学生向 709 个软件开发者寻求建议的机会的。
综述 在瑞典马尔摩有一所学校叫做 The Game Assembly。这所学校专注于游戏制作教学。编程、艺术及设计，无所不包。有一个最后一年在游戏工作室度过的三年项目。
因为我为一家游戏公司工作，我们被邀请向这些学生举办讲座。在过去几年间我曾数次做讲座，且非常荣幸得到此机会。
今年我开始向新来的学生们讲演。原计划为面向对象编程的基础，但我还有另一个想法。
为什么不联系 Twitter 并问他们对“易受影响的年轻人”有什么建议呢？
推特上的程序员你们好！
几天后我将会向一些易受影响的年轻人演讲
他们尚且处于学习的早期阶段，20 来岁的样子。
你最想给出什么建议呢？语言是未知的。
感谢转推
（我会在幻灯片中引用你们，所以务必友善：）
— Ólafur Waage (@olafurw) January 21, 2019
我确实没料到能获得 700 余条回复。因为在这条推特与演讲之间只有两天，我并不能总结所有的智慧。但是我也在试着寻找获赞最多的与在游戏产业中工作的人。
但有着太多的数据被掩盖。我需要分析这些回复。
获得数据 刚开始我试着仅仅浏览 Twitter 上的时间线并复制文本。但显然，当一个讨论贴达到了一定规模时，Twitter 限制了你能看到的推文数。所以从数据集中我仅能得到 285 个回复。
接下来是使用 Twitter 开发者 API，虽然被限制严重，但允许更多的搜索粒度。
通过 Python 和 Tweepy 及请求间的 5 分钟睡眠，我能够从请求中得到 763 条直接回复于我的推文。这花了 362 分钟，或言 6 个小时。更短的睡眠时间可能也行，但我睡后留下它自己跑，所以也没多大关系。
for page in tweepy.Cursor(api.search, q=&amp;#34;to:olafurw&amp;#34;, since_id=&amp;#39;1087438169585434624&amp;#39;, tweet_mode=&amp;#39;extended&amp;#39;).pages(): repliesFile = open(&amp;#34;replies.txt&amp;#34;, &amp;#34;a&amp;#34;) for tweet in page: repliesFile.</description></item><item><title>xatuctf2019 校赛 writeup</title><link>https://example.org/posts/xatuctf2019-wp/</link><pubDate>Fri, 19 Apr 2019 21:57:00 +0000</pubDate><guid>https://example.org/posts/xatuctf2019-wp/</guid><description>2019.4.14 校赛，由于之前没办萌新赛，所以这次的题有点水 23333
WEB 你能读到 flag 吗 题目：
&amp;lt;?php error_reporting(0); show_source(__FILE__); $a = @$_REQUEST[&amp;#39;hello&amp;#39;]; eval(&amp;#34;var_dump($a);&amp;#34;);?&amp;gt; 谷歌之，原题，直接复制提交。
使用 file_get_contents() 方法获得 flag
python 代码如下
import requests s=requests.session() body = {&amp;#34;hello&amp;#34;:&amp;#34;file_get_contents(&amp;#39;flag.php&amp;#39;)&amp;#34;} r = s.post(&amp;#34;http://192.168.1.5:23114/read.php&amp;#34;, data=body) print(r.content) phpdecode 直接搜 1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY= 找到了别人的 wp，flag 获得。
1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY= &amp;lt;?php error_reporting(0); require __DIR__.&amp;#39;/lib.php&amp;#39;; echo base64_encode(hex2bin(strrev(bin2hex($flag)))), &amp;#39;&amp;lt;hr&amp;gt;&amp;#39;; highlight_file(__FILE__);?&amp;gt; 可知加密为 base64_encode(hex2bin(strrev(bin2hex($flag))))，一层一层解密，python 脚本如下
from base64 import b64decode from binascii import hexlify, unhexlify code = &amp;#34;1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY=&amp;#34; print(unhexlify(hexlify(b64decode(code))[::-1])) PWN nc from 0 to 1 直接 nc 连接即可获得 flag</description></item><item><title>初探 Scoop</title><link>https://example.org/posts/using-scoop/</link><pubDate>Mon, 31 Dec 2018 00:23:27 +0000</pubDate><guid>https://example.org/posts/using-scoop/</guid><description>缘起 Linux 用的多了，不免会觉得有一个靠谱好用的包管理器是一件令人身心愉悦的事。许多人也便顺理成章地想要在 Windows 系统上来一个包管理器。
只是一方面微软已然在大力推介其 Microsoft Store，另一方面命令行形式的包管理器对于大多数人也是极为不友好的。如此这般，一个官方的包管理器自然无望。
好在开源社区里从来不缺人造轮子。于是我们现在有了两个选择：Chocolatey 与 Scoop，一个 package manager ，一个 command-line installer 。
既然本文标题为 scoop，那么显然 choco 已不是我们主要要讨论的了，至于最初我为什么选择了 scoop 而非 Choco，原因早已不记得了。或许是因为 choco 分为开源版与商业版，抑或是我尚未真正想要使用 Windows 上的“包管理器”来管理我的所有软件——虽然我不必与各种流氓软件斗智斗勇，但我还是非常享受各种软件的安装过程中的自定义，Add to PATH, 添加到右键菜单。当然，最主要的原因还是 Windows 并没有一个统一的命令行形式的安装软件接口，因此对于普通的软件，还是要无止境地 next——这又和不用包管理器又有什么区别呢？
让我们把视线转到 Linux 平台，apt 等包管理器自动进行了软件的依赖分析与解压、配置的过程。Windows 系统之上与之理念相似的便是所谓“绿色软件”——解压即可使用。这也正是 scoop 所做的，利用所写的 mainfest，将解压、配置环境变量等自动化处理。另一方面，Windows 之上大多数软件并无所谓依赖的东西，最多便是一个 VC runtime，这也使得 scoop 的工作量更少了。
使用 Scoop 默认是安装在你的用户文件夹下的，这样自然有着许多好处，例如不需要管理员权限。但如果你想要将其改变，可以在安装之前更改掉 scoop path
[environment]::setEnvironmentVariable(&amp;#39;SCOOP&amp;#39;,&amp;#39;C:\soft\Scoop&amp;#39;,&amp;#39;User&amp;#39;) $env:SCOOP=&amp;#39;C:\soft\Scoop&amp;#39; 其中的 C:\soft\Scoop 自然可以换成你想要的路径。 而后便是执行官网之上的那一行命令
iex (new-object net.webclient).downloadstring(&amp;#39;https://get.scoop.sh&amp;#39;) ——若是报错，便将 execution policy 更改一下
Set-ExecutionPolicy RemoteSigned -scope CurrentUser 而后再添加上 extras, versions 之类的 bucket，便可愉快的使用了。</description></item><item><title>翻译 | Vim 的诞生</title><link>https://example.org/posts/where-vim-came-from/</link><pubDate>Tue, 23 Oct 2018 12:55:18 +0000</pubDate><guid>https://example.org/posts/where-vim-came-from/</guid><description>原文：Where Vim Came From
另投稿于 煎蛋
translated by batkiz &amp;amp; RUInsYi @ Par-Tuner
我最近偶然发现了一个名为 Intel HEX 的文件格式。据我所了解，Intel HEX 文件（使用 .hex 扩展名），将二值图像编码为一行一行的十六进制数字，为了使它们更透明。显然它们被应用于单片机编程或将数据烧录进 ROM。无论如何，当我第一次在 Vim 中打开一个 HEX 文件时，我发现了一些令人震惊的事。这个文件格式——至少对我来说——非常难懂，但 Vim 已经知道了有关它的一切。HEX 文件的每一行都是一个被分为不同字段的记录——Vim 已经先我一步为每一字段着了色。我敬畏地问道，set ft?。filetype=hex，Vim 得意洋洋地回答。
Vim 无处不在。它被无数人使用，因此对 HEX 文件的支持并不令人意外。Vim 在 Mac OS 上被预装，且在 Linux 世界有着大批拥趸。甚至讨厌它的人也对其非常熟悉，大多数命令行工具会默认将用户扔向 Vim，以至于被困在 Vim 中的新手已经成为了一个梗。很多的网站，包括 Facebook，会在你按 j 键时向下滚动，按 k 键时向上——Vim 在数字文化中奇迹般以高水准传播。
然而 Vim 还是一个谜。不像 React，每个人都知道它被 Facebook 开发与维护，Vim 并没有明显的赞助者。尽管它极为普遍和重要，仍没有任何形式的委员会或组织机构为 Vim 的事宜做决定。你可以花费几分钟在 Vim 官网 上闲逛，却不会在谁创造了 Vim 或者为什么创造了 vim 上得到更好的结果。如果你径直打开 Vim，不加任何文件参数，你就会看到 Vim 的启动信息，称 Vim 被“Bram Moolenaar 等人”开发。但这也仅止于此。谁是 Bram Moolenaar，谁又是他暗中的合作伙伴？</description></item><item><title>考古 | 不知纸外几春秋</title><link>https://example.org/posts/oh-the-old-days/</link><pubDate>Mon, 15 Oct 2018 19:08:59 +0000</pubDate><guid>https://example.org/posts/oh-the-old-days/</guid><description>起码不是谭浩强对不对（
这书是 1995 年出版的，那时候 C99 都还没出。。
这个应该是 hao123 之类的「网址大全」出现之前的东西了
那时收发电子邮件还要学，而现在很多人几乎不知电子邮件是啥了。。
我晓得，这是递归！
表情包.jpg
你能跟上我的斯必得么
★ 是 ☆ 这 ✦ 样 ✧ 嘛 ♩
雅虎都死透了（
聊天室早已被 QQ 群等取代，国内论坛凋敝之势更是存在已久，QQ 倒是长青至此，不可思议。
如今被 app 包围的大家甚至 url 都不怎么知道了。
ibid
MSN 也已经成为历史的尘埃了啊
其实里边还有不少篇幅的学校介绍
聊天圣手（什么鬼
我确实不懂 qq 这玩意
说起来搞出 google earth 的 keyhole 是 Niantic Labs. 的猩猩王以前搞的
Google 改变生活，Google 退华恍如昨日
21 天精通 C++（大雾
你醒啦？Java 11 都出来啦。
可真是个帅小伙（
你醒啦？Windows 又退到 10 啦
Windows phone 死的太憋屈了，唉
Android 4.0.4
愿你刷机半生，归来仍是 MIUI</description></item><item><title>翻译 | RSS 的兴起与衰落</title><link>https://example.org/posts/translation-the-rise-and-demise-of-rss/</link><pubDate>Tue, 09 Oct 2018 14:58:44 +0000</pubDate><guid>https://example.org/posts/translation-the-rise-and-demise-of-rss/</guid><description>原文：The Rise and Demise of RSS
翻译：batkiz，校对：RUInsYi
这有两个故事。第一个故事是关于一个从未完全实现的对互联网未来的愿景。第二个故事，则讲述了改善一个流行标准的合作是如何演变为开源软件发展史上最富争议的问题之一。
90 年代末，在那个网景公司 IPO 与互联网泡沫崩溃间的狂热年代，每个人都能预见到互联网行将变成更为庞大的产业，尽管没人确切知道它是如何如何做到的。一种观点认为 信息聚合 将席卷整个互联网产业。最初为了使两端——服务端，与从服务端抓取文档的客户端——间的简单交流成为可能而建立的互联网，将因一种在一系列频道中重新打包并分发所有网站的新标准而蜕变。Kevin Werbach，Release 1.0，90 年代一封在投资者中影响深远的通讯的作者，曾预测信息聚合“会演化为互联网生态的核心模式，在允许企业和个人享受大规模、大范围的益处同时，保留对他们网络形象的控制。”1 他邀请他的读者一同想象这样的未来，剑术迷能够直接在他们最爱的网站上通过嵌入其中的网购插件买一把新的重剑，而非直接去“在线运动品商店”或“击剑设备零售商”。2 就如同电视世界中，大的网络提供商能够将他们的节目聚合到一个较小的地方电视台，网络上的信息聚合能使销售商和出版商通过大量的中间站点接触到消费者。这意味着，作为结论，消费者会在与销售商和出版商互动上，拥有天时地利人和的选择权。
RSS 是承诺提供这样的聚合化未来的标准之一。对于 Werbach，RSS 是“轻量级聚合协议的领先范例。”3 另一篇同期文章将 RSS 称为第一个意识到 XML 的潜力的协议。4 它正成为使用户与内容整合者能够从必须提供一切信息的网站中创造个性化定制的频道的一种方式。而现在，二十年后，RSS 像是成为了一种将死的技术，仅仅主要被播客与程序员们的科技博客使用。此外，在后来的群体中，比起实际效用，RSS 可能更主要因其政治上的象征意义而被使用。尽管有些人确实有 RSS 读者，并顽固地为博客加入 RSS 服务，这在 2018 年也是一种十分保守的表态。那个小小的橘子泡（译注：指 RSS 标志）已然成为一个象征着对与 Werbach 的想象中的聚合网络一点也不像的巨头垄断式中心化网络的反抗标志。
RSS 的未来曾是如此光明。那到底是发生了什么呢？难道它的衰落是不可避免的？还是它在一个单一 RSS 标准的发展中因内斗而落没？
浑水 RSS 曾两度被发明。这意味着，它从未有过一个明白无误的拥有者，一系列的事务又催生了无止境的争吵与辩论。但这也同时表明，作为一个重要想法， RSS 的时代已经到来。
1998 年，网景正竭力想象自己的未来。它的旗舰产品，曾一度被 80% 的互联网用户所选择的网景浏览器，正在 IE 浏览器前迅速失去份额。所以网景决定在一个全新的领域竞争。五月份，一个小组被组建起来，开始了后来被内部称为“Project 60”的项目。5 两个月后，网景宣布了“My Netscape”，一个与其他互联网门户如雅虎，MSN 及 Excite 相竞争的互联网门户。
第二年三月，网景宣布了一个叫&amp;quot;My Netscape Network&amp;quot;的 My Netscape 门户扩展。My Netscape 用户现在可以自定义他们的 My Netscape 页面所以它包含了名为“channels&amp;quot;的功能，汇集网络上最近的头条新闻。只要你最爱的网站发布了一个由网景规定格式的特殊文件，一般只需点击网站在其界面提供的“Add Channel”按键，你就能把这个网站添加到你的 My Netscape 页面。如此，一个包含着一列相关头条的小盒子就会出现。</description></item><item><title>wsl 使用指北</title><link>https://example.org/posts/using-wsl/</link><pubDate>Sat, 06 Oct 2018 16:59:37 +0000</pubDate><guid>https://example.org/posts/using-wsl/</guid><description>经由多个版本更新，现在 wsl 对于普通开发工作已基本没啥问题了，已可基本抛弃虚拟机（
注：由于 wsl 实现方式是自己实现了一遍 Linux Kernel1，因此涉及 Linux 底层（内核、hack 等）的东西基本还是不行的。。
简明入坑教程 安装 进入设置，在 更新与安全 -&amp;gt; 开发者选项 中打开开发人员模式 直接使用 Cortana 搜索 Windows 功能，在 启用或关闭 Window 功能 中勾选打开 适用于 Linux 的 Windows 子系统 进入 microsoft store，搜索 Linux，挑一个顺眼的发行版安装2 待安装完成后打开该发行版的 shell，然后设置用户名与密码 提升体验 换源 是必须的 安装 build-essential, zsh, vim 等并配置 wsl-terminal wsl-terminal 是 「用于 Windows Subsystem for Linux (WSL) 的终端模拟器，基于 mintty、fatty 和 wslbridge。」，解决了很多默认终端里存在的问题，建议 wsl 用户都来下载使用这个。
基本配置其实看看文档都能理解，不过我还是想推荐几个功能：
运行 tools/1-add-open-wsl-terminal-here-menu.js (帮助) 来添加一个 Open wsl-terminal Here 右键菜单到资源管理器上。 配置文件 etc/wsl-terminal.</description></item><item><title>telegram bots 推荐</title><link>https://example.org/posts/useful-telegram-bots/</link><pubDate>Mon, 30 Jul 2018 14:46:56 +0000</pubDate><guid>https://example.org/posts/useful-telegram-bots/</guid><description>telegram 作为一个新兴的 IM 软件，开源、安全等诸多特性都在吸引着人们来使用 telegram。 同样，bots 也是 telegram 不可或缺的一部分（误，下面我会推荐一些好用的 bot。 注：inline bot 即为在聊天框可直接敲入 @username 来调用的 bot。
图片相关 @bing 与 @pic 作为 inline bot 均可用于搜索图片，直接在聊天框发出。 你可以给 @asciiart_bot 发送一张图片，然后其会返回给你该图片的字符画版本。 @youqianbot 与 @wangjingze_bot 分别为“为所欲为”与“王境泽”表情包的生成器，用于生成 gif 表情。 @LatexBot 可以输入 LaTeX 公式生成公式的图，亦可 inline 调用。 可以给 @WhatAnimeBot 发送任意动漫的截图，以获得该图片详细信息（如番名，哪一集的什么时间）。 telegram 中的表情包非常多，但是默认却是 webp 格式，如果想要在其他 IM 软件中使用就困难了，所以有了 @Stickerdownloadbot，你可以将某个 sticker 或整个 sticker pack 的链接发送给该 bot，以获取表情包的 jpg/png 图片。 视频音乐 @utubebot 可用来下载 YouTube 的视频，并有多种格式分辨率选择。 @vid 则可 inline 调用搜索 YouTube 视频。 @vkm_bot 使用俄罗斯网站 VK 的源，可 inline 调用发送歌曲文件。 杂项 @TheFeedReaderBot 是一个可用于订阅 RSS 的 bot，不过貌似会比较慢。 @MyTeleCloudBot 则是一个什么都不会做的 bot，你可以向它发送任何东西，将其变成你的云盘。 to_kindle_bot 是一个可用于给 kindle 推送的 bot，给 kindle 推送书变得更方便了，值得一提的是它能自动把 epub 文件转码。 GmailBot 可用于给自己收发 Gmail。 @googletranslate_bot 用来翻译，不过步骤挺繁琐的。 @bennyblog_bot 可以用来查快递查美剧。 @wiki 可以 inline 调用，发送 wikipedia 页面，更可指定语言。 @letmebot: let me google it for you.</description></item><item><title>解决 cmder 光标问题</title><link>https://example.org/posts/solving-cmder-space/</link><pubDate>Sat, 16 Jun 2018 22:07:53 +0000</pubDate><guid>https://example.org/posts/solving-cmder-space/</guid><description>问题 由于 powershell 配置有些麻烦，所以最近在使用 cmder，然而在使用中有一个问题非常难受： 在 cmder 中，无论英文还是中文，输入的光标变宽或者多一个字符。
解决方法 进入 %CMDER_ROOT%\vendor 文件夹，编辑 profile.ps1，寻找下列信息(Ctrl + F)
Microsoft.PowerShell.Utility\Write-Host &amp;#34;`nλ &amp;#34; -NoNewLine -ForegroundColor &amp;#34;DarkGray&amp;#34; 将其中的 λ 改为 # 或其它字符即可。
如果使用的是 cmd，则编辑 clink.lua，寻找
if env == nil then lambda = &amp;#34;λ&amp;#34; else lambda = &amp;#34;(&amp;#34;..env..&amp;#34;) λ&amp;#34; end 将其中的 λ 改为 # 或其它字符即可。</description></item><item><title>a-short-introduction-to-markdown</title><link>https://example.org/posts/a-short-introduction-to-markdown/</link><pubDate>Thu, 29 Mar 2018 21:14:10 +0000</pubDate><guid>https://example.org/posts/a-short-introduction-to-markdown/</guid><description>markdown 是什么 Markdown 是一种 轻量级标记语言，创始人为 约翰·格鲁伯（英语：John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者 HTML）文档”。[4] 这种语言吸收了很多在 电子邮件 中已有的纯文本标记的特性。
以上内容引自维基百科。
基本语法 Google it and try yourself.
需要注意的是 markdown 的 “方言” 十分之多，可谓十里不同俗。 除知名的 GitHub Flavored Markdown 外，几乎每个编辑器都有着自己的 “方言”，望各位自行斟酌。
MathJax MathJax 便是一个在浏览器上显示 $\LaTeX$ 数学公式的 JavaScript 引擎，同样，有些编辑器支持，有些不支持，还有些是部分支持。
关于如何输入种种符号，如 $\int$，请自行寻找 $\LaTeX$ 相关知识。
下面是一些基本语法，请以 MathJax 的 官方手册 为准。
$ 表示行内公式：
质能守恒方程 $E=mc^2$ 可以写作 $E=mc^2$。
$$ 表示整行公式，如
$$\sum_{i=1}^n a_i=0$$ $$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$ 会被渲染为
$$ \sum_{i=1}^n a_i=0 $$</description></item><item><title>如何使用Xbox手柄玩Minecraft</title><link>https://example.org/posts/how-to-play-minecrafet-with-xbox-controller/</link><pubDate>Tue, 06 Mar 2018 15:23:26 +0000</pubDate><guid>https://example.org/posts/how-to-play-minecrafet-with-xbox-controller/</guid><description>前几天入手了一个 Xbox one 手柄，拿来 van ♂ 游戏，育碧的刺客信条原生滋瓷手柄，感觉不错。 但 Java 版 Minecraft 却并未支持手柄，虽然 Minecraft for Windows 10 对手柄原生支持，但可惜我要玩的是我们自行搭建的 mod 服。因此只好寻求其他方法。
被枪毙的方案 mod 在搜寻过程中，有人称该 mod 已不再更新，且 bug 较多，因此不予考虑。 Xpadder 等映射软件 需要使用第三方软件，稳定性堪忧，且需自行调整键位。 最终方案 好在一位朋友找到了油管上一位小哥上传的视频，问题终于得以解决。 为方便各位不想看或不能看的，我将方法写在下面。
步骤 打开 steam，进入库中添加本地游戏，快捷方式或自行寻找文件请随意。 点击右上角 🎮 图标，进入大屏幕模式。 而后对 Minecraft 进行单独设置为模拟键鼠模式。 在 steam 中打开 Minecraft。 enjoy it! :)
既然是模拟键鼠，那体验肯定是比不上 Windows 10 版原生支持的体验的。但总比没有强= =
2018 年八月更新： 买了个基岩版 MC，手柄体验完美！</description></item><item><title>RSS，今日头条与信息爆炸</title><link>https://example.org/posts/rss-is-best/</link><pubDate>Sun, 04 Mar 2018 19:31:44 +0000</pubDate><guid>https://example.org/posts/rss-is-best/</guid><description>献给 Aaron Swartz 本文具有极其严重的个人主观性
在知乎上一个关于 RSS 的回答上，回答者写道：“支持 RSS 是一种美德”。 RSS 是什么在此不再赘述。那么，为何支持 RSS 是一种美德呢？ 吹 RSS 警告
背景 毋庸置疑，现在是一个信息爆炸的时代，各种我们需要的不需要的信息充斥每个人。同时，人们对于新闻也越来越不信任——反转，辟谣，阴谋论。 互联网及自媒体的崛起也对新闻行业产生了冲击：
社交网络能在时间发生后的极短时间内将新闻通过网络传及全球，时效性惊人，遑论专用于此的 bot 已经出现。 大部分自媒体则以流量为导向，一方面造成了“震惊体”这种哗众取宠之物，另一方面则使事件愈发扑朔迷离，诸如汤兰兰案、比利·海灵顿之死。媒体的公信力不断降低。 在 1948 年，香农将热力学的熵，引入到信息论，即“信息熵”。
一条信息消除的不确定性越大（即熵减越大），它蕴含的信息量越大。显然，虽然我们每天都摄入着很多信息，但大部分都是对消除不确定性毫无益处，我们所得到的有用的信息极少。
因此，RSS 变得愈发必要。
为什么是 RSS RSS 的优点 聚合：将所有信息聚集在一处，不必打开浏览器检查一个个网站。 高效：维护好一份 RSS 配置，能使自己获取信息更为高效。 干净：你不会被绑架，你不会看到广告，不会看到如今被烂梗、撕*以及其他卖片儿的所占领的评论。 克制：一旦你看完列表中的文章，就能关掉 RSS 阅读器，避免了沉迷刷新闻导致的时间被浪费。 能获得更广阔的信息源：很多技术博客实际上是没有 app 承载内容的，但是却支持 RSS。 为什么不用今日头条 原因大概如下：
容易被平台所绑架。 劣质的新闻源，以及洗稿、抄袭严重。 丧失了“看点不一样的东西”的权利。（仅就 timeline 而言） 极易浪费时间。 “RSS 已死” Google reader 业已关闭，抓虾、鲜果也都早已停止服务，各个新闻网站也都在搞着自己的 app，对 RSS 也都早已停止了支持。难道说 RSS 就这样死了么？
不。
仍有大量的网站在支持着 RSS，RSS 阅读器也并未萎靡不振。而 RSS 作为一种完全开放的协议，是与互联网开放、互联的大势一致的。大势不变，此路不死。当然会与时俱进，也许要改头换面，但不会死亡。</description></item><item><title>hexo blog</title><link>https://example.org/posts/hexo-blog/</link><pubDate>Sat, 10 Feb 2018 20:46:23 +0000</pubDate><guid>https://example.org/posts/hexo-blog/</guid><description>本文为在 Manjaro 系统下对 hexo 博客搭建的复现。 另，由于文章存在时效性，本文只作为参考，实际应以Hexo 官方文档为准。这也正是我写这篇文章的原因=。=
准备工作 Git git 是一个分布式版本控制软件，最初由林纳斯·托瓦兹（Linus Torvalds）创作，于 2005 年以GPL发布。最初目的是为更好地管理Linux 内核开发而设计。
这里是Git 官网，你可以在其中获取安装文件。当然你也可以用apt，yum或pacman等包管理工具来安装。 推荐顺带配置一下用户信息（及 ssh），以避免过程中频繁输入用户名与密码。
nodejs Node.js是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。Node.js 由 Node.js 基金会持有和维护[3]，并与Linux 基金会有合作关系[4]。
同上，你可以在nodejs 官网或包管理工具中安装 nodejs。值得一提的是，apt 仓库中的 nodejs 版本过老，不推荐通过 apt 安装。
Github 账号 全球最大的同性交友网站上线啦，性感开发者在线发源码 hexo 博客使用的是 Github 提供的 GitHub pages 服务，因此一个 GitHub 账号必不可少当然你也可以选择 gitee 或者 coding.net
开始 打开 terminal(*nux 下)或者 cmd(Windows 下，记得使用管理员权限打开)。 接着一路cd到你想要存放本地博客文件的目录。 下面按照 hexo 官方文档执行npm install -g hexo-cli。 *unix 下请使用root权限执行，否则会出现错误。 而后执行
hexo init &amp;lt;folder&amp;gt; cd &amp;lt;folder&amp;gt; npm install &amp;lt;folder&amp;gt;为文件夹的名字，可以随意。 接下来请npm install hexo-deployer-git --save，这是用于向 Github 部署用的插件。</description></item><item><title>将linux装入u盘之路</title><link>https://example.org/posts/install-linux-in-upan/</link><pubDate>Thu, 21 Dec 2017 20:11:01 +0000</pubDate><guid>https://example.org/posts/install-linux-in-upan/</guid><description>别名：a day wasted
因为这事浪费了我一天时间，我觉得还是有必要写篇文章警醒后来人的（
起因 一时兴起啊 前几天有个群里有人想把 Windows 装入 u 盘，加之起了一个“做个系统随身带着岂不是美滋滋”的想法，今天早上着手制作。
过程 LinuxLive USB Creater 这么一个不好做的事，当然是事先找了很多资料的~ 于是在一个知乎回答里看到推荐了LinuxLive USB Creater，便去试了试，打开官网，按捺住吐槽这炫目的 Logo、古老的界面的冲动，先试了试。 过程不外乎选择镜像文件、u 盘之类。值得一提的是如果你勾选的话，其会自动下载一个 vbox portable 到你的 u 盘中。 安装后，根据官方文档，启动Virtualize_This_Key.exe，然而不行；重启也是不行。 方案枪毙
Rufus Rufus是一个非常好用的创建 usb 启动盘的工具。其作者对于捐赠的态度也极其令人敬佩
这个问题老是有人问我，不过这个页面上真的 没有 捐助按钮。 主要原因是我认为捐助模式不能真正帮助软件发展，相反的，会对没有捐助的用户产生一种无意的诱导性的愧疚歧视感。 当然，如果你非要坚持，你可以捐给 Free Software Foundation（自由软件基金会），他们才是无数类似 Rufus 的软件得以存在的原因。 不管如何，我都要在此对你们说 谢谢你们 对这个小程序持续的支持和热情：非常非常感谢。 但是无论怎样也请你随意使用 Rufus ，无需介怀对此项目没有付出任何经济上的贡献 – 因为你本来就不需要嘛。
但这不是我们的重点照例把iso镜像烧录进 u 盘，而后设置电脑从 u 盘启动。 显然这是无济于事的（，在再次尝试了一番 elementary os 并再次认为其好看后，便开始寻找下一个解决方案 如果我还有一个 u 盘的话应该是可以把系统安装进 u 盘的，可惜我没有
deepin boot maker &amp;amp; universal USB installer 和 Rufus 基本是一类软件，不作赘述：没卵用</description></item><item><title>我的电脑软件</title><link>https://example.org/posts/software-on-my-computer/</link><pubDate>Wed, 01 Nov 2017 07:40:44 +0000</pubDate><guid>https://example.org/posts/software-on-my-computer/</guid><description>时隔多时，我终于要从 Linux 平台回归 Windows，回想一番，把自己将要用的软件于此汇总一下。
也算是给自己一个备份归档。
浏览器 Vivaldi 一款来自 opera 浏览器创始人的浏览器 我一直在使用的浏览器，美观简洁，十分好用，标签组功能非常赞 chromium 内核，支持扩展~~(没用过就是了)~~ 2018-3-2 update: 添加了云同步的功能，完美！ Chrome Google 出品，掌握特殊上网姿势后云同步十分好用
Edge 🚀UWP Windows 10 预置浏览器 渲染内核反人类，为什么非要等到载入完成才渲染啊喂！
Firefox （三大神兽集齐了 主要用来做题用（CTF)。
下载 FDM 简洁美观的下载工具，还不限速，可惜不滋磁 ed2k 链接。
迅雷极速版 修改版的，完全绿色，可以用来下载磁力。（FDM 的磁力功能有够差的
dpdownload baidupcs-go 一个借由命令行操作的百度云工具
NetSpeedMonitor 实时查看当前网速的，直接作为任务栏插件显示，美观了不少 不能自动切换网线和 WiFi 就很难受
播放器 zPlayer UWP 🚀UWP 采用 vlc 的解码器，Fluent Design 界面，颜值爆表 现在需要付费了（好像不定时有限免活动
网易云音乐 🚀UWP 良心的音乐软件，虽然最近以来因为版权饱受诟病，但还是能用的 私人 FM 的推荐还可以 满级遥遥无期
Spotify 辣鸡网易云曲库
灵音播放器 与网易云搭配使用 不多解释，非常好用，能用来下载些歌曲 字体渲染有问题= =，桌面歌词看着好糊
哔哩哔哩动画 UWP 🚀UWP 逍遥橙子版的，偶尔看看动漫还有视频，比官方版体验好得多 与网页版各有千秋吧（</description></item><item><title>Posts</title><link>https://example.org/posts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.org/posts/</guid><description/></item></channel></rss>